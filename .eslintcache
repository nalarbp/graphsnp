[{"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"3","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"4","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"5","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"6","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"7","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"8","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js":"9","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"10","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"11","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js":"12","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js":"13","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js":"14","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js":"15","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"16","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"17","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"18","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"19","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js":"20","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js":"21","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js":"22","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_inputPlaceholder.js":"23","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"24","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/img/circle.js":"25","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/projectsReducer.js":"26","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"27","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"28","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"29","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"30","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"31","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"32","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"33","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"34","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"35","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js":"36","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js":"37","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js":"38","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js":"39","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js":"40","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"41","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"42","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"43","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"44","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"45","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js":"46","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"47","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"48","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"49","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js":"50","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"51","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js":"52","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"53","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_home.js":"54","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js":"55","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/distanceMatrix_prop.js":"56","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mscg.js":"57","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js":"58","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js":"59","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"60","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js":"61","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js":"62","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js":"63","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js":"64","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"65","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js":"66","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_select_samples.js":"67","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/util_snpDist.js":"68","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_select_charts.js":"69","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_drawCharts.js":"70","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_all_snpDist_bar.js":"71","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_group_snpDist_piechart.js":"72","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_all_snpDist_violin.js":"73","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_group_snpDist_violin.js":"74","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_intraInter_group_snpDist_violin.js":"75","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/generalActions.js":"76","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/reset_states.js":"77"},{"size":663,"mtime":1610195666000,"results":"78","hashOfConfig":"79"},{"size":1045,"mtime":1612155926000,"results":"80","hashOfConfig":"79"},{"size":477,"mtime":1610107486000,"results":"81","hashOfConfig":"79"},{"size":362,"mtime":1610086392000,"results":"82","hashOfConfig":"79"},{"size":970,"mtime":1628782168000,"results":"83","hashOfConfig":"79"},{"size":1481,"mtime":1660145055481,"results":"84","hashOfConfig":"79"},{"size":626,"mtime":1660042377096,"results":"85","hashOfConfig":"79"},{"size":88,"mtime":1610155012000,"results":"86","hashOfConfig":"79"},{"size":3473,"mtime":1662572950279,"results":"87","hashOfConfig":"79"},{"size":1661,"mtime":1662572187690,"results":"88","hashOfConfig":"79"},{"size":3257,"mtime":1662564550986,"results":"89","hashOfConfig":"79"},{"size":3064,"mtime":1662560695288,"results":"90","hashOfConfig":"79"},{"size":2039,"mtime":1662521798751,"results":"91","hashOfConfig":"79"},{"size":3086,"mtime":1662522152473,"results":"92","hashOfConfig":"79"},{"size":3648,"mtime":1661088119645,"results":"93","hashOfConfig":"79"},{"size":20564,"mtime":1662562352549,"results":"94","hashOfConfig":"79"},{"size":2634,"mtime":1633421033000,"results":"95","hashOfConfig":"79"},{"size":159,"mtime":1611887099000,"results":"96","hashOfConfig":"79"},{"size":23420,"mtime":1662572846178,"results":"97","hashOfConfig":"79"},{"size":4668,"mtime":1660710480061,"results":"98","hashOfConfig":"79"},{"size":3427,"mtime":1662572814945,"results":"99","hashOfConfig":"79"},{"size":8862,"mtime":1660145621350,"results":"100","hashOfConfig":"79"},{"size":8423,"mtime":1662572091160,"results":"101","hashOfConfig":"79"},{"size":2527,"mtime":1662523577641,"results":"102","hashOfConfig":"79"},{"size":571,"mtime":1633671995000,"results":"103","hashOfConfig":"79"},{"size":386,"mtime":1644300732000,"results":"104","hashOfConfig":"79"},{"size":378,"mtime":1610108902000,"results":"105","hashOfConfig":"79"},{"size":584,"mtime":1610154547000,"results":"106","hashOfConfig":"79"},{"size":5708,"mtime":1662561161642,"results":"107","hashOfConfig":"79"},{"size":379,"mtime":1612088497000,"results":"108","hashOfConfig":"79"},{"size":401,"mtime":1610683140000,"results":"109","hashOfConfig":"79"},{"size":391,"mtime":1611809625000,"results":"110","hashOfConfig":"79"},{"size":390,"mtime":1611802301000,"results":"111","hashOfConfig":"79"},{"size":396,"mtime":1611822589000,"results":"112","hashOfConfig":"79"},{"size":379,"mtime":1611887208000,"results":"113","hashOfConfig":"79"},{"size":408,"mtime":1612088419000,"results":"114","hashOfConfig":"79"},{"size":404,"mtime":1628788106000,"results":"115","hashOfConfig":"79"},{"size":3359,"mtime":1660752284912,"results":"116","hashOfConfig":"79"},{"size":395,"mtime":1628876227000,"results":"117","hashOfConfig":"79"},{"size":415,"mtime":1629784335000,"results":"118","hashOfConfig":"79"},{"size":3940,"mtime":1662562877480,"results":"119","hashOfConfig":"79"},{"size":2898,"mtime":1644835462000,"results":"120","hashOfConfig":"79"},{"size":220,"mtime":1611889589000,"results":"121","hashOfConfig":"79"},{"size":1992,"mtime":1662562124615,"results":"122","hashOfConfig":"79"},{"size":2068,"mtime":1634260809000,"results":"123","hashOfConfig":"79"},{"size":1945,"mtime":1631767380000,"results":"124","hashOfConfig":"79"},{"size":618,"mtime":1637596264000,"results":"125","hashOfConfig":"79"},{"size":8094,"mtime":1661142162888,"results":"126","hashOfConfig":"79"},{"size":452,"mtime":1611822450000,"results":"127","hashOfConfig":"79"},{"size":190,"mtime":1662567045064,"results":"128","hashOfConfig":"79"},{"size":3248,"mtime":1633593375000,"results":"129","hashOfConfig":"79"},{"size":250,"mtime":1612088403000,"results":"130","hashOfConfig":"79"},{"size":607,"mtime":1662562718956,"results":"131","hashOfConfig":"79"},{"size":10852,"mtime":1662515573553,"results":"132","hashOfConfig":"79"},{"size":1556,"mtime":1660154860460,"results":"133","hashOfConfig":"79"},{"size":3110,"mtime":1644829288000,"results":"134","hashOfConfig":"79"},{"size":4987,"mtime":1644836909000,"results":"135","hashOfConfig":"79"},{"size":7572,"mtime":1647499268000,"results":"136","hashOfConfig":"79"},{"size":1259,"mtime":1661088062743,"results":"137","hashOfConfig":"79"},{"size":4437,"mtime":1634890099000,"results":"138","hashOfConfig":"79"},{"size":1759,"mtime":1628134710000,"results":"139","hashOfConfig":"79"},{"size":7607,"mtime":1662561422078,"results":"140","hashOfConfig":"79"},{"size":2295,"mtime":1628744407000,"results":"141","hashOfConfig":"79"},{"size":975,"mtime":1628743494000,"results":"142","hashOfConfig":"79"},{"size":2742,"mtime":1629170912000,"results":"143","hashOfConfig":"79"},{"size":1413,"mtime":1662561358377,"results":"144","hashOfConfig":"79"},{"size":6103,"mtime":1660138288826,"results":"145","hashOfConfig":"79"},{"size":4907,"mtime":1661079728956,"results":"146","hashOfConfig":"79"},{"size":3854,"mtime":1661011644414,"results":"147","hashOfConfig":"79"},{"size":2559,"mtime":1661316301071,"results":"148","hashOfConfig":"79"},{"size":1550,"mtime":1661389194839,"results":"149","hashOfConfig":"79"},{"size":1972,"mtime":1661080533532,"results":"150","hashOfConfig":"79"},{"size":1547,"mtime":1661080433095,"results":"151","hashOfConfig":"79"},{"size":2038,"mtime":1661080852732,"results":"152","hashOfConfig":"79"},{"size":1976,"mtime":1661080651494,"results":"153","hashOfConfig":"79"},{"size":153,"mtime":1662562901257,"results":"154","hashOfConfig":"79"},{"size":3337,"mtime":1662572062710,"results":"155","hashOfConfig":"79"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},"1bmlf9h",{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"158"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"158"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"158"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"158"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"158"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"297"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"158"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"158"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["320","321"],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js",["322"],"import { Button, Divider, Typography } from \"antd\";\nimport React from \"react\";\nimport * as constant from \"../utils/constants\";\nimport \"./style_documentation.css\";\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst InputFiles = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"graphsnp-docs-content\">\n        <Title level={2} underline>\n          {\" \"}\n          Input file(s){\" \"}\n        </Title>\n        <Title level={3}>A multi-fasta SNP alignment</Title>\n        <Text>\n          The alignment file must contain a minimum of two fasta-formatted,\n          non-gap, ATGC-exclusive nucleotide sequences of equal length.\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.snps}>\n          Download alignment example file\n        </Button>\n        <br />\n        <br />\n        <Title level={3}>A distance matrix</Title>\n        <Text>\n          Alternative to the alignment, a symmetric pairwise distance matrix can\n          be used if users precompute the distance using 3rd party tools. The\n          symmetric distance matrix should be written in CSV format.\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.distanceMatrix}>\n          Download distance matrix example file\n        </Button>\n        <br />\n        <br />\n\n        <Title level={3}>Metadata table</Title>\n        <Text>\n          Metadata table must contain at least one non-empty column of\n          sample_id. Sample identifier must be identical on both metadata and\n          SNP alignment or matrix file. An additional column listing sample’s\n          collection time (scaled in days, header: collection_day) is required\n          for transmission analysis\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.metadata}>\n          Download metadata example file\n        </Button>\n        <br />\n      </div>\n      <Divider />\n    </React.Fragment>\n  );\n};\n\nexport default InputFiles;\n","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js",["323"],"import { TableOutlined } from \"@ant-design/icons\";\nimport { Col, Collapse, Row, Table } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { changeSelectedNode } from \"../action/graphSettingsActions\";\n\nconst { Panel } = Collapse;\nconst MetadataBox = (props) => {\n  //STATES\n  const [dataTable, setdataTable] = useState({\n    columns: null,\n    cells: null,\n  });\n\n  //USEEFFECTS\n  useEffect(() => {\n    if (props.metadata) {\n      //console.log(props.selectedNode);\n      if (props.selectedNode.length >= 1) {\n        //console.log(props.selectedNode);\n        let selectedNodeList = [];\n        props.selectedNode.forEach((n) => {\n          if (props.metadata.get(n)) {\n            selectedNodeList.push(props.metadata.get(n));\n          }\n        });\n\n        if (selectedNodeList.length >= 1) {\n          let columns = [];\n          Object.keys(selectedNodeList[0]).forEach((d, idx) => {\n            columns.push({\n              title: d,\n              dataIndex: d,\n              key: d + idx.toString(),\n            });\n          });\n\n          selectedNodeList.forEach((d, idx) => {\n            d[\"key\"] = idx;\n          });\n          //console.log(columns, dataSource);\n\n          //clear up columns\n          let columns_filtered = columns.filter((c) => {\n            if (c.dataIndex.includes(\":color\") || c.dataIndex.includes(\"key\")) {\n              return false;\n            } else {\n              return true;\n            }\n          });\n\n          setdataTable({\n            columns: columns_filtered,\n            cells: selectedNodeList,\n          });\n        } else {\n          setdataTable({\n            columns: null,\n            cells: null,\n          });\n        }\n      } else {\n        setdataTable({\n          columns: null,\n          cells: null,\n        });\n      }\n    }\n  }, [props.selectedNode]);\n\n  return (\n    <React.Fragment>\n      <div id=\"metadata-box\">\n        {props.metadata && props.graphObject && (\n          <Row style={{ paddingBottom: \"0px\" }}>\n            <Col span={24}>\n              <Collapse accordion bordered={false} expandIconPosition=\"left\">\n                <Panel\n                  style={{\n                    marginBottom: \"0px\",\n                    textAlign: \"left\",\n                    overflowY: \"auto\",\n                  }}\n                  header={\n                    <p style={{ marginBottom: \"0px\" }}>\n                      <TableOutlined /> Selected node metadata\n                    </p>\n                  }\n                  key=\"1\">\n                  {props.selectedNode &&\n                    props.graphObject &&\n                    dataTable.columns && (\n                      <Table\n                        size=\"small\"\n                        pagination={false}\n                        style={{ width: \"100%\" }}\n                        dataSource={dataTable.cells}\n                        columns={dataTable.columns}\n                      />\n                    )}\n\n                  {!props.selectedNode && <p>No selected node</p>}\n                </Panel>\n              </Collapse>\n            </Col>\n          </Row>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    colorLUT: state.colorLUT,\n    selectedNode: state.selectedNode,\n    graphObject: state.graphObject,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeSelectedNode,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MetadataBox);\n\n/*\n\n*/\n","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["324","325","326","327","328","329","330","331"],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js",["332","333","334","335"],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_inputPlaceholder.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/img/circle.js",[],["336","337"],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/projectsReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_home.js",["338"],"import { message } from \"antd\";\nimport { csv } from \"d3-fetch\";\nimport { utcParse } from \"d3-time-format\";\nimport DistanceMatrix from \"../model/distanceMatrix_prop.js\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport * as util from \"../utils/utils\";\n\nconst _ = require(\"lodash\");\nconst fastaToJson = require(\"bio-parsers\").fastaToJson;\n\nexport const graphSNP_desc =\n  \"An interactive SNP distance viewer for investigating outbreaks and transmission networks using a graph approach.\";\n\nexport const isoDateParser = utcParse(\"%Y-%m-%d\");\n//SNPS\nexport async function snpsLoader(\n  fastaString,\n  propsSequenceToStore,\n  propsHmmMatrixToStore,\n  propsIsinputLoadingToStore\n) {\n  console.time(\"loadingSNP\");\n  const sequenceJSON = await fastaToJson(fastaString);\n  const snpsSequence = [];\n  if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n    let isolateName = {};\n    let seqLen = [];\n    let noErr = true;\n\n    for (let index = 0; index < sequenceJSON.length; index++) {\n      let messages = sequenceJSON[index].messages;\n      let parsedSequence = sequenceJSON[index].parsedSequence;\n      let success = sequenceJSON[index].success;\n\n      if (seqLen.indexOf(parsedSequence.size) === -1) {\n        seqLen.push(parsedSequence.size);\n      }\n\n      if (!success) {\n        noErr = false;\n        alert(\"Parsing error:\", parsedSequence.name);\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n\n      if (messages.length > 0) {\n        noErr = false;\n        alert(messages[0]);\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n\n      if (seqLen.length > 1) {\n        noErr = false;\n        alert(\"Size error: Alignment required sequences with same length\");\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n\n      if (!isolateName[parsedSequence.name]) {\n        isolateName[parsedSequence.name] = true;\n      } else {\n        noErr = false;\n        alert(\"Sequence error: Duplicated sequence\");\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n\n      if (noErr) {\n        snpsSequence.push({\n          id: parsedSequence.name,\n          size: parsedSequence.size,\n          sequence: parsedSequence.sequence.toLowerCase(),\n        });\n      }\n    }\n\n    if (noErr) {\n      message.success(\n        \"The sequences have been loaded, now building distance matrix ..\",\n        1\n      );\n      setTimeout(() => {\n        const hammingMatrix = new HammingMatrix(\n          snpsSequence\n        ).getHammingMatrix();\n        message.success(\"Pair-wise SNP distance matrix has been created\", 1);\n\n        propsSequenceToStore(snpsSequence);\n        propsHmmMatrixToStore(hammingMatrix);\n        propsIsinputLoadingToStore(false);\n        console.timeEnd(\"loadingSNP\");\n      }, 100);\n    }\n  } else {\n    alert(\"Error: Check the SNP alignment input requirements\");\n    propsIsinputLoadingToStore(false);\n  }\n}\n\n//DIST-MATRIX\nexport async function getMatrixInput(fileURL, matrixToStore, setisLoading) {\n  console.time(\"loadingMatrix\");\n  let data_promise_super_raw = await csv(fileURL).then(function (result) {\n    return result;\n  });\n  const headers = data_promise_super_raw.columns;\n  const diag_name = headers[0];\n\n  if (diag_name) {\n    let rowNames = [diag_name];\n    let data_promise_raw = [];\n\n    data_promise_super_raw.forEach((d) => {\n      let newD = {};\n      headers.forEach((h) => {\n        let valInt = h === diag_name ? String(d[h]) : parseFloat(d[h]);\n        let keyString = String(h);\n        newD[keyString] = valInt;\n      });\n      data_promise_raw.push(newD);\n      rowNames.push(d[diag_name]);\n    });\n\n    let areColRowNamesIdentical =\n      headers.length === rowNames.length\n        ? headers.every((val, idx) => val === rowNames[idx])\n        : false;\n\n    if (areColRowNamesIdentical) {\n      setTimeout(() => {\n        const inputMatrix = new DistanceMatrix(\n          data_promise_raw,\n          headers\n        ).createMatrix();\n        message.success(\"Pairwise distance matrix has been created\", 1);\n        matrixToStore(inputMatrix);\n        setisLoading(false);\n        console.timeEnd(\"loadingMatrix\");\n      }, 100);\n    } else {\n      alert(\"Invalid CSV matrix: not symetrical\");\n      setisLoading(false);\n    }\n  } else {\n    alert(\"First column in CSV matrix cannot an empty string\");\n    setisLoading(false);\n  }\n}\n//METADATA\nexport async function getMetadataInput(\n  fileURL,\n  metadataToStore,\n  colorLUTtoStore,\n  categoricalMapToStore,\n  setisLoading\n) {\n  console.time(\"loadingMetadata\");\n  let data_promise_raw = await csv(fileURL).then(function (result) {\n    return result;\n  });\n  const validHeaders = [\"sample_id\"];\n  const inputHeaders = Object.keys(data_promise_raw[0]);\n  let header_is_valid = true;\n\n  validHeaders.forEach((item) => {\n    if (inputHeaders.indexOf(item) === -1) {\n      header_is_valid = false;\n    }\n  });\n\n  if (!header_is_valid) {\n    alert(\"Error: Metadata requires sample_id column\");\n    setisLoading(false);\n    return;\n  }\n  //add header transformation here\n\n  const sample_id = _.countBy(data_promise_raw, \"sample_id\");\n  const duplicatedRecords = Object.keys(sample_id)\n    .map((key) => {\n      return { name: key, count: sample_id[key] };\n    })\n    .filter((d) => d.count > 1);\n\n  if (duplicatedRecords.length > 0) {\n    alert(\"Error: Duplicated id(s)\" + `${JSON.stringify(duplicatedRecords)}`);\n    setisLoading(false);\n    return;\n  }\n\n  const sample_id_empty = sample_id[\"\"] ? true : false;\n  if (sample_id_empty) {\n    alert(\"Error: Empty id(s)\");\n    setisLoading(false);\n    return;\n  }\n\n  if (Object.keys(data_promise_raw[0]).indexOf(\"collection_day\") !== -1) {\n    let isolate_start_datevalid = false;\n    data_promise_raw.forEach(function (d) {\n      d.sample_id = d.sample_id.replace(/\\s*$/, \"\");\n      d.collection_day =\n        d.collection_day && parseInt(d.collection_day.replace(/\\s*$/, \"\"))\n          ? parseInt(d.collection_day.replace(/\\s*$/, \"\"))\n          : null;\n      if (!d.collection_day) {\n        isolate_start_datevalid = true;\n      }\n    });\n\n    if (isolate_start_datevalid) {\n      alert(\"Invalid collection_day \");\n      setisLoading(false);\n      return;\n    }\n  }\n\n  let headers_for_categoricalMap = [];\n  let headers_userColorLUT = [];\n  inputHeaders.forEach((h) => {\n    let splittedHeader = h.split(\":\");\n    let isHeaderForColor =\n      splittedHeader.length > 1 && splittedHeader[1] === \"color\" ? true : false;\n    if (isHeaderForColor) {\n      headers_userColorLUT.push(splittedHeader[0]);\n    } else {\n      if (h !== \"sample_id\") {\n        headers_for_categoricalMap.push(h);\n      }\n    }\n  });\n\n  let colorLUTstore = {};\n  let categorical_Map = new Map();\n  let excludedCategory = [\n    \"0\",\n    0,\n    \"null\",\n    \"na\",\n    \"#N/A\",\n    \"NA\",\n    \"\",\n    \"excluded\",\n    \"nil\",\n  ];\n\n  headers_for_categoricalMap.forEach((d) => {\n    const columnHeader = d;\n    let row_group = [];\n    let cells = [];\n    data_promise_raw.forEach((d) => {\n      let cell = {}; //{sample: taxaA, header1: valueOfHeader1}\n      cell[\"sample\"] = d.sample_id;\n      cell[columnHeader] = d[columnHeader];\n      cells.push(cell);\n      row_group.push(d[columnHeader]);\n    });\n\n    row_group.filter(util.filterUnique); //categorical: e.g vanA, vanB\n\n    row_group.forEach((g) => {\n      let gList = cells\n        .filter((c) => {\n          return c[columnHeader] === g;\n        })\n        .map((d) => d.sample);\n\n      if (excludedCategory.indexOf(g) === -1) {\n        let categoricalID = columnHeader.concat(\"-\", g);\n        categorical_Map.set(categoricalID, gList);\n      }\n    });\n\n    let colorLUT = null;\n    let isHeaderHasColor = headers_userColorLUT.indexOf(d) > -1 ? true : false;\n\n    if (isHeaderHasColor) {\n      let headerWithColor = d.concat(\":color\");\n      colorLUT = util.colorLUTFromUser(headerWithColor, data_promise_raw);\n    } else {\n      colorLUT = util.createColorLUT(cells, columnHeader);\n    }\n    colorLUTstore[columnHeader] = colorLUT;\n  });\n\n  let metadata_Map = new Map();\n  data_promise_raw.forEach((d) => {\n    metadata_Map.set(d.sample_id, d);\n  });\n\n  metadataToStore(metadata_Map);\n  colorLUTtoStore(colorLUTstore);\n  categoricalMapToStore(categorical_Map);\n  setisLoading(false);\n  console.timeEnd(\"loadingMetadata\");\n}\n\n//PROJECT JSON\nexport async function loadProjectJSON(project_json_url, projectJSONToStore) {\n  let response = await fetch(project_json_url);\n  let dataInBlob = await response.blob();\n  const reader = new FileReader();\n  reader.readAsText(dataInBlob);\n  reader.onloadend = function (evt) {\n    const dataJSON = JSON.parse(evt.target.result);\n    const projects = new Map();\n    dataJSON.projects.forEach((p) => {\n      projects.set(p.id, p);\n    });\n\n    projectJSONToStore(projects);\n  };\n}\n\n//SNPS read from preloaded dataset\nexport async function loadSNPsequence(\n  fileURL,\n  propsSequenceToStore,\n  propsHmmMatrixToStore,\n  propsIsinputLoadingToStore,\n  snpsLoader\n) {\n  let response = await fetch(fileURL);\n\n  propsIsinputLoadingToStore(true);\n  let dataInBlob = await response.blob();\n  const reader = new FileReader();\n  reader.readAsText(dataInBlob);\n  reader.onloadend = function (evt) {\n    const dataText = evt.target.result;\n    snpsLoader(\n      dataText,\n      propsSequenceToStore,\n      propsHmmMatrixToStore,\n      propsIsinputLoadingToStore\n    );\n  };\n}\n\n//Utils\nexport function extensionCheck(fileExtension) {\n  let seqExtension = [\".fa\", \".fasta\", \".fna\", \".aln\", \".msa\"];\n  let metaExtension = [\".csv\"];\n  if (seqExtension.indexOf(fileExtension) !== -1) {\n    return \"SNP\";\n  }\n  if (metaExtension.indexOf(fileExtension) !== -1) {\n    return \"MetaOrMatrix\";\n  }\n}\n\nexport async function loadMetaOrMatrix(\n  fileURL,\n  metadataToStore,\n  colorLUTtoStore,\n  categoricalMapToStore,\n  hmmMatrixToStore,\n  isinputLoadingToStore\n) {\n  let data_promise_raw = await csv(fileURL).then(function (result) {\n    return result;\n  });\n  let metaIdHeader = \"sample_id\";\n  let inputHeaders = Object.keys(data_promise_raw[0]);\n\n  if (inputHeaders.indexOf(metaIdHeader) !== -1) {\n    getMetadataInput(\n      fileURL,\n      metadataToStore,\n      colorLUTtoStore,\n      categoricalMapToStore,\n      isinputLoadingToStore\n    );\n  } else {\n    getMatrixInput(fileURL, hmmMatrixToStore, isinputLoadingToStore);\n  }\n}\n\nexport const getParticleHeight = String(util.vh(100) - 400) + \"px\";\nexport const getParticleWidth = String(util.vw(100) - 50) + \"px\";\nexport const particleParams = {\n  fpsLimit: 24,\n  particles: {\n    number: { value: 25 },\n    size: { value: 4 },\n    links: {\n      enable: true,\n      distance: 75,\n    },\n    move: {\n      enable: true,\n      speed: 2,\n      outModes: {\n        default: \"bounce\",\n      },\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\",\n      },\n    },\n  },\n  opacity: {\n    value: 0.5,\n  },\n};\n","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/distanceMatrix_prop.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mscg.js",["339"],"//========================================== Minimum Spanning Cut-Off Graph ================================================\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport { findConnectedComponents } from \"./cluster_fcc\";\nimport { min } from \"d3-array\";\nconst kruskalMST = require(\"kruskal-mst\");\nconst _ = require(\"lodash\");\nexport function createMSCG(rawMatrix, edgeCutoff) {\n  //Assumed the input is true\n  //Take an adjacency Map of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge that have minimum value among other pair-wise sibling edges (format adjacency list)\n  let mat = _.cloneDeep(rawMatrix);\n\n  let minDistLut = new Map();\n  let nodeList_CATHAI = [];\n  let edgeList_CATHAI = [];\n\n  mat.forEach((val, key) => {\n    //1. create LUT containing all key and their minimum dist ======\n\n    //2. perform CATHAI  ======\n    //+save nodes\n    nodeList_CATHAI.push(key);\n    //+remove edges below the cut-off\n    if (edgeCutoff !== null && edgeCutoff > 0) {\n      let filteredVal = val.filter((e) => {\n        return e.value <= edgeCutoff;\n      });\n      //+merge them\n      edgeList_CATHAI = edgeList_CATHAI.concat(filteredVal);\n    }\n  });\n\n  //remove inverse duplicates edges\n  let graphEdgeList = new GraphEdgeList(\n    nodeList_CATHAI,\n    edgeList_CATHAI\n  ).getSymetricEdges();\n  let graphObject_simplified = {\n    nodes: graphEdgeList.nodes,\n    edges: graphEdgeList.edges,\n  };\n\n  //3. perform FCC\n  let fcc_clusters = findConnectedComponents(graphObject_simplified);\n\n  //4. build the MSCG\n  let nodelist_MSCG = [];\n  let edgelist_MSCG = [];\n  let singletons = fcc_clusters.members.filter((d) => {\n    if (d.clusterID === \"na\") {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  //+create relationship between identified clusters and other singleton\n  if (fcc_clusters.group.length > 0) {\n    for (let i = 0; i < fcc_clusters.group.length; i++) {\n      let sourceClusterID = \"Group \" + (i + 1);\n\n      let sourceClusterMembers = fcc_clusters.group[i];\n      nodelist_MSCG.push({\n        id: sourceClusterID,\n        data: {\n          type: \"compound\",\n          size: sourceClusterMembers.length,\n          contents: sourceClusterMembers,\n        },\n      });\n\n      //+get pairwise cluster to cluster\n      for (let j = i + 1; j < fcc_clusters.group.length; j++) {\n        let targetClusterID = \"Group \" + (j + 1);\n        if (sourceClusterID !== targetClusterID) {\n          let targetClusterMembers = fcc_clusters.group[j];\n          let minDist = [];\n          sourceClusterMembers.forEach((sc) => {\n            targetClusterMembers.forEach((tc) => {\n              let dist = mat\n                .get(sc)\n                .filter((d) => (d.target === tc ? true : false));\n              minDist.push(dist[0].value);\n            });\n          });\n          //create edgelist\n          edgelist_MSCG.push({\n            source: sourceClusterID,\n            target: targetClusterID,\n            value: min(minDist),\n          });\n        }\n      }\n\n      //+get pairwise cluster to singletons\n      for (let k = 0; k < singletons.length; k++) {\n        let targetSingleton = singletons[k].sample;\n        let minDistCS = [];\n        sourceClusterMembers.forEach((sc) => {\n          let dist = mat\n            .get(sc)\n            .filter((d) => (d.target === targetSingleton ? true : false));\n          minDistCS.push(dist[0].value);\n        });\n        //create edgelist\n        edgelist_MSCG.push({\n          source: sourceClusterID,\n          target: targetSingleton,\n          value: min(minDistCS),\n        });\n      }\n    }\n  }\n\n  //+create relationship between singleton to singleton\n  if (singletons.length > 0) {\n    for (let l = 0; l < singletons.length; l++) {\n      //add singleton as node\n      let sourceS = singletons[l].sample;\n      nodelist_MSCG.push({\n        id: sourceS,\n        data: {\n          type: \"singleton\",\n          size: null,\n          contents: null,\n        },\n      });\n\n      for (let m = l + 1; m < singletons.length; m++) {\n        let targetS = singletons[m].sample;\n        if (sourceS !== targetS) {\n          //create edgelist between singletons\n          let sourceS_LUT = mat.get(sourceS).filter((s) => {\n            if (s.target === targetS) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n\n          edgelist_MSCG.push({\n            source: sourceS,\n            target: targetS,\n            value: sourceS_LUT[0].value,\n          });\n        }\n      }\n    }\n  }\n\n  //5. Perform MST\n  //+transform edges\n  let kruskalEdges = edgelist_MSCG.map((d) => {\n    return { from: d.source, to: d.target, weight: d.value };\n  });\n  let mstEdges = kruskalMST.kruskal(kruskalEdges);\n\n  //+transfom back\n  let finalEdges = mstEdges.map((d) => {\n    return { source: d.from, target: d.to, value: d.weight };\n  });\n\n  return {\n    nodes: nodelist_MSCG,\n    edges: finalEdges,\n    clusterGroup: fcc_clusters,\n  };\n}\n","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js",["340","341"],"//========================================== SeqTrack ================================================\n/* Adapted from SeqTrack algorithm implemented in:\n- paper\n*/\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\n\nconst _ = require(\"lodash\");\nconst moment = extendMoment(Moment);\nvar dbinom = require(\"@stdlib/stats-base-dists-binomial-pmf\");\n\nexport function createSeqTrack(\n  rawMatrix,\n  metadataMap,\n  snpSeq_len,\n  mut_rate = null\n) {\n  let hammingDistMat = _.cloneDeep(rawMatrix);\n  //make list of case id and metadata based on SNP alignment\n  //error check\n  let paramsError = false;\n  let cases = []; //list of case object [ {id: caseID, date: caseDate}, ...  ]\n  let missingMeta = [];\n\n  hammingDistMat.forEach((val, key) => {\n    let caseID = key;\n    let meta = metadataMap.get(key);\n    let colDay = meta && meta.collection_day ? meta.collection_day : null;\n    if (meta && colDay) {\n      cases.push({ id: caseID, day: colDay });\n    } else {\n      paramsError = true;\n      missingMeta.push(caseID);\n    }\n  });\n\n  //check that all id in alignment have metadata (we only collection_day)\n  if (paramsError) {\n    alert(\"No collection day data for id(s): \", missingMeta.join(\", \"));\n  }\n\n  //Fun 4: Running selAmongAncestors\n  function selAmongAncestors(\n    aCase,\n    ancesWithLowestSNPdist,\n    snpLen = snpSeq_len,\n    mu = mut_rate,\n    metadata = metadataMap\n  ) {\n    //if proximity matrix is available do here:\n    //but not now, because we dont have one in graphsnp\n\n    if (ancesWithLowestSNPdist.length > 1) {\n      let ancesWithLowestSNPdist_wDay = ancesWithLowestSNPdist\n        .map((d) => {\n          d[\"day\"] = metadata.get(d.id).collection_day;\n          return d;\n        })\n        .sort((a, b) => a.day > b.day);\n\n      // if mutation rate not available, choose the oldest one\n\n      if (!mut_rate || !snpLen) {\n        let oldestAnces = ancesWithLowestSNPdist_wDay[0];\n        return { ances: oldestAnces.id, snpDist: oldestAnces.snpDist };\n      } else {\n        console.log(\"with mutation\");\n        let case_day = aCase.day;\n        let ancesWithLowestSNPdist_wDayDiff = ancesWithLowestSNPdist_wDay.map(\n          (a) => {\n            let timeDiff = Math.abs(case_day - a.day);\n            let prob = dbinom(a.snpDist, timeDiff * snpLen, mu);\n            a[\"dayDiff\"] = timeDiff;\n            a[\"probability\"] = prob;\n            return a;\n          }\n        );\n        let sorted_ancesWithLowestSNPdist_wDayDiff =\n          ancesWithLowestSNPdist_wDayDiff.sort(\n            (a, b) => a.probability < b.probability\n          );\n        let mostProbableAnces = sorted_ancesWithLowestSNPdist_wDayDiff[0];\n        // improvement: if there are two equaly most probable ances, return all.\n        return {\n          ances: mostProbableAnces.id,\n          snpDist: mostProbableAnces.snpDist,\n        };\n      }\n    }\n  }\n\n  //Fun 3: Get snp distances between case to its ances candidates, then select the lowest\n  function compareAncesSNPdist(aCase, ancesCanditates, hammingDistMat) {\n    let snpDistAnces = [];\n    for (let i = 0; i < ancesCanditates.length; i++) {\n      const ancesCandId = ancesCanditates[i].id;\n      // edgesOfAnces is a list of object paired (both dir)\n      let edgesOfAnces = hammingDistMat.get(ancesCandId).filter((d) => {\n        if (d.target === aCase.id) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      snpDistAnces.push({ id: ancesCandId, snpDist: edgesOfAnces[0].value });\n    }\n\n    snpDistAnces.sort((a, b) => a.snpDist - b.snpDist);\n    // console.log(\"snpDistAnces\", snpDistAnces);\n    //which ances has the lowest SNP dist?\n    let lowestSNPdistAnces = snpDistAnces.filter((e) => {\n      if (e.snpDist === snpDistAnces[0].snpDist) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // console.log(\"lowestSNPdistAnces\", lowestSNPdistAnces);\n    return lowestSNPdistAnces;\n  }\n\n  //Fun 2: Running and calling selAmongAncestors\n  function findAncestor(aCase, cases, hammingDistMat) {\n    //Search and return 1 best ancestor for a caseID, from the list of available cases\n    //+based on case's collection day, and (if available) mutation rate and haplo length\n    //+(length of snp sites)\n    let bestAncestor = { ances: null, snpDist: null };\n    //1. Find ancestor candidates: other case(s) which collected before this caseId\n    let candid = cases.filter((c) => {\n      if (c.day < aCase.day) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    //2. Check whether this case have ancestor(s) or not. If no its the index case (ancestor = 'NA')\n    //+ if has multiple canditates, run selAmongAncestors to choose 1 most likely candidate\n\n    // if it is index case, set ances to NA, return bestAnces\n    if (candid.length === 0) {\n      bestAncestor.ances = \"NA\";\n      bestAncestor.snpDist = \"NA\";\n      // console.log(\"index case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // if it is the second case (only have 1 candidate). set ances to identified ances, return bestAnces\n    else if (candid.length === 1) {\n      bestAncestor.ances = candid[0].id;\n      let candidHamDist = hammingDistMat.get(candid[0].id).filter((d) => {\n        let cond = d.target === aCase.id ? true : false;\n        return cond;\n      });\n      bestAncestor.snpDist = candidHamDist[0].value;\n      // console.log(\"second case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // for any other cases (multiple candidates were found)\n    else {\n      //filter candidates based on their snp distance, get candidate(s) with the least snpDist\n      let ancesWithLowestSNPdist = compareAncesSNPdist(\n        aCase,\n        candid,\n        hammingDistMat\n      ); //return a list of ances(s) [{}, {}]\n\n      //check if ancesWithLowestSNPdist is more than 1\n      if (ancesWithLowestSNPdist.length > 1) {\n        let selectedAnces = selAmongAncestors(aCase, ancesWithLowestSNPdist);\n        bestAncestor.ances = selectedAnces.ances;\n        bestAncestor.snpDist = selectedAnces.snpDist;\n        return bestAncestor;\n      } else {\n        //ancesWithLowestSNPdist is a list of one object [{ances: 'ancesID', snpDist: number}]\n        bestAncestor.ances = ancesWithLowestSNPdist[0].id;\n        bestAncestor.snpDist = ancesWithLowestSNPdist[0].snpDist;\n        return bestAncestor;\n      }\n    }\n  }\n\n  // PERFORM THIS FUN IF ALL REQUIREMENTS ARE MET\n  if (!paramsError) {\n    //initial result\n    let res = new Map();\n    for (let index = 0; index < cases.length; index++) {\n      const thisCase = cases[index];\n      // thisCase = aCase = {id: xxx, day: yyy}\n      //Fun 1: calling findAncestor function\n      let ancestor = findAncestor(thisCase, cases, hammingDistMat); //must return one best ancestor object for this caseId {ances: sample_id, snpDist= null}\n      //set the ancestor of this case to the result map\n      res.set(thisCase.id, ancestor);\n    }\n\n    //create a final graph object from the res map object\n    let final_graph = { nodes: [], edges: [] };\n    res.forEach((v, k) => {\n      final_graph.nodes.push(k);\n      if (v.ances !== \"NA\") {\n        final_graph.edges.push({\n          source: v.ances,\n          target: k,\n          value: v.snpDist,\n          dir: \"forward\",\n        });\n      }\n    });\n    //final_graph.nodes.push(\"NA\");\n\n    //return final graph\n\n    return final_graph;\n  } else {\n    let final_graph = { nodes: null, edges: null };\n    return final_graph;\n  }\n}\n","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js",["342","343"],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_select_samples.js",[],["344","345"],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/util_snpDist.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_select_charts.js",["346"],"import { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { Select, Tooltip } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  dist_changeChartsData,\n  dist_changeDataColumn,\n  dist_changeDataToDisplay,\n} from \"../action/snpdistSettingsActions\";\n\nconst { Option } = Select;\n\nconst SelectCharts = (props) => {\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n\n  useEffect(() => {\n    props.dist_changeDataColumn(null);\n    let newState_cd = Object.assign({}, props.snpDistSettings.chartsData);\n    newState_cd.groupPieData = null;\n    newState_cd.groupViolinData = null;\n    newState_cd.groupDistIntraInter = null;\n    props.dist_changeChartsData(newState_cd);\n  }, [dataToDisplay]);\n\n  const dataToDisplayHandler = (val) => {\n    props.dist_changeDataToDisplay(val);\n  };\n\n  const dataColumnHandler = (val) => {\n    props.dist_changeDataColumn(val);\n  };\n\n  const getMetadataColumn = function (header, i) {\n    const excluded_headers = [\"sample_date\", \"patient_id\"];\n    if (excluded_headers.indexOf(header) === -1) {\n      return (\n        <Option key={i} disabled={false} value={header}>\n          {header}\n        </Option>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <h5>\n        Select sample(s) for the charts{\" \"}\n        <span>\n          <Tooltip\n            title=\"Select all and or group of samples for the visualisation.\"\n            placement=\"rightTop\">\n            <QuestionCircleOutlined style={{ color: \"red\" }} />\n          </Tooltip>\n        </span>\n      </h5>\n      <Select\n        value={dataToDisplay}\n        className={\"gp-select\"}\n        disabled={props.hammingMatrix ? false : true}\n        onChange={dataToDisplayHandler}>\n        <Option value=\"all\">All samples</Option>\n        <Option disabled={props.metadata ? false : true} value=\"all-and-group\">\n          All + Group\n        </Option>\n      </Select>\n\n      {dataToDisplay === \"all-and-group\" &&\n        props.hammingMatrix &&\n        props.metadata && (\n          <React.Fragment>\n            <h5>\n              Select variable group (column){\" \"}\n              <span>\n                <Tooltip title=\"Column in metadata\" placement=\"rightTop\">\n                  <QuestionCircleOutlined style={{ color: \"red\" }} />\n                </Tooltip>\n              </span>\n            </h5>\n            <Select\n              value={dataColumn}\n              className={\"gp-select\"}\n              disabled={\n                dataToDisplay === \"all-and-group\" &&\n                props.hammingMatrix &&\n                props.metadata\n                  ? false\n                  : true\n              }\n              onChange={dataColumnHandler}>\n              {props.colorLUT && Object.keys(props.colorLUT)\n                ? Object.keys(props.colorLUT).map((k, i) => {\n                    return getMetadataColumn(k, i);\n                  })\n                : [\"na\"].map((l, j) => {\n                    return (\n                      <Option key={j} disabled={false} value={l}>\n                        {l}\n                      </Option>\n                    );\n                  })}\n            </Select>\n          </React.Fragment>\n        )}\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    colorLUT: state.colorLUT,\n    metadata: state.metadata,\n    isShowingLoadingModal: state.isShowingLoadingModal,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeDataToDisplay,\n      dist_changeDataColumn,\n      dist_changeChartsData,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectCharts);\n","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_drawCharts.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_all_snpDist_bar.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_group_snpDist_piechart.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_all_snpDist_violin.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_group_snpDist_violin.js",["347"],"import { CloudDownloadOutlined } from \"@ant-design/icons\";\nimport { Violin } from \"@ant-design/plots\";\nimport { Button } from \"antd\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NoChart, violin_group_config } from \"./util_snpDist\";\n\nconst SNPDistBoxplotGroup = (props) => {\n  const [data, setData] = useState(null);\n  const category = props.snpDistSettings.dataColumn;\n\n  const grouped_violinChart_ref = useRef();\n\n  const downloadChart = () => {\n    grouped_violinChart_ref.current?.downloadImage(\"grouped-dist-violin.png\");\n  };\n\n  useEffect(() => {\n    setData(null);\n  }, [props.metadata, props.hammingMatrix, props.snpDistSettings.dataColumn]);\n\n  useEffect(() => {\n    if (props.snpDistSettings.dataToDisplay === \"all-and-group\") {\n      setData(props.snpDistSettings.chartsData.groupViolinData);\n    }\n  }, [props.snpDistSettings.chartsData.groupViolinData]);\n\n  useEffect(() => {\n    if (props.snpDistSettings.dataToDisplay === \"all\") {\n      setData(null);\n    }\n  }, [props.snpDistSettings.dataToDisplay]);\n\n  return (\n    <div className=\"snpDist-chart-content\">\n      {!data && <NoChart />}\n      {data && (\n        <React.Fragment>\n          <Button\n            disabled={data ? false : true}\n            size=\"small\"\n            className=\"snpDist-chart-download-button\"\n            onClick={downloadChart}>\n            <CloudDownloadOutlined />\n          </Button>\n          <Violin\n            {...violin_group_config(\n              data,\n              category,\n              props.colLUT,\n              props.metadata\n            )}\n            onReady={(plot) => {\n              grouped_violinChart_ref.current = plot;\n            }}\n          />\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    metadata: state.metadata,\n    hammingMatrix: state.hammMatrix,\n    colLUT: state.colorLUT,\n  };\n}\n\nexport default connect(mapStateToProps)(SNPDistBoxplotGroup);\n","/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_intraInter_group_snpDist_violin.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/action/generalActions.js",[],"/Volumes/DATA/BUDI/PhD_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/reset_states.js",["348"],{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","severity":1,"message":"354","line":6,"column":16,"nodeType":"355","messageId":"356","endLine":6,"endColumn":25},{"ruleId":"357","severity":1,"message":"358","line":70,"column":6,"nodeType":"359","endLine":70,"endColumn":26,"suggestions":"360"},{"ruleId":"357","severity":1,"message":"361","line":103,"column":6,"nodeType":"359","endLine":103,"endColumn":26,"suggestions":"362"},{"ruleId":"357","severity":1,"message":"363","line":116,"column":6,"nodeType":"359","endLine":116,"endColumn":27,"suggestions":"364"},{"ruleId":"357","severity":1,"message":"365","line":125,"column":6,"nodeType":"359","endLine":125,"endColumn":31,"suggestions":"366"},{"ruleId":"357","severity":1,"message":"365","line":157,"column":6,"nodeType":"359","endLine":157,"endColumn":51,"suggestions":"367"},{"ruleId":"357","severity":1,"message":"368","line":175,"column":6,"nodeType":"359","endLine":175,"endColumn":28,"suggestions":"369"},{"ruleId":"357","severity":1,"message":"370","line":214,"column":6,"nodeType":"359","endLine":214,"endColumn":49,"suggestions":"371"},{"ruleId":"357","severity":1,"message":"370","line":250,"column":6,"nodeType":"359","endLine":250,"endColumn":56,"suggestions":"372"},{"ruleId":"353","severity":1,"message":"373","line":510,"column":15,"nodeType":"355","messageId":"356","endLine":510,"endColumn":34},{"ruleId":"357","severity":1,"message":"361","line":69,"column":6,"nodeType":"359","endLine":69,"endColumn":23,"suggestions":"374"},{"ruleId":"357","severity":1,"message":"363","line":79,"column":6,"nodeType":"359","endLine":79,"endColumn":27,"suggestions":"375"},{"ruleId":"357","severity":1,"message":"365","line":108,"column":6,"nodeType":"359","endLine":108,"endColumn":48,"suggestions":"376"},{"ruleId":"353","severity":1,"message":"377","line":111,"column":9,"nodeType":"355","messageId":"356","endLine":111,"endColumn":27},{"ruleId":"349","replacedBy":"378"},{"ruleId":"351","replacedBy":"379"},{"ruleId":"380","severity":1,"message":"381","line":187,"column":37,"nodeType":"382","messageId":"383","endLine":187,"endColumn":38},{"ruleId":"353","severity":1,"message":"384","line":13,"column":7,"nodeType":"355","messageId":"356","endLine":13,"endColumn":17},{"ruleId":"353","severity":1,"message":"385","line":5,"column":8,"nodeType":"355","messageId":"356","endLine":5,"endColumn":21},{"ruleId":"353","severity":1,"message":"386","line":10,"column":7,"nodeType":"355","messageId":"356","endLine":10,"endColumn":13},{"ruleId":"353","severity":1,"message":"385","line":9,"column":8,"nodeType":"355","messageId":"356","endLine":9,"endColumn":21},{"ruleId":"353","severity":1,"message":"387","line":15,"column":3,"nodeType":"355","messageId":"356","endLine":15,"endColumn":24},{"ruleId":"349","replacedBy":"388"},{"ruleId":"351","replacedBy":"389"},{"ruleId":"357","severity":1,"message":"365","line":25,"column":6,"nodeType":"359","endLine":25,"endColumn":21,"suggestions":"390"},{"ruleId":"357","severity":1,"message":"391","line":26,"column":6,"nodeType":"359","endLine":26,"endColumn":56,"suggestions":"392"},{"ruleId":"353","severity":1,"message":"393","line":10,"column":10,"nodeType":"355","messageId":"356","endLine":10,"endColumn":27},"no-native-reassign",["394"],"no-negated-in-lhs",["395"],"no-unused-vars","'Paragraph' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.metadata'. Either include it or remove the dependency array.","ArrayExpression",["396"],"React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["397"],"React Hook useEffect has missing dependencies: 'props' and 'redraw'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["398"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["399"],["400"],"React Hook useEffect has missing dependencies: 'graph_layout' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["401"],"React Hook useEffect has a missing dependency: 'props.graphObject'. Either include it or remove the dependency array.",["402"],["403"],"'prev_selected_nodes' is assigned a value but never used.",["404"],["405"],["406"],"'reloadChartHandler' is assigned a value but never used.",["394"],["395"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'minDistLut' is assigned a value but never used.","'GraphEdgeList' is defined but never used.","'moment' is assigned a value but never used.","'filterInverseSymEdges' is defined but never used.",["394"],["395"],["407"],"React Hook useEffect has a missing dependency: 'props.snpDistSettings.dataToDisplay'. Either include it or remove the dependency array.",["408"],"'resetGraphObjects' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"413","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},"Update the dependencies array to be: [props.metadata, props.selectedNode]",{"range":"434","text":"435"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"436","text":"437"},"Update the dependencies array to be: [isUserReloadSession, props, redraw]",{"range":"438","text":"439"},"Update the dependencies array to be: [graph_isUserDownloading, props]",{"range":"440","text":"441"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"442","text":"443"},"Update the dependencies array to be: [graph_isUserRelayout, graph_layout, props]",{"range":"444","text":"445"},"Update the dependencies array to be: [graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",{"range":"446","text":"447"},"Update the dependencies array to be: [graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",{"range":"448","text":"449"},"Update the dependencies array to be: [draw, isUserDrawChart, props]",{"range":"450","text":"451"},{"range":"452","text":"439"},"Update the dependencies array to be: [snpDistExportFormat, isUserExportSnpDist, props]",{"range":"453","text":"454"},"Update the dependencies array to be: [dataToDisplay, props]",{"range":"455","text":"456"},"Update the dependencies array to be: [props.snpDistSettings.chartsData.groupViolinData, props.snpDistSettings.dataToDisplay]",{"range":"457","text":"458"},[1904,1924],"[props.metadata, props.selectedNode]",[4240,4260],"[draw, graph_isUserReDraw, props]",[4594,4615],"[isUserReloadSession, props, redraw]",[4898,4923],"[graph_isUserDownloading, props]",[5990,6035],"[graph_clusterMethod, graph_isUserClustering, props]",[6513,6535],"[graph_isUserRelayout, graph_layout, props]",[7528,7571],"[graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",[8517,8567],"[graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",[2443,2460],"[draw, isUserDrawChart, props]",[2669,2690],[3405,3447],"[snpDistExportFormat, isUserExportSnpDist, props]",[841,856],"[dataToDisplay, props]",[878,928],"[props.snpDistSettings.chartsData.groupViolinData, props.snpDistSettings.dataToDisplay]"]