[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"34","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"35","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"36","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"37","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"38","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js":"39","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js":"40","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js":"41","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js":"42","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js":"43","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js":"44","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js":"45","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js":"46","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js":"47","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js":"48","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js":"49","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js":"50","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js":"51","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js":"52","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js":"53","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js":"54","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js":"55","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js":"56","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js":"57","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js":"58","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js":"59","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js":"60","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js":"61","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js":"62","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js":"63","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js":"64","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js":"65","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js":"66","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js":"67","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js":"68","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js":"69","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js":"70"},{"size":663,"mtime":1610195666935,"results":"71","hashOfConfig":"72"},{"size":1045,"mtime":1612155926082,"results":"73","hashOfConfig":"72"},{"size":362,"mtime":1610086392986,"results":"74","hashOfConfig":"72"},{"size":477,"mtime":1610107486220,"results":"75","hashOfConfig":"72"},{"size":717,"mtime":1610950774877,"results":"76","hashOfConfig":"72"},{"size":88,"mtime":1610155012196,"results":"77","hashOfConfig":"72"},{"size":2802,"mtime":1628875924265,"results":"78","hashOfConfig":"72"},{"size":1205,"mtime":1628788880308,"results":"79","hashOfConfig":"72"},{"size":20920,"mtime":1629036427747,"results":"80","hashOfConfig":"72"},{"size":18759,"mtime":1629035985949,"results":"81","hashOfConfig":"72"},{"size":2639,"mtime":1612146547627,"results":"82","hashOfConfig":"72"},{"size":612,"mtime":1628787892006,"results":"83","hashOfConfig":"72"},{"size":159,"mtime":1611887099249,"results":"84","hashOfConfig":"72"},{"size":2503,"mtime":1628875759404,"results":"85","hashOfConfig":"72"},{"size":378,"mtime":1610108902860,"results":"86","hashOfConfig":"72"},{"size":584,"mtime":1610154547016,"results":"87","hashOfConfig":"72"},{"size":5261,"mtime":1628875833582,"results":"88","hashOfConfig":"72"},{"size":6935,"mtime":1629035817255,"results":"89","hashOfConfig":"72"},{"size":3287,"mtime":1628875714320,"results":"90","hashOfConfig":"72"},{"size":401,"mtime":1610683140985,"results":"91","hashOfConfig":"72"},{"size":3154,"mtime":1628831282873,"results":"92","hashOfConfig":"72"},{"size":970,"mtime":1628782168193,"results":"93","hashOfConfig":"72"},{"size":678,"mtime":1628882847864,"results":"94","hashOfConfig":"72"},{"size":452,"mtime":1611822450355,"results":"95","hashOfConfig":"72"},{"size":383,"mtime":1611039003510,"results":"96","hashOfConfig":"72"},{"size":156,"mtime":1611039074948,"results":"97","hashOfConfig":"72"},{"size":1769,"mtime":1613287670459,"results":"98","hashOfConfig":"72"},{"size":3248,"mtime":1628132827608,"results":"99","hashOfConfig":"72"},{"size":390,"mtime":1611802301584,"results":"100","hashOfConfig":"72"},{"size":2033,"mtime":1628431320344,"results":"101","hashOfConfig":"72"},{"size":391,"mtime":1611809625614,"results":"102","hashOfConfig":"72"},{"size":2536,"mtime":1628743488198,"results":"103","hashOfConfig":"72"},{"size":4437,"mtime":1612256477904,"results":"104","hashOfConfig":"72"},{"size":499,"mtime":1612021206837,"results":"105","hashOfConfig":"72"},{"size":396,"mtime":1611822589287,"results":"106","hashOfConfig":"72"},{"size":379,"mtime":1611887208678,"results":"107","hashOfConfig":"72"},{"size":220,"mtime":1611889589251,"results":"108","hashOfConfig":"72"},{"size":379,"mtime":1612088497120,"results":"109","hashOfConfig":"72"},{"size":6539,"mtime":1628837437009,"results":"110","hashOfConfig":"72"},{"size":3827,"mtime":1628837361638,"results":"111","hashOfConfig":"72"},{"size":10501,"mtime":1628790833088,"results":"112","hashOfConfig":"72"},{"size":1759,"mtime":1628134710228,"results":"113","hashOfConfig":"72"},{"size":975,"mtime":1628743494809,"results":"114","hashOfConfig":"72"},{"size":1259,"mtime":1612312156147,"results":"115","hashOfConfig":"72"},{"size":408,"mtime":1612088419622,"results":"116","hashOfConfig":"72"},{"size":250,"mtime":1612088403076,"results":"117","hashOfConfig":"72"},{"size":2295,"mtime":1628744407732,"results":"118","hashOfConfig":"72"},{"size":487,"mtime":1612141196612,"results":"119","hashOfConfig":"72"},{"size":9460,"mtime":1628604704113,"results":"120","hashOfConfig":"72"},{"size":7524,"mtime":1628656401957,"results":"121","hashOfConfig":"72"},{"size":3147,"mtime":1628649252294,"results":"122","hashOfConfig":"72"},{"size":1381,"mtime":1628644646764,"results":"123","hashOfConfig":"72"},{"size":1437,"mtime":1628649292116,"results":"124","hashOfConfig":"72"},{"size":698,"mtime":1612251042608,"results":"125","hashOfConfig":"72"},{"size":1956,"mtime":1614030932579,"results":"126","hashOfConfig":"72"},{"size":3595,"mtime":1628837390281,"results":"127","hashOfConfig":"72"},{"size":405,"mtime":1613173279348,"results":"128","hashOfConfig":"72"},{"size":1413,"mtime":1613285314789,"results":"129","hashOfConfig":"72"},{"size":561,"mtime":1613264520935,"results":"130","hashOfConfig":"72"},{"size":7607,"mtime":1628825042519,"results":"131","hashOfConfig":"72"},{"size":10202,"mtime":1628656336982,"results":"132","hashOfConfig":"72"},{"size":7505,"mtime":1628734602629,"results":"133","hashOfConfig":"72"},{"size":2415,"mtime":1628783321736,"results":"134","hashOfConfig":"72"},{"size":1626,"mtime":1628784358553,"results":"135","hashOfConfig":"72"},{"size":2856,"mtime":1628783414284,"results":"136","hashOfConfig":"72"},{"size":404,"mtime":1628788106330,"results":"137","hashOfConfig":"72"},{"size":3652,"mtime":1629013094082,"results":"138","hashOfConfig":"72"},{"size":4833,"mtime":1629035881118,"results":"139","hashOfConfig":"72"},{"size":1585,"mtime":1628873754821,"results":"140","hashOfConfig":"72"},{"size":395,"mtime":1628876227672,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"13s4y1q",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"144"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"144"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"144"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"144"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"144"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"144"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"144"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"144"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"144"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["294","295"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["296","297","298","299","300","301","302","303"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",["304","305"],"import React from \"react\";\nimport { Row, Col, Modal, Spin, Select } from \"antd\";\nimport \"./style_home.css\";\nimport { connect } from \"react-redux\";\n//import { Link, NavLink } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { changeNavLocation } from \"../action/navigationActions\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport SNPsLoader from \"./comp_snpsLoader\";\nimport TitleHeader from \"./comp_titleHeader\";\nimport MetadataLoader from \"./comp_metadataLoader\";\nimport PatientMovementLoader from \"./comp_patientMovementLoader\";\nimport SelectDemoData from \"./comp_selectDemoData\";\nimport FooterComponent from \"./comp_footer\";\nimport Particles from \"react-particles-js\";\nimport { vh } from \"../utils/utils\";\n\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 34 }} spin />;\nconst getParticleHeight = String(vh(100) - 380) + \"px\";\nconst particleParams = {\n  fpsLimit: 24,\n  particles: {\n    number: { value: 25 },\n    size: { value: 4 },\n    links: {\n      enable: true,\n      distance: 75,\n    },\n    move: {\n      enable: true,\n      speed: 2,\n      outModes: {\n        default: \"bounce\",\n      },\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\",\n      },\n    },\n  },\n};\n\nconst Home = (props) => {\n  //console.log(\"Home\");\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xs={24} id=\"header-content\">\n          <Modal\n            visible={props.isInputLoading}\n            closable={false}\n            centered={true}\n            width={0}\n            footer={null}\n            bodyStyle={{\n              textAlign: \"center\",\n              padding: \"0px\",\n            }}\n          >\n            <Spin\n              indicator={loadingIcon}\n              style={{ color: \"white\" }}\n              tip=\"Processing...\"\n              size=\"large\"\n            />\n          </Modal>\n        </Col>\n      </Row>\n      <Row id=\"input-wrapper\">\n        <Particles\n          params={particleParams}\n          height={getParticleHeight}\n          style={{ position: \"absolute\", height: \"200px\" }}\n        />\n        <Col xs={24} sm={8}>\n          <SNPsLoader />\n        </Col>\n        <Col xs={24} sm={8}>\n          <MetadataLoader />\n        </Col>\n        <Col xs={24} sm={8}>\n          <PatientMovementLoader />\n        </Col>\n      </Row>\n      <Row id=\"demo-selection\">\n        <SelectDemoData />\n      </Row>\n      <FooterComponent />\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isInputLoading: state.isInputLoading,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeNavLocation,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n//Home called when navigating\n//Called when input is loaded (cause it subsribed to the store, so when the connected state change it will be re-called)\n/*\n<Col xs={24}>\n          <TitleHeader />\n        </Col>\n        <Col xs={24} style={{ padding: \"5px 0 0 5px\" }}>\n          <h5>\n            Click the input button or drag and drop input file(s) to start\n          </h5>\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],["306","307"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js",["308"],"import React from \"react\";\nimport { Upload, Button, message, Tooltip } from \"antd\";\nimport {\n  StopOutlined,\n  CheckCircleFilled,\n  DeleteFilled,\n  DeleteOutlined,\n  QuestionCircleOutlined,\n} from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { sequenceToStore, isinputLoadingToStore } from \"../action/inputActions\";\nimport { hmmMatrixToStore } from \"../action/graphMatrixActions\";\nimport { snpsLoader } from \"./util_inputLoaders\";\n\nconst { Dragger } = Upload;\n\nconst InputLoader = (props) => {\n  //console.log(\"Input Loader - init\");\n\n  const beforeUploadHandler = (file) => {\n    if (file) {\n      let inputType = \"seq\";\n\n      //check extension\n      //check content\n\n      switch (inputType) {\n        case \"seq\":\n          const reader = new FileReader();\n          reader.readAsText(file);\n          //console.log(reader.readAsText(file));\n          props.isinputLoadingToStore(true);\n          reader.onloadend = function (evt) {\n            console.log(evt);\n            const dataText = evt.target.result;\n            snpsLoader(\n              dataText,\n              props.sequenceToStore,\n              props.hmmMatrixToStore,\n              props.isinputLoadingToStore\n            );\n          };\n          break;\n\n        default:\n          message.error(\"Invalid input file\", 0.5);\n          break;\n      }\n    }\n    return false; //to avoid upload action (we parse and load it to store instead)\n  };\n\n  const getIconStatus = function () {\n    if (props.sequence) {\n      return <CheckCircleFilled style={{ fontSize: \"14pt\" }} />;\n    } else {\n      return <StopOutlined />;\n    }\n  };\n\n  const removeSNPHandler = (val) => {\n    props.sequenceToStore(null);\n    props.hmmMatrixToStore(null);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Dragger\n          accept={\".fa, .fasta, .fna, .mfa\"}\n          showUploadList={false}\n          style={{\n            backgroundColor: \"transparent\",\n            height: \"500px\",\n          }}\n          name=\"file\"\n          multiple={false}\n          action=\"dummy-post\"\n          beforeUpload={beforeUploadHandler}\n        >\n          <div id=\"input-loader-snps\">\n            <Button\n              id=\"input-loader-button-snps\"\n              shape={\"round\"}\n              size={\"large\"}\n            >\n              {getIconStatus()} SNPs {\"  \"}\n              <span style={{ marginLeft: \"5px\" }}>\n                <Tooltip\n                  title=\"Input or drag and drop non-ambiguous multi-fasta SNPs alignment file here\"\n                  placement=\"rightTop\"\n                >\n                  <QuestionCircleOutlined\n                    style={{ fontSize: \"14px\", color: \"white\" }}\n                  />\n                </Tooltip>\n              </span>\n            </Button>\n          </div>\n        </Dragger>\n        <div className=\"remove-button-container\">\n          <Button\n            disabled={props.sequence ? false : true}\n            title={\"Remove loaded SNPs alignment\"}\n            type={\"ghost\"}\n            className=\"input-loader-remove-button \"\n            shape={\"circle\"}\n            size={\"small\"}\n            onClick={removeSNPHandler}\n          >\n            <DeleteOutlined />\n          </Button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    sequence: state.sequence,\n    patientMovement: state.patientMovement,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      sequenceToStore,\n      isinputLoadingToStore,\n      hmmMatrixToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputLoader);\n\n/*\nasync function readFastaToJSON(fastaString) {\n    if (props.sequence === null) {\n      //console.log(\"async\");\n      const sequenceJSON = await fastaToJson(fastaString);\n      const snpsSequence = [];\n      if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n        //console.log(sequenceJSON);\n        //check all error message, alert, and no seq to store\n        let isolateName = {};\n        let seqLen = [];\n        let noErr = true;\n        for (let index = 0; index < sequenceJSON.length; index++) {\n          let messages = sequenceJSON[index].messages;\n          let parsedSequence = sequenceJSON[index].parsedSequence;\n          let success = sequenceJSON[index].success;\n          //tracking size\n          if (seqLen.indexOf(parsedSequence.size) === -1) {\n            seqLen.push(parsedSequence.size);\n          }\n          //check success parsing\n          if (!success) {\n            noErr = false;\n            alert(\"Parsing error:\", parsedSequence.name);\n            break;\n          }\n          //check err messages\n          if (messages.length > 0) {\n            noErr = false;\n            alert(messages[0]);\n            break;\n          }\n          //check sequence length\n          if (seqLen.length > 1) {\n            noErr = false;\n            alert(\"Size error: Alignment required sequence with same length\");\n            break;\n          }\n          //check duplicated isolate\n          if (!isolateName[parsedSequence.name]) {\n            isolateName[parsedSequence.name] = true;\n          } else {\n            noErr = false;\n            alert(\"Sequence error: Duplicated sequence\");\n            break;\n          }\n          //making snpsSequence\n          if (noErr) {\n            snpsSequence.push({\n              id: parsedSequence.name,\n              size: parsedSequence.size,\n              sequence: parsedSequence.sequence.toLowerCase(),\n            });\n          }\n        }\n\n        if (noErr) {\n          //display success message\n          message.success(\n            \"The sequences have been loaded, now building distance matrix ..\",\n            1\n          );\n          setTimeout(() => {\n            const hammingMatrix = new HammingMatrix(\n              snpsSequence\n            ).getHammingMatrix();\n            message.success(\n              \"Pair-wise SNP distance matrix has been created\",\n              1\n            );\n            props.sequenceToStore(snpsSequence);\n            props.hmmMatrixToStore(hammingMatrix);\n            props.isinputLoadingToStore(false);\n          }, 100);\n\n          //load to store\n        }\n      } else {\n        alert(\"Error: Required at least 2 sequences\");\n      }\n    } else {\n      alert(\"Sequences have been loaded. Refresh to re-load a new one\");\n    }\n  }\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js",["309"],"import { Row, Col } from \"antd\";\nimport React from \"react\";\nimport \"./style_home.css\";\nconst TitleHeaderComponent = (props) => {\n  return (\n    <React.Fragment>\n      <Col sm={16} id=\"title-header-component\">\n        <p>\n          GraphSNP: Graph-based outbreak cluster and transmission detection and\n          visualization using single-nucleotide polymorphism (SNP) in web\n          browser\n        </p>\n      </Col>\n    </React.Fragment>\n  );\n};\n\nexport default TitleHeaderComponent;\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js",["310","311"],"import React from \"react\";\nimport { Button, Row, Col, Select, Divider, Tooltip } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport {\n  dist_changeDataToDisplay,\n  dist_changeDataColumn,\n  dist_changeDataColumnLevel,\n  dist_changeChartOrientation,\n  dist_changeExportFormat,\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n} from \"../action/snpdistSettingsActions\";\n\nimport { filterUnique } from \"../utils/utils\";\n\nconst { Option } = Select;\n\nconst SNPdistSettings = (props) => {\n  //GLOBAL\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //STATES\n\n  //SETTINGS\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const chartOrientation = props.snpDistSettings.chartOrientation;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n\n  //HANDLERS\n  const dataToDisplayHandler = (val) => {\n    props.dist_changeDataToDisplay(val);\n  };\n\n  const dataColumnHandler = (val) => {\n    props.dist_changeDataColumn(val);\n  };\n\n  const dataColumnLevelHandler = (val) => {\n    props.dist_changeDataColumnLevel(val);\n  };\n\n  const chartOrientationHandler = (val) => {\n    props.dist_changeChartOrientation(val);\n  };\n\n  const drawChartHandler = (val) => {\n    if (!isUserDrawChart) {\n      props.dist_changeIsUserDraw(true);\n    }\n  };\n\n  const exportFormatHandler = (val) => {\n    props.dist_changeExportFormat(val);\n  };\n\n  const exportChartHandler = (val) => {\n    console.log(\"downlaod handlers\");\n    if (!isUserExportSnpDist) {\n      props.dist_changeIsUserExport(true);\n    }\n  };\n  const getMetadataColumn = function (header, i) {\n    const excluded_headers = [\"sample_date\", \"patient_id\"];\n    if (excluded_headers.indexOf(header) === -1) {\n      return (\n        <Option key={i} disabled={false} value={header}>\n          {header}\n        </Option>\n      );\n    }\n  };\n\n  const getMetadataColumnLevels_arr = function (metadata_arr, dataColumn) {\n    if (metadata_arr && dataColumn) {\n      let dataColumnLevels_arr = metadata_arr\n        .map((d) => d[dataColumn])\n        .filter(filterUnique);\n\n      if (\n        Array.isArray(dataColumnLevels_arr) &&\n        dataColumnLevels_arr.length > 0\n      ) {\n        return dataColumnLevels_arr;\n      } else {\n        return [\"#na_exluded!\"];\n      }\n    } else {\n      return [\"#na_exluded!\"];\n    }\n  };\n\n  const getMetadataColumnLevel = function (level, idx) {\n    const excluded_headers = [\"#na_exluded!\"];\n    if (excluded_headers.indexOf(level) === -1) {\n      return (\n        <Option key={idx} disabled={false} value={level}>\n          {level}\n        </Option>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Row gutter={[8, 8]}>\n        <Col span={24}>\n          <h5>Bar chart settings</h5>\n          <p>\n            Select isolates{\" \"}\n            <span>\n              <Tooltip\n                title=\"Select group of isolates for bar chart visualization.\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            value={dataToDisplay}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={dataToDisplayHandler}\n          >\n            <Option value=\"all\">All isolates</Option>\n            <Option\n              disabled={props.metadata ? false : true}\n              value=\"per-category\"\n            >\n              Specific group (metadata)\n            </Option>\n          </Select>\n        </Col>\n\n        {dataToDisplay === \"per-category\" &&\n          props.hammingMatrix &&\n          props.metadata && (\n            <Col span={24}>\n              <p>\n                Select metadata column{\" \"}\n                <span>\n                  <Tooltip\n                    title=\"Column in metadata which group of isolates to be displayed\"\n                    placement=\"rightTop\"\n                  >\n                    <QuestionCircleOutlined style={{ color: \"red\" }} />\n                  </Tooltip>\n                </span>\n              </p>\n              <Select\n                value={dataColumn}\n                style={{ width: \"100%\" }}\n                disabled={\n                  dataToDisplay === \"per-category\" &&\n                  props.hammingMatrix &&\n                  props.metadata\n                    ? false\n                    : true\n                }\n                onChange={dataColumnHandler}\n              >\n                {props.colorLUT && Object.keys(props.colorLUT)\n                  ? Object.keys(props.colorLUT).map((k, i) => {\n                      return getMetadataColumn(k, i);\n                    })\n                  : [\"na\"].map((l, j) => {\n                      return (\n                        <Option key={j} disabled={false} value={l}>\n                          {l}\n                        </Option>\n                      );\n                    })}\n              </Select>\n            </Col>\n          )}\n\n        {dataToDisplay === \"per-category\" &&\n          dataColumn &&\n          props.metadata &&\n          metadata_arr && (\n            <Col span={24}>\n              <p>\n                Select group{\" \"}\n                <span>\n                  <Tooltip\n                    title=\"Categorical group from the selected metadata column\"\n                    placement=\"rightTop\"\n                  >\n                    <QuestionCircleOutlined style={{ color: \"red\" }} />\n                  </Tooltip>\n                </span>\n              </p>\n              <Select\n                value={dataColumnLevel}\n                style={{ width: \"100%\" }}\n                disabled={\n                  dataToDisplay !== \"all\" &&\n                  dataColumn &&\n                  props.metadata &&\n                  metadata_arr\n                    ? false\n                    : true\n                }\n                onChange={dataColumnLevelHandler}\n              >\n                {dataColumn && metadata_arr\n                  ? getMetadataColumnLevels_arr(metadata_arr, dataColumn).map(\n                      (e, x) => {\n                        return getMetadataColumnLevel(e, x);\n                      }\n                    )\n                  : [\"na\"].map((l, j) => {\n                      return (\n                        <Option key={j} disabled={false} value={l}>\n                          {l}\n                        </Option>\n                      );\n                    })}\n              </Select>\n            </Col>\n          )}\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammingMatrix ? false : true}\n            onClick={drawChartHandler}\n            type=\"primary\"\n          >\n            Create chart\n          </Button>\n        </Col>\n\n        <Divider style={{ margin: \"10px 0px 0px 0px\" }} />\n\n        <Col span={24}>\n          <h5>Download settings</h5>\n          <p>\n            Type{\" \"}\n            <span>\n              <Tooltip\n                title=\"Type of file to be downloaded: Table of pairwise SNP distances (CSV) or Displayed bar chart (SVG)\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            disabled={props.hammingMatrix ? false : true}\n            value={snpDistExportFormat}\n            onChange={exportFormatHandler}\n            style={{ width: \"100%\" }}\n          >\n            <Option\n              disabled={props.hammingMatrix ? false : true}\n              value=\"symSnpDist\"\n            >\n              Table of pairwise SNP distances (CSV)\n            </Option>\n            <Option value=\"barChartSvg\">Bar chart (SVG)</Option>\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammingMatrix ? false : true}\n            onClick={exportChartHandler}\n            type=\"primary\"\n          >\n            Download\n          </Button>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    colorLUT: state.colorLUT,\n    metadata: state.metadata,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeDataToDisplay,\n      dist_changeDataColumn,\n      dist_changeDataColumnLevel,\n      dist_changeChartOrientation,\n      dist_changeExportFormat,\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistSettings);\n\n/*\n<Col span={24}>\n          <p>Chart(s) orientation</p>\n          <Select\n            value={chartOrientation}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={chartOrientationHandler}\n          >\n            <Option value=\"horizontal\">Horizontal</Option>\n            <Option value=\"vertical\">Vertical</Option>\n          </Select>\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js",["312","313","314","315","316","317","318","319"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Row, Col, Empty, Button } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport \"./style_snpDist.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n  dist_changeIsUserLoadSession,\n  dist_changeChartSession,\n} from \"../action/snpdistSettingsActions\";\nimport * as d3Select from \"d3-selection\";\n//import useResizeObserver from \"../hooks/hook_resizeObserver\"; //Broken\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport { vh, vw, downloadSVG } from \"../utils/utils\";\nimport { createBarPlot_all, recreateChart } from \"./chart_barplot_all\";\nimport { createSNPdistCSVFile } from \"../utils/create_exportFile\";\n\nconst _ = require(\"lodash\");\n\nconst SNPdistViewer = (props) => {\n  //Ref\n  const chartContainerRef = useRef();\n  const snpdistSVGRef = useRef();\n\n  //Drawing constructor\n  const dim_w = vw(100) - 200 - 20; //200 is sider width, 20 is just a nice margin\n  const dim_h = vh(100) - 120 - 20;\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\n  const chartArea_width = dim_w - margin.left - margin.right;\n  const chartArea_height = dim_h - margin.top - margin.bottom;\n\n  //States\n  //state\n  const [chartIsDisplayed, setChartIsDisplayed] = useState(false);\n\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //Settings\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const chartOrientation = props.snpDistSettings.chartOrientation;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n  const prevSessionData = props.snpDistSettings.chartSession;\n  const isUserReloadSession = props.snpDistSettings.isUserReloadSession;\n\n  //Automatic reload if we have previous session\n  if (prevSessionData) {\n    setTimeout(() => {\n      redraw();\n      setChartIsDisplayed(true);\n    }, 10);\n  }\n\n  //UseEffect\n  useEffect(() => {\n    if (isUserDrawChart) {\n      setTimeout(() => {\n        draw();\n        setChartIsDisplayed(true);\n        props.dist_changeIsUserDraw(false);\n      }, 10);\n    }\n  }, [isUserDrawChart]);\n\n  useEffect(() => {\n    if (isUserReloadSession) {\n      setTimeout(() => {\n        redraw();\n        setChartIsDisplayed(true);\n        props.dist_changeIsUserLoadSession(false);\n      }, 10);\n    }\n  }, [isUserReloadSession]);\n\n  useEffect(() => {\n    if (isUserExportSnpDist) {\n      switch (snpDistExportFormat) {\n        case \"symSnpDist\":\n          //prepare data\n          let edgeList = [];\n          let nodeList = [];\n          props.hammingMatrix.forEach((v, k) => {\n            nodeList.push(k);\n            edgeList = edgeList.concat(v);\n          });\n          let snp_dist = new GraphEdgeList(\n            nodeList,\n            edgeList\n          ).getSymetricEdges().edges;\n          createSNPdistCSVFile(snp_dist);\n          props.dist_changeIsUserExport(false);\n          break;\n\n        case \"barChartSvg\":\n          downloadSVG(\"snpdist-chart-svg\");\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [snpDistExportFormat, isUserExportSnpDist]);\n\n  //Functions\n  const reloadChartHandler = (val) => {\n    if (!isUserReloadSession) {\n      props.dist_changeIsUserLoadSession(true);\n    }\n  };\n\n  function getIsolatesByDataColumnAndLevel(meta_arr, dataCol, dataColLevel) {\n    let filteredRec = meta_arr.filter((rec) => {\n      if (rec[dataCol] === dataColLevel) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    let res = filteredRec.map((d) => d.sample_id);\n    return res;\n  }\n\n  //DRAWING\n  function draw() {\n    // console.log(\"draw\", +new Date());\n    //clean previous drawing artifacts\n    d3Select.select(\"#snpdist_svgGroup\").remove();\n\n    //prepare data\n    let edgeList = [];\n    let nodeList = [];\n\n    // console.log(\"edgeList_construction\", +new Date());\n\n    props.hammingMatrix.forEach((v, k) => {\n      nodeList.push(k);\n      edgeList = edgeList.concat(v);\n    });\n\n    // console.log(\"chart_data_construction\", +new Date());\n    let chart_data = new GraphEdgeList(nodeList, edgeList).getSymetricEdges()\n      .edges;\n\n    if (dataToDisplay === \"all\") {\n      // console.log(\"data_list_construction\", +new Date());\n      let data_list = chart_data.map((d) => d.value);\n\n      const svg = d3Select.select(snpdistSVGRef.current);\n      createBarPlot_all(\n        svg,\n        data_list,\n        chartArea_width,\n        chartArea_height,\n        margin,\n        props.dist_changeChartSession\n      );\n    } else {\n      //get column header and level\n      if (metadata_arr && dataColumn && dataColumnLevel) {\n        let includedIsolates = getIsolatesByDataColumnAndLevel(\n          metadata_arr,\n          dataColumn,\n          dataColumnLevel\n        );\n        let filtered_chart_data = chart_data.filter((d) => {\n          if (\n            includedIsolates.indexOf(d.source) !== -1 &&\n            includedIsolates.indexOf(d.target) !== -1\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        let data_list = filtered_chart_data.map((d) => d.value);\n        const svg = d3Select.select(snpdistSVGRef.current);\n        createBarPlot_all(\n          svg,\n          data_list,\n          chartArea_width,\n          chartArea_height,\n          margin,\n          props.dist_changeChartSession\n        );\n      }\n    }\n\n    //set svg attributes\n\n    // if (dataToDisplay === \"all\") {\n    //   // draw a violin + jitter + boxplot for all, color coded by selected column\n    // } else {\n    //   //draw charts based on factors from the column\n    // }\n  }\n\n  //RE-DRAWING\n  function redraw() {\n    // console.log(\"draw\", +new Date());\n    //clean previous drawing artifacts\n    d3Select.select(\"#snpdist_svgGroup\").remove();\n    const svg = d3Select.select(snpdistSVGRef.current);\n    recreateChart(svg, prevSessionData);\n  }\n\n  return (\n    <Row>\n      <Col span={24}>\n        <div id=\"bar-chart-cont-is-empty\" style={{ display: \"block\" }}>\n          <Empty\n            style={{ display: chartIsDisplayed ? \"none\" : \"block\" }}\n            description={\n              prevSessionData\n                ? \"Reload previous chart\"\n                : \"No chart, create one \"\n            }\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          ></Empty>\n        </div>\n      </Col>\n      <Col ref={chartContainerRef} sm={24}>\n        <div\n          id=\"snpdist-chart-container\"\n          style={{ height: \"100%\", width: \"100%\" }}\n        >\n          <svg id=\"snpdist-chart-svg\" ref={snpdistSVGRef}></svg>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    metadata: state.metadata,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n      dist_changeChartSession,\n      dist_changeIsUserLoadSession,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistViewer);\n\n/*\n<Button onClick={reloadChartHandler} type=\"primary\">\n              Reload\n            </Button>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js",["320","321"],"import React from \"react\";\nimport { Layout, Row, Col, Empty } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport \"./style_snpDist.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport SNPdistSettings from \"./comp_snpDist_settings\";\nimport SNPdistViewer from \"./comp_snpDist_viewer\";\n\nconst { Sider, Content } = Layout;\n\nconst SNPdistance = (props) => {\n  return (\n    <React.Fragment>\n      <Layout>\n        <Sider id=\"snpdist-sider\">\n          <SNPdistSettings />\n        </Sider>\n        <Layout>\n          <Content>{props.hammingMatrix && <SNPdistViewer />}</Content>\n          <Content>\n            {!props.hammingMatrix && (\n              <Col span={24}>\n                <div id=\"bar-chart-cont-is-empty\" style={{ display: \"block\" }}>\n                  <Empty\n                    description={\"No SNPs alignment input: Please load one.\"}\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                  />\n                </div>\n              </Col>\n            )}\n          </Content>\n        </Layout>\n      </Layout>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    hammingMatrix: state.hammMatrix,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistance);\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js",["322","323"],"//========================================== SMSO ================================================\n/*\nCreate a directed graph object that edges represent transmissions\nDirected edges was created only if pair-wise of isolates has transmission signal\nTransmission signal were if transmission score >= 1, created by check patient stay overlap hiearchiely\n\n*/\n\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport StayList from \"../model/stayList_prop\";\nimport {\n  getHighestLocation,\n  filterInverseSymEdges,\n  getOverlapLocationLevel,\n} from \"../utils/utils\";\n\nconst moment = extendMoment(Moment);\nconst _ = require(\"lodash\");\n\nexport function createSMSO(\n  rawMatrix,\n  edgeCutoff,\n  rawPatientMovementData,\n  metadata,\n  trans_locLevel\n) {\n  //Assumed the input is true\n  //Take an adjacency matrix of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge <= cut-off\n  let mat = _.cloneDeep(rawMatrix);\n  let patientMovementData = _.cloneDeep(rawPatientMovementData);\n  let edgeList = [];\n  let nodeList = [];\n  mat.forEach((val, key) => {\n    nodeList.push(key);\n    let sortedRow = val;\n\n    //Filter by cut-off\n    if (edgeCutoff !== null && edgeCutoff > 0) {\n      sortedRow = sortedRow.filter((e) => {\n        return e.value <= edgeCutoff;\n      });\n    }\n\n    //merge\n    edgeList = edgeList.concat(sortedRow);\n  });\n\n  //Asses transmission signal on each edge\n  let directedEdges = [];\n  let undirectedEdges = [];\n  if (edgeList.length > 0) {\n    for (let i = 0; i < edgeList.length; i++) {\n      let e = edgeList[i];\n      //get pid\n      let p1_id = metadata.get(e.source).patient_id;\n      let p2_id = metadata.get(e.target).patient_id;\n\n      let p1_sampleDate = moment(metadata.get(e.source).sample_date);\n      let p2_sampleDate = moment(metadata.get(e.target).sample_date);\n\n      //get the stays\n      let p1_stays = patientMovementData.get(p1_id)\n        ? new StayList(patientMovementData.get(p1_id))\n        : null;\n\n      let p2_stays = patientMovementData.get(p2_id)\n        ? new StayList(patientMovementData.get(p2_id))\n        : null;\n\n      //console.log(p1_id, p1_stays_obj instanceof StayList);\n      //console.log(p1_id, p1_stays_obj);\n\n      //if we have stays data for both isolates, do, else return 0 and break\n      //console.log(p1_id, p1_stays);\n      if (\n        p1_stays instanceof StayList &&\n        p2_stays instanceof StayList &&\n        Array.isArray(p1_stays.stays) &&\n        Array.isArray(p2_stays.stays) &&\n        p1_stays.stays.length > 0 &&\n        p2_stays.stays.length > 0\n      ) {\n        //which location level do these patients shared? hospital=1? ward=2? bay=3? bed=4?\n        //console.log(p1_stays_obj);\n        //console.log(p1_stays_obj.getLocationLevel());\n        let p1_locLevel = p1_stays.getLocationLevel();\n        let p2_locLevel = p2_stays.getLocationLevel();\n        let common_locLevel = Math.min(p1_locLevel, p2_locLevel)\n          ? Math.min(p1_locLevel, p2_locLevel)\n          : null;\n\n        //console.log(common_locLevel, p1_locLevel, p2_locLevel);\n\n        //if they dont shared any location, not even hospital, return e as undirected with score = 1 (genomic only)\n        if (!common_locLevel) {\n          e[\"dir\"] = \"none\";\n          e.value = 1;\n          undirectedEdges.push(e);\n        } else {\n          //if they share location, at least hospital\n          //check whether that had any overlap admission\n          let p1_rangeOfStay = p1_stays.getRangeOfStays();\n          let p2_rangeOfStay = p2_stays.getRangeOfStays();\n\n          let p1_range = moment.range(\n            p1_rangeOfStay.start_date.startOf(\"day\"),\n            p1_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let p2_range = moment.range(\n            p2_rangeOfStay.start_date.startOf(\"day\"),\n            p2_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let is_p1_p2_overlap = p1_range.overlaps(p2_range);\n          if (is_p1_p2_overlap) {\n            //they do have overlap\n            //compare the highest common level of location (common_locLevel) for both patients\n\n            if (p2_sampleDate.isAfter(p1_sampleDate, \"day\")) {\n              let transmissionScore = calculateTransScore(\n                p1_id,\n                p2_id,\n                p1_stays,\n                p2_stays,\n                common_locLevel\n              );\n              e[\"dir\"] = \"forward\";\n              e.value = 1 + transmissionScore;\n              directedEdges.push(e);\n            } else {\n              e[\"dir\"] = \"none\";\n              e.value = 1;\n              undirectedEdges.push(e);\n            }\n          } else {\n            //they dont have any overlap\n            e[\"dir\"] = \"none\";\n            e.value = 1;\n            undirectedEdges.push(e);\n          }\n        }\n      } else {\n        e[\"dir\"] = \"none\";\n        e.value = 1;\n        undirectedEdges.push(e);\n      }\n    }\n  }\n\n  //let clean_undirectedEdges = filterInverseSymEdges(undirectedEdges);\n  //merge edges\n\n  directedEdges = directedEdges.filter((e) => {\n    return e.value >= trans_locLevel;\n  });\n\n  //SCORING: 1: snps only, 2: snps+hospital, 3: snps+ ward, 4: snps+bay, 5: snps+bed\n\n  //return nodes and edges with direction property\n  //[edgeList[0]]\n\n  return { nodes: nodeList, edges: directedEdges };\n}\n\nfunction calculateTransScore(p1, p2, p1_stays, p2_stays, common_locLevel) {\n  let scoreOverlap = 0;\n\n  //filter stays to only to the level of both patients shared location\n  let p1_stays_common = p1_stays.stays.filter((s) => {\n    return getHighestLocation(s) === common_locLevel;\n  });\n  let p2_stays_common = p2_stays.stays.filter((st) => {\n    return getHighestLocation(st) === common_locLevel;\n  });\n\n  //console.log(p1_stays_common, p2_stays_common);\n\n  //at the level of\n\n  //compared each stays, get the least common location level, save to store, if we found bigger score, update\n  for (let i = 0; i < p1_stays_common.length; i++) {\n    let p1_stay = p1_stays_common[i];\n    let p1_stay_range = moment.range(\n      p1_stay.start_date.startOf(\"day\"),\n      p1_stay.end_date.endOf(\"day\")\n    );\n\n    for (let j = 0; j < p2_stays_common.length; j++) {\n      let p2_stay = p2_stays_common[j];\n      let p2_stay_range = moment.range(\n        p2_stay.start_date.startOf(\"day\"),\n        p2_stay.end_date.endOf(\"day\")\n      );\n\n      let is_stays_overlap = p1_stay_range.overlaps(p2_stay_range);\n\n      if (is_stays_overlap) {\n        let overlapDur = p1_stay_range.intersect(p2_stay_range).diff(\"days\");\n\n        if (overlapDur <= 7) {\n          //need to find, at which location level they were overlap\n          //check the deepest one\n\n          let loc_comm_score = getOverlapLocationLevel(p1_stay, p2_stay);\n\n          if (p1 === \"P-13\" && p2 === \"P-18\") {\n            //console.log(\"???\", is_stays_overlap);\n            //console.log(\"+++\", overlapDur, \"days\");\n            // console.log(loc_comm_score);\n            // console.log(\n            //   \"p1\",\n            //   p1_stay.hospital_id,\n            //   p1_stay.ward_id,\n            //   p1_stay.bay_id,\n            //   p1_stay.bed_id\n            // );\n            // console.log(\n            //   \"p2\",\n            //   p2_stay.hospital_id,\n            //   p2_stay.ward_id,\n            //   p2_stay.bay_id,\n            //   p2_stay.bed_id\n            // );\n          }\n          if (loc_comm_score > scoreOverlap) {\n            scoreOverlap = loc_comm_score;\n          }\n        }\n      }\n    }\n  }\n  return scoreOverlap;\n  //SCORING: 1: hospital, 2: ward, 3: bay, 4: bed\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js",["324","325","326","327","328"],"import * as d3Scale from \"d3-scale\";\nimport * as d3Array from \"d3-array\";\nimport * as d3Axis from \"d3-axis\";\n\nexport function createBarPlot_all(\n  svg,\n  chart_data,\n  w,\n  h,\n  margin,\n  chartSessionToStore\n) {\n  //console.log(\"create plot\", +new Date());\n  let data_len = chart_data.length;\n  let data_min = parseFloat(d3Array.min(chart_data)).toFixed(0);\n  let data_max = parseFloat(d3Array.max(chart_data)).toFixed(0);\n  let data_q1 = parseFloat(d3Array.quantile(chart_data, 0.25)).toFixed(1);\n  let data_q3 = parseFloat(d3Array.quantile(chart_data, 0.75)).toFixed(1);\n  let data_median = parseFloat(d3Array.median(chart_data)).toFixed(1);\n  let data_mean = parseFloat(d3Array.mean(chart_data)).toFixed(1);\n\n  //layout\n  const margin_stats = 30;\n  const cont_bar_w = w;\n  const cont_bar_h = h - margin_stats;\n\n  // ++++++++++++++ BAR +++++++++++++\n  //prepare data\n  //console.log(\"prepare data\", +new Date());\n  const barMap = d3Array.rollup(\n    chart_data,\n    (v) => v.length,\n    (d) => d\n  );\n  const barData = Array.from(barMap.entries()); //[{0: isKey, 1: isValue}]\n  const barSNP_dist = Array.from(barMap.keys());\n  const barSNP_freq = Array.from(barMap.values());\n\n  //scales\n  const bar_linear_scale_v = d3Scale.scaleLinear().range([cont_bar_h, 0]);\n  const bar_band_scale_h = d3Scale.scaleBand().range([0, cont_bar_w]);\n  const bar_bandWidth =\n    cont_bar_w / (d3Array.range(0, d3Array.max(barSNP_dist)).length + 1);\n\n  //create scale\n  let bar_linear_scale_x = bar_linear_scale_v;\n  bar_linear_scale_x.domain([0, d3Array.max(barSNP_freq)]);\n\n  let bar_band_scale_y = bar_band_scale_h;\n  bar_band_scale_y.domain(d3Array.range(0, d3Array.max(barSNP_dist) + 1));\n\n  // create axis\n  //axis\n  const bar_axis_x = d3Axis.axisLeft().scale(bar_linear_scale_x);\n\n  const bar_axis_y = d3Axis\n    .axisBottom()\n    .scale(bar_band_scale_y)\n    .tickValues(\n      bar_band_scale_y.domain().filter(function (d, i) {\n        return !(i % 10);\n      })\n    );\n\n  //DRAWING\n  //set svg dimension\n  //console.log(\"drawing\", +new Date());\n  svg\n    .attr(\"width\", w + margin.left + margin.right)\n    .attr(\"height\", h + margin.top + margin.bottom);\n  //make group root of svg for transformation purpose\n  let svgGroup = svg\n    .append(\"g\")\n    .attr(\"id\", \"snpdist_svgGroup\")\n    .attr(\n      \"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\"\n    );\n\n  // ========= Statistics text ==========\n  let stats_text = [\n    \"Pairwise distances (n:\",\n    data_len,\n    \"), Min: \",\n    data_min,\n    \", Q1:\",\n    data_q1,\n    \", Mean:\",\n    data_mean,\n    \", Median:\",\n    data_median,\n    \", Q3:\",\n    data_q3,\n    \", Max:\",\n    data_max,\n  ].join(\"\");\n\n  let barchart_stats_g = svgGroup.append(\"g\").attr(\"id\", \"barchart-stats-g\");\n  barchart_stats_g\n    .append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"y\", margin_stats / 2)\n    .text(stats_text);\n\n  // ========= BAR ==========\n  let barchart_g = svgGroup\n    .append(\"g\")\n    .attr(\"id\", \"barchart-g\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + margin_stats + \")scale(1)\");\n\n  //barchart horizontal axis\n  let h_axis_g = barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-y\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + cont_bar_h + \")scale(1)\")\n    .call(bar_axis_y);\n  //h axis label\n  h_axis_g\n    .append(\"text\")\n    .attr(\"class\", \"h_axis_label\")\n    .attr(\"text-anchor\", \"end\")\n    .attr(\"x\", 6)\n    .attr(\"y\", 6)\n    .text(\"income per capita, inflation-adjusted (dollars)\");\n\n  //h axis label\n  let h_axis_label_g = barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"h-axis-label-g\")\n    .attr(\n      \"transform\",\n      \"translate(\" + cont_bar_w / 2 + \",\" + cont_bar_h + \")scale(1)\"\n    );\n  h_axis_label_g\n    .append(\"text\")\n    .attr(\"id\", \"h-axis-label\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Pairwise SNP distance\");\n\n  //barchart vertical axis\n  barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-x\")\n    .attr(\"transform\", \"translate(\" + -5 + \",\" + 0 + \")scale(1)\")\n    .call(bar_axis_x);\n\n  //v axis label\n  let v_axis_label_g = barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"v-axis-label-g\")\n    .attr(\n      \"transform\",\n      \"translate(\" + -5 + \",\" + cont_bar_h / 2 + \")scale(1) rotate(-90)\"\n    );\n  v_axis_label_g\n    .append(\"text\")\n    .attr(\"id\", \"v-axis-label\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Frequency\");\n\n  //add bar chart\n  let bar_g = barchart_g.append(\"g\").attr(\"id\", \"bar-group\");\n  bar_g\n    .selectAll(\".barchart-bar\")\n    .data(barData)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"barchart-bar\")\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"fill\", \"gray\")\n    .attr(\"x\", function (d) {\n      let res = bar_band_scale_y(d[0]);\n      return res;\n    })\n    .attr(\"y\", function (d) {\n      let res = bar_linear_scale_x(d[1]);\n      return res;\n    })\n    .attr(\"width\", function (d) {\n      let res = bar_bandWidth;\n      return res;\n    })\n    .attr(\"height\", function (d) {\n      let res = Math.abs(bar_linear_scale_x(d[1]) - bar_linear_scale_x(0));\n      return res;\n    });\n  //console.log(\"finish\", +new Date());\n  //save this session to store\n  let thisSessionData = {\n    w,\n    h,\n    margin,\n    data_len,\n    data_min,\n    data_max,\n    data_q1,\n    data_q3,\n    data_median,\n    data_mean,\n    margin_stats,\n    cont_bar_w,\n    cont_bar_h,\n    barMap,\n    barData,\n    barSNP_dist,\n    barSNP_freq,\n    bar_linear_scale_v,\n    bar_band_scale_h,\n    bar_bandWidth,\n    bar_linear_scale_x,\n    bar_band_scale_y,\n    bar_axis_x,\n    bar_axis_y,\n  };\n  chartSessionToStore(thisSessionData);\n}\n\nexport function recreateChart(svg, prevSessionData) {\n  //Data we need:\n  //console.log(\"create plot\", +new Date());\n  let w = prevSessionData.w;\n  let h = prevSessionData.h;\n  let margin = prevSessionData.margin;\n  let data_len = prevSessionData.data_len;\n  let data_min = prevSessionData.data_min;\n  let data_max = prevSessionData.data_max;\n  let data_q1 = prevSessionData.data_q1;\n  let data_q3 = prevSessionData.data_q3;\n  let data_median = prevSessionData.data_median;\n  let data_mean = prevSessionData.data_mean;\n\n  //layout\n  const margin_stats = prevSessionData.margin_stats;\n  const cont_bar_w = prevSessionData.cont_bar_w;\n  const cont_bar_h = prevSessionData.cont_bar_h;\n\n  // ++++++++++++++ BAR +++++++++++++\n  //prepare data\n  //console.log(\"prepare data\", +new Date());\n  const barMap = prevSessionData.barMap;\n  const barData = prevSessionData.barData;\n  const barSNP_dist = prevSessionData.barSNP_dist;\n  const barSNP_freq = prevSessionData.barSNP_freq;\n\n  //scales\n  const bar_linear_scale_v = prevSessionData.bar_linear_scale_v;\n  const bar_band_scale_h = prevSessionData.bar_band_scale_h;\n  const bar_bandWidth = prevSessionData.bar_bandWidth;\n\n  //create scale\n  let bar_linear_scale_x = prevSessionData.bar_linear_scale_x;\n  let bar_band_scale_y = prevSessionData.bar_band_scale_y;\n\n  // create axis\n  //axis\n  const bar_axis_x = prevSessionData.bar_axis_x;\n  const bar_axis_y = prevSessionData.bar_axis_y;\n\n  //JUST DRAWING\n  //set svg dimension\n  //console.log(\"drawing\", +new Date());\n  svg\n    .attr(\"width\", w + margin.left + margin.right)\n    .attr(\"height\", h + margin.top + margin.bottom);\n  //make group root of svg for transformation purpose\n  let svgGroup = svg\n    .append(\"g\")\n    .attr(\"id\", \"snpdist_svgGroup\")\n    .attr(\n      \"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\"\n    );\n\n  // ========= Statistics text ==========\n  let stats_text = [\n    \"Pairwise distances (n:\",\n    data_len,\n    \"), Min: \",\n    data_min,\n    \", Q1:\",\n    data_q1,\n    \", Mean:\",\n    data_mean,\n    \", Median:\",\n    data_median,\n    \", Q3:\",\n    data_q3,\n    \", Max:\",\n    data_max,\n  ].join(\"\");\n\n  let barchart_stats_g = svgGroup.append(\"g\").attr(\"id\", \"barchart-stats-g\");\n  barchart_stats_g\n    .append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"y\", margin_stats / 2)\n    .text(stats_text);\n\n  // ========= BAR ==========\n  let barchart_g = svgGroup\n    .append(\"g\")\n    .attr(\"id\", \"barchart-g\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + margin_stats + \")scale(1)\");\n\n  //barchart horizontal axis\n  barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-y\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + cont_bar_h + \")scale(1)\")\n    .call(bar_axis_y);\n\n  //h axis label\n  let h_axis_label_g = barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"h-axis-label-g\")\n    .attr(\n      \"transform\",\n      \"translate(\" + cont_bar_w / 2 + \",\" + cont_bar_h + \")scale(1)\"\n    );\n  h_axis_label_g\n    .append(\"text\")\n    .attr(\"id\", \"h-axis-label\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Pairwise SNP distance\");\n\n  //barchart vertical axis\n  barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-x\")\n    .attr(\"transform\", \"translate(\" + -5 + \",\" + 0 + \")scale(1) \")\n    .call(bar_axis_x);\n\n  //v axis label\n  let v_axis_label_g = barchart_g\n    .append(\"g\")\n    .attr(\"id\", \"v-axis-label-g\")\n    .attr(\n      \"transform\",\n      \"translate(\" + -5 + \",\" + cont_bar_h / 2 + \")scale(1) rotate(-90)\"\n    );\n  v_axis_label_g\n    .append(\"text\")\n    .attr(\"id\", \"v-axis-label\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Frequency\");\n\n  //add bar chart\n  let bar_g = barchart_g.append(\"g\").attr(\"id\", \"bar-group\");\n  bar_g\n    .selectAll(\".barchart-bar\")\n    .data(barData)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"barchart-bar\")\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"fill\", \"gray\")\n    .attr(\"x\", function (d) {\n      let res = bar_band_scale_y(d[0]);\n      return res;\n    })\n    .attr(\"y\", function (d) {\n      let res = bar_linear_scale_x(d[1]);\n      return res;\n    })\n    .attr(\"width\", function (d) {\n      let res = bar_bandWidth;\n      return res;\n    })\n    .attr(\"height\", function (d) {\n      let res = Math.abs(bar_linear_scale_x(d[1]) - bar_linear_scale_x(0));\n      return res;\n    });\n  //console.log(\"finish\", +new Date());\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js",["329"],"//========================================== SeqTrack ================================================\n/* Adapted from SeqTrack algorithm implemented in:\n- paper\n*/\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\n\nconst _ = require(\"lodash\");\nconst moment = extendMoment(Moment);\nvar dbinom = require(\"@stdlib/stats-base-dists-binomial-pmf\");\n\nexport function createSeqTrack(\n  rawMatrix,\n  metadataMap,\n  snpSeq_len,\n  mut_rate = null\n) {\n  let hammingDistMat = _.cloneDeep(rawMatrix);\n  //list of case\n  let cases = []; //list of case object [ {id: caseID, date: caseDate}, ...  ]\n  metadataMap.forEach((val, key) => {\n    cases.push({ id: key, date: val.sample_date });\n  });\n  // console.log(\"cases:\", cases);\n\n  //error check\n  let paramsError = false;\n  //check for consistency of id between sequence and metadata\n  for (let i = 0; i < cases.length; i++) {\n    let aCase = cases[i];\n    let caseInAlignment = hammingDistMat.has(aCase.id);\n    if (!caseInAlignment) {\n      paramsError = true;\n      alert(\n        \"Case id in metadata is not consistent with taxa id in alignment:\" +\n          aCase.id\n      );\n      break;\n    }\n  }\n  //other check\n\n  //Fun 4: Running selAmongAncestors\n  function selAmongAncestors(\n    aCase,\n    ancesWithLowestSNPdist,\n    snpLen = snpSeq_len,\n    mu = mut_rate,\n    metadata = metadataMap\n  ) {\n    //if proximity matrix is available do here:\n    //but not now, because we dont have one in graphsnp\n\n    if (ancesWithLowestSNPdist.length > 1) {\n      let ancesWithLowestSNPdist_wDate = ancesWithLowestSNPdist\n        .map((d) => {\n          d[\"date\"] = moment(metadata.get(d.id).sample_date);\n          return d;\n        })\n        .sort((a, b) => a.date > b.date);\n\n      // if mutation rate not available, choose the oldest one\n\n      if (!mut_rate || !snpLen) {\n        let oldestAnces = ancesWithLowestSNPdist_wDate[0];\n        return { ances: oldestAnces.id, snpDist: oldestAnces.snpDist };\n      } else {\n        console.log(\"with mutation\");\n        let case_date = moment(aCase.date);\n        let ancesWithLowestSNPdist_wDayDiff = ancesWithLowestSNPdist_wDate.map(\n          (a) => {\n            let timeDiff = case_date.diff(a.date, \"days\");\n            let prob = dbinom(a.snpDist, timeDiff * snpLen, mu);\n            a[\"dayDiff\"] = timeDiff;\n            a[\"probability\"] = prob;\n            return a;\n          }\n        );\n        let sorted_ancesWithLowestSNPdist_wDayDiff =\n          ancesWithLowestSNPdist_wDayDiff.sort(\n            (a, b) => a.probability < b.probability\n          );\n        let mostProbableAnces = sorted_ancesWithLowestSNPdist_wDayDiff[0];\n        // improvement: if there are two equaly most probable ances, return all.\n        return {\n          ances: mostProbableAnces.id,\n          snpDist: mostProbableAnces.snpDist,\n        };\n      }\n    }\n  }\n\n  //Fun 3: Get snp distances between case to its ances candidates, then select the lowest\n  function compareAncesSNPdist(aCase, ancesCanditates, hammingDistMat) {\n    let snpDistAnces = [];\n    for (let i = 0; i < ancesCanditates.length; i++) {\n      const ancesCandId = ancesCanditates[i].id;\n      // edgesOfAnces is a list of object paired (both dir)\n      let edgesOfAnces = hammingDistMat.get(ancesCandId).filter((d) => {\n        if (d.target === aCase.id) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      snpDistAnces.push({ id: ancesCandId, snpDist: edgesOfAnces[0].value });\n    }\n\n    snpDistAnces.sort((a, b) => a.snpDist - b.snpDist);\n    // console.log(\"snpDistAnces\", snpDistAnces);\n    //which ances has the lowest SNP dist?\n    let lowestSNPdistAnces = snpDistAnces.filter((e) => {\n      if (e.snpDist === snpDistAnces[0].snpDist) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // console.log(\"lowestSNPdistAnces\", lowestSNPdistAnces);\n    return lowestSNPdistAnces;\n  }\n\n  //Fun 2: Running and calling selAmongAncestors\n  function findAncestor(aCase, cases, hammingDistMat) {\n    //Search and return 1 best ancestor for a caseID, from the list of available cases\n    //+based on case's collection date, and (if available) mutation rate and haplo length\n    //+(length of snp sites)\n    let bestAncestor = { ances: null, snpDist: null };\n    //1. Find ancestor candidates: other case(s) which collected before this caseId\n    let candid = cases.filter((c) => {\n      if (c.date < aCase.date) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    //2. Check whether this case have ancestor(s) or not. If no its the index case (ancestor = 'NA')\n    //+ if has multiple canditates, run selAmongAncestors to choose 1 most likely candidate\n\n    // if it is index case, set ances to NA, return bestAnces\n    if (candid.length === 0) {\n      bestAncestor.ances = \"NA\";\n      bestAncestor.snpDist = \"NA\";\n      // console.log(\"index case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // if it is the second case (only have 1 candidate). set ances to identified ances, return bestAnces\n    else if (candid.length === 1) {\n      bestAncestor.ances = candid[0].id;\n      let candidHamDist = hammingDistMat.get(candid[0].id).filter((d) => {\n        let cond = d.target === aCase.id ? true : false;\n        return cond;\n      });\n      bestAncestor.snpDist = candidHamDist[0].value;\n      // console.log(\"second case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // any other cases (multiple candidates were found)\n    else {\n      //filter candidates based on their snp distance, get candidate(s) with the least snpDist\n      let ancesWithLowestSNPdist = compareAncesSNPdist(\n        aCase,\n        candid,\n        hammingDistMat\n      ); //return a list of ances(s) [{}, {}]\n\n      //check if ancesWithLowestSNPdist is more than 1\n      if (ancesWithLowestSNPdist.length > 1) {\n        let selectedAnces = selAmongAncestors(aCase, ancesWithLowestSNPdist);\n        bestAncestor.ances = selectedAnces.ances;\n        bestAncestor.snpDist = selectedAnces.snpDist;\n        return bestAncestor;\n      } else {\n        //ancesWithLowestSNPdist is a list of one object [{ances: 'ancesID', snpDist: number}]\n        bestAncestor.ances = ancesWithLowestSNPdist[0].id;\n        bestAncestor.snpDist = ancesWithLowestSNPdist[0].snpDist;\n        return bestAncestor;\n      }\n    }\n  }\n\n  // PERFORM THIS FUN IF ALL REQUIREMENTS ARE MET\n  if (!paramsError) {\n    //initial result\n    let res = new Map();\n    for (let index = 0; index < cases.length; index++) {\n      const thisCase = cases[index];\n      //Fun 1: calling findAncestor function\n      let ancestor = findAncestor(thisCase, cases, hammingDistMat); //must return one best ancestor object for this caseId {ances: sample_id, snpDist= null}\n      //set the ancestor of this case to the result map\n      res.set(thisCase.id, ancestor);\n    }\n\n    //create a final graph object from the res map object\n    let final_graph = { nodes: [], edges: [] };\n    res.forEach((v, k) => {\n      final_graph.nodes.push(k);\n      if (v.ances !== \"NA\") {\n        final_graph.edges.push({\n          source: v.ances,\n          target: k,\n          value: v.snpDist,\n          dir: \"forward\",\n        });\n      }\n    });\n    //final_graph.nodes.push(\"NA\");\n\n    //return final graph\n\n    return final_graph;\n  } else {\n    let final_graph = { nodes: null, edges: null };\n    return final_graph;\n  }\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js",["330"],"import React from \"react\";\nimport { Typography, Divider, Button } from \"antd\";\nimport * as constant from \"../utils/constants\";\nimport \"./style_documentation.css\";\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst InputFiles = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"graphsnp-docs-content\">\n        <Title level={2} underline>\n          {\" \"}\n          Input file(s){\" \"}\n        </Title>\n        <Title level={3}>A multi-fasta SNPs alignment</Title>\n        <Text>SNPs alignment</Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.snps}>\n          Download SNPs example file\n        </Button>\n        <br />\n        <br />\n\n        <Title level={3}>Metadata table</Title>\n        <Text>The metadata contains</Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.metadata}>\n          Download metadata example file\n        </Button>\n        <br />\n        <br />\n\n        <Title level={3}>Patient stay timeline table </Title>\n        <Text>\n          The phylogenetic tree input requires a Newick formatted tree with the\n          branch length and the name of the taxa. The taxa name is compulsory to\n          label the tree and link it with the metadata, while the branch length\n          is optional to scale an additive tree.\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.stayTimeline}>\n          Download Patient stay timeline example file\n        </Button>\n\n        <Divider />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default InputFiles;\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js",["331"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js",["332","333","334","335"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js",[],{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","severity":1,"message":"341","line":14,"column":10,"nodeType":"342","messageId":"343","endLine":14,"endColumn":30},{"ruleId":"340","severity":1,"message":"344","line":53,"column":9,"nodeType":"342","messageId":"343","endLine":53,"endColumn":29},{"ruleId":"345","severity":1,"message":"346","line":93,"column":6,"nodeType":"347","endLine":93,"endColumn":26,"suggestions":"348"},{"ruleId":"345","severity":1,"message":"349","line":105,"column":6,"nodeType":"347","endLine":105,"endColumn":27,"suggestions":"350"},{"ruleId":"345","severity":1,"message":"351","line":114,"column":6,"nodeType":"347","endLine":114,"endColumn":31,"suggestions":"352"},{"ruleId":"345","severity":1,"message":"351","line":145,"column":6,"nodeType":"347","endLine":145,"endColumn":51,"suggestions":"353"},{"ruleId":"345","severity":1,"message":"354","line":198,"column":6,"nodeType":"347","endLine":198,"endColumn":49,"suggestions":"355"},{"ruleId":"345","severity":1,"message":"354","line":234,"column":6,"nodeType":"347","endLine":234,"endColumn":56,"suggestions":"356"},{"ruleId":"340","severity":1,"message":"357","line":2,"column":33,"nodeType":"342","messageId":"343","endLine":2,"endColumn":39},{"ruleId":"340","severity":1,"message":"358","line":10,"column":8,"nodeType":"342","messageId":"343","endLine":10,"endColumn":19},{"ruleId":"336","replacedBy":"359"},{"ruleId":"338","replacedBy":"360"},{"ruleId":"340","severity":1,"message":"361","line":6,"column":3,"nodeType":"342","messageId":"343","endLine":6,"endColumn":15},{"ruleId":"340","severity":1,"message":"362","line":1,"column":10,"nodeType":"342","messageId":"343","endLine":1,"endColumn":13},{"ruleId":"340","severity":1,"message":"363","line":32,"column":9,"nodeType":"342","messageId":"343","endLine":32,"endColumn":25},{"ruleId":"340","severity":1,"message":"364","line":50,"column":9,"nodeType":"342","messageId":"343","endLine":50,"endColumn":32},{"ruleId":"340","severity":1,"message":"365","line":2,"column":27,"nodeType":"342","messageId":"343","endLine":2,"endColumn":33},{"ruleId":"340","severity":1,"message":"366","line":3,"column":10,"nodeType":"342","messageId":"343","endLine":3,"endColumn":25},{"ruleId":"340","severity":1,"message":"367","line":20,"column":7,"nodeType":"342","messageId":"343","endLine":20,"endColumn":8},{"ruleId":"340","severity":1,"message":"363","line":46,"column":9,"nodeType":"342","messageId":"343","endLine":46,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":70,"column":6,"nodeType":"347","endLine":70,"endColumn":23,"suggestions":"368"},{"ruleId":"345","severity":1,"message":"349","line":80,"column":6,"nodeType":"347","endLine":80,"endColumn":27,"suggestions":"369"},{"ruleId":"345","severity":1,"message":"351","line":109,"column":6,"nodeType":"347","endLine":109,"endColumn":48,"suggestions":"370"},{"ruleId":"340","severity":1,"message":"371","line":112,"column":9,"nodeType":"342","messageId":"343","endLine":112,"endColumn":27},{"ruleId":"340","severity":1,"message":"362","line":2,"column":18,"nodeType":"342","messageId":"343","endLine":2,"endColumn":21},{"ruleId":"340","severity":1,"message":"366","line":3,"column":10,"nodeType":"342","messageId":"343","endLine":3,"endColumn":25},{"ruleId":"340","severity":1,"message":"372","line":9,"column":8,"nodeType":"342","messageId":"343","endLine":9,"endColumn":21},{"ruleId":"340","severity":1,"message":"373","line":15,"column":3,"nodeType":"342","messageId":"343","endLine":15,"endColumn":24},{"ruleId":"340","severity":1,"message":"374","line":247,"column":9,"nodeType":"342","messageId":"343","endLine":247,"endColumn":15},{"ruleId":"340","severity":1,"message":"375","line":249,"column":9,"nodeType":"342","messageId":"343","endLine":249,"endColumn":20},{"ruleId":"340","severity":1,"message":"376","line":250,"column":9,"nodeType":"342","messageId":"343","endLine":250,"endColumn":20},{"ruleId":"340","severity":1,"message":"377","line":253,"column":9,"nodeType":"342","messageId":"343","endLine":253,"endColumn":27},{"ruleId":"340","severity":1,"message":"378","line":254,"column":9,"nodeType":"342","messageId":"343","endLine":254,"endColumn":25},{"ruleId":"340","severity":1,"message":"372","line":5,"column":8,"nodeType":"342","messageId":"343","endLine":5,"endColumn":21},{"ruleId":"340","severity":1,"message":"379","line":6,"column":16,"nodeType":"342","messageId":"343","endLine":6,"endColumn":25},{"ruleId":"345","severity":1,"message":"380","line":98,"column":6,"nodeType":"347","endLine":98,"endColumn":26,"suggestions":"381"},{"ruleId":"340","severity":1,"message":"362","line":2,"column":10,"nodeType":"342","messageId":"343","endLine":2,"endColumn":13},{"ruleId":"340","severity":1,"message":"382","line":2,"column":15,"nodeType":"342","messageId":"343","endLine":2,"endColumn":18},{"ruleId":"340","severity":1,"message":"383","line":3,"column":10,"nodeType":"342","messageId":"343","endLine":3,"endColumn":28},{"ruleId":"340","severity":1,"message":"384","line":5,"column":9,"nodeType":"342","messageId":"343","endLine":5,"endColumn":14},"no-native-reassign",["385"],"no-negated-in-lhs",["386"],"no-unused-vars","'createClusterCSVFile' is defined but never used.","Identifier","unusedVar","'graph_typeOfAnalysis' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["387"],"React Hook useEffect has missing dependencies: 'props' and 'redraw'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["388"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["389"],["390"],"React Hook useEffect has a missing dependency: 'props.graphObject'. Either include it or remove the dependency array.",["391"],["392"],"'Select' is defined but never used.","'TitleHeader' is defined but never used.",["385"],["386"],"'DeleteFilled' is defined but never used.","'Row' is defined but never used.","'chartOrientation' is assigned a value but never used.","'chartOrientationHandler' is assigned a value but never used.","'Button' is defined but never used.","'LoadingOutlined' is defined but never used.","'_' is assigned a value but never used.",["393"],["394"],["395"],"'reloadChartHandler' is assigned a value but never used.","'GraphEdgeList' is defined but never used.","'filterInverseSymEdges' is defined but never used.","'barMap' is assigned a value but never used.","'barSNP_dist' is assigned a value but never used.","'barSNP_freq' is assigned a value but never used.","'bar_linear_scale_v' is assigned a value but never used.","'bar_band_scale_h' is assigned a value but never used.","'Paragraph' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.metadata'. Either include it or remove the dependency array.",["396"],"'Col' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'Panel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"399","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"416","text":"417"},"Update the dependencies array to be: [isUserReloadSession, props, redraw]",{"range":"418","text":"419"},"Update the dependencies array to be: [graph_isUserDownloading, props]",{"range":"420","text":"421"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"422","text":"423"},"Update the dependencies array to be: [graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",{"range":"424","text":"425"},"Update the dependencies array to be: [graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",{"range":"426","text":"427"},"Update the dependencies array to be: [draw, isUserDrawChart, props]",{"range":"428","text":"429"},{"range":"430","text":"419"},"Update the dependencies array to be: [snpDistExportFormat, isUserExportSnpDist, props]",{"range":"431","text":"432"},"Update the dependencies array to be: [props.metadata, props.selectedNode]",{"range":"433","text":"434"},[3846,3866],"[draw, graph_isUserReDraw, props]",[4144,4165],"[isUserReloadSession, props, redraw]",[4448,4473],"[graph_isUserDownloading, props]",[5498,5543],"[graph_clusterMethod, graph_isUserClustering, props]",[6861,6904],"[graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",[7850,7900],"[graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",[2440,2457],"[draw, isUserDrawChart, props]",[2666,2687],[3402,3444],"[snpDistExportFormat, isUserExportSnpDist, props]",[3005,3025],"[props.metadata, props.selectedNode]"]