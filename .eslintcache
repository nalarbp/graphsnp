[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"34","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"35","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"36","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"37","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"38","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js":"39","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js":"40","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js":"41","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js":"42","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js":"43","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js":"44","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js":"45","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js":"46","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js":"47","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js":"48","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js":"49","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js":"50","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js":"51","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js":"52","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js":"53","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js":"54","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js":"55","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js":"56","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js":"57","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js":"58","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js":"59","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js":"60","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js":"61","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js":"62"},{"size":663,"mtime":1610195666935,"results":"63","hashOfConfig":"64"},{"size":1045,"mtime":1612155926082,"results":"65","hashOfConfig":"64"},{"size":362,"mtime":1610086392986,"results":"66","hashOfConfig":"64"},{"size":477,"mtime":1610107486220,"results":"67","hashOfConfig":"64"},{"size":717,"mtime":1610950774877,"results":"68","hashOfConfig":"64"},{"size":88,"mtime":1610155012196,"results":"69","hashOfConfig":"64"},{"size":2318,"mtime":1625578032614,"results":"70","hashOfConfig":"64"},{"size":1199,"mtime":1612227554727,"results":"71","hashOfConfig":"64"},{"size":11401,"mtime":1628487224933,"results":"72","hashOfConfig":"64"},{"size":12493,"mtime":1628430140346,"results":"73","hashOfConfig":"64"},{"size":2639,"mtime":1612146547627,"results":"74","hashOfConfig":"64"},{"size":493,"mtime":1613173137619,"results":"75","hashOfConfig":"64"},{"size":159,"mtime":1611887099249,"results":"76","hashOfConfig":"64"},{"size":1992,"mtime":1613345589910,"results":"77","hashOfConfig":"64"},{"size":378,"mtime":1610108902860,"results":"78","hashOfConfig":"64"},{"size":584,"mtime":1610154547016,"results":"79","hashOfConfig":"64"},{"size":4461,"mtime":1613345554270,"results":"80","hashOfConfig":"64"},{"size":5134,"mtime":1614821953376,"results":"81","hashOfConfig":"64"},{"size":2201,"mtime":1625578154029,"results":"82","hashOfConfig":"64"},{"size":401,"mtime":1610683140985,"results":"83","hashOfConfig":"64"},{"size":2844,"mtime":1613173737212,"results":"84","hashOfConfig":"64"},{"size":747,"mtime":1610950423257,"results":"85","hashOfConfig":"64"},{"size":605,"mtime":1611803437017,"results":"86","hashOfConfig":"64"},{"size":452,"mtime":1611822450355,"results":"87","hashOfConfig":"64"},{"size":383,"mtime":1611039003510,"results":"88","hashOfConfig":"64"},{"size":156,"mtime":1611039074948,"results":"89","hashOfConfig":"64"},{"size":1769,"mtime":1613287670459,"results":"90","hashOfConfig":"64"},{"size":3248,"mtime":1628132827608,"results":"91","hashOfConfig":"64"},{"size":390,"mtime":1611802301584,"results":"92","hashOfConfig":"64"},{"size":2033,"mtime":1628431320344,"results":"93","hashOfConfig":"64"},{"size":391,"mtime":1611809625614,"results":"94","hashOfConfig":"64"},{"size":2528,"mtime":1612247898218,"results":"95","hashOfConfig":"64"},{"size":4437,"mtime":1612256477904,"results":"96","hashOfConfig":"64"},{"size":499,"mtime":1612021206837,"results":"97","hashOfConfig":"64"},{"size":396,"mtime":1611822589287,"results":"98","hashOfConfig":"64"},{"size":379,"mtime":1611887208678,"results":"99","hashOfConfig":"64"},{"size":220,"mtime":1611889589251,"results":"100","hashOfConfig":"64"},{"size":379,"mtime":1612088497120,"results":"101","hashOfConfig":"64"},{"size":5242,"mtime":1613173137620,"results":"102","hashOfConfig":"64"},{"size":2734,"mtime":1612140310548,"results":"103","hashOfConfig":"64"},{"size":7914,"mtime":1614821988053,"results":"104","hashOfConfig":"64"},{"size":1759,"mtime":1628134710228,"results":"105","hashOfConfig":"64"},{"size":966,"mtime":1613269777620,"results":"106","hashOfConfig":"64"},{"size":1259,"mtime":1612312156147,"results":"107","hashOfConfig":"64"},{"size":408,"mtime":1612088419622,"results":"108","hashOfConfig":"64"},{"size":250,"mtime":1612088403076,"results":"109","hashOfConfig":"64"},{"size":1992,"mtime":1612248030672,"results":"110","hashOfConfig":"64"},{"size":487,"mtime":1612141196612,"results":"111","hashOfConfig":"64"},{"size":7376,"mtime":1628221426298,"results":"112","hashOfConfig":"64"},{"size":5545,"mtime":1628146865494,"results":"113","hashOfConfig":"64"},{"size":2651,"mtime":1625578122178,"results":"114","hashOfConfig":"64"},{"size":881,"mtime":1612167199349,"results":"115","hashOfConfig":"64"},{"size":1179,"mtime":1625578277924,"results":"116","hashOfConfig":"64"},{"size":698,"mtime":1612251042608,"results":"117","hashOfConfig":"64"},{"size":1956,"mtime":1614030932579,"results":"118","hashOfConfig":"64"},{"size":2536,"mtime":1613264942600,"results":"119","hashOfConfig":"64"},{"size":405,"mtime":1613173279348,"results":"120","hashOfConfig":"64"},{"size":1413,"mtime":1613285314789,"results":"121","hashOfConfig":"64"},{"size":561,"mtime":1613264520935,"results":"122","hashOfConfig":"64"},{"size":7553,"mtime":1613346831266,"results":"123","hashOfConfig":"64"},{"size":4143,"mtime":1628130436686,"results":"124","hashOfConfig":"64"},{"size":7104,"mtime":1628484624286,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"13s4y1q",{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"128"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"128"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"128"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["258","259"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["260","261","262","263","264","265"],"/*\n- Comp init => render => all useEffect\n- loading wont work using states, use indicator on draw button instead\n- All useEffect called when first loaded (eg: from Home to graphSNP page)\n- certain useEffect called when any deppendent useEffect affected\n*/\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { Col, Empty, message } from \"antd\";\nimport { createGraphObject } from \"../utils/create_graphObject\";\nimport { createCytoscapeData } from \"../utils/create_cyData\";\nimport { createClusterCSVFile } from \"../utils/create_exportFile\";\nimport { findClusters } from \"../utils//find_clusters\";\nimport cytoscape from \"cytoscape\";\nimport cy_svg from \"cytoscape-svg\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport {\n  createColorLUT,\n  getColorByColorIndex,\n  getEdgeAndArrowWidth,\n  downloadFileAsText,\n} from \"../utils/utils\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport {\n  hmmMatrixToStore,\n  graphObjectToStore,\n  graphClusterToStore,\n} from \"../action/graphMatrixActions\";\nimport {\n  changeIsUserReDrawSetting,\n  changeIsUserClusteringSetting,\n  changeIsUserDownloadingSetting,\n} from \"../action/graphSettingsActions\";\n\nconst _ = require(\"lodash\");\nconst fcose = require(\"cytoscape-fcose\");\nconst spread = require(\"cytoscape-spread\");\ncytoscape.use(fcose); // register extension\ncytoscape.use(spread); // register extension\ncytoscape.use(cy_svg); // register extension\n\nconst GraphContainer = (props) => {\n  //state\n  const [graphIsAvailable, setGraphIsAvailable] = useState(false);\n  const [processingGraph, setProcessingGraph] = useState(false);\n\n  //Settings\n  const graph_method = props.graphSettings.method;\n  const graph_layout = props.graphSettings.layout;\n  const graph_isUserReDraw = props.graphSettings.isUserReDraw;\n  const graph_edgeFilterCutoff = props.graphSettings.edgeFilterCutoff;\n  const graph_clusterMethod = props.graphSettings.clusterMethod;\n  const graph_isUserClustering = props.graphSettings.isUserClustering;\n  const graph_isEdgesHideByCutoff = props.graphSettings.isHideEdgesByCutoff;\n  const graph_edgesHideCutoff = props.graphSettings.hiddenEdgesCutoff;\n  const graph_colorNodeBy = props.graphSettings.colorNodedBy;\n  const graph_isEdgeScaled = props.graphSettings.isEdgeScaled;\n  const graph_edgeScaleFactor = props.graphSettings.edgeScaleFactor;\n  const graph_isUserDownloading = props.graphSettings.isUserDownloading;\n  const trans_locLevel = props.graphSettings.transIncludeLocLevel;\n\n  //Internal setting\n  const cy_layout = { name: graph_layout, animate: false, fit: true };\n  const cytoscapeRef = useRef(null);\n\n  useEffect(() => {\n    if (graph_isUserReDraw) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        draw();\n        setGraphIsAvailable(true);\n        setProcessingGraph(false);\n        props.changeIsUserReDrawSetting(false);\n      }, 100);\n    }\n  }, [graph_isUserReDraw]);\n\n  useEffect(() => {\n    if (graph_isUserDownloading) {\n      let cy = cytoscapeRef.current;\n      let svgContent = cy.svg({ scale: 1, full: true });\n      downloadFileAsText(\"GraphSNP-cytoscape-svg.svg\", svgContent);\n      props.changeIsUserDownloadingSetting(false);\n    }\n  }, [graph_isUserDownloading]);\n\n  useEffect(() => {\n    if (graph_isUserClustering && props.graphObject) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        //call clustering\n        let clusters = findClusters(props.graphObject, graph_clusterMethod);\n        setProcessingGraph(false);\n        message.success(\n          `Found ${clusters.group.length} clusters in the graph`,\n          2\n        );\n        //update colorLUT by new clusters color\n        let colorLUT_byCluster = createColorLUT(clusters.members, \"clusterID\");\n        let newColorLUT = _.cloneDeep(props.colorLUT);\n        if (newColorLUT) {\n          let updated_newColorLUT = {\n            ...newColorLUT,\n            clusterID: colorLUT_byCluster,\n          };\n          newColorLUT = updated_newColorLUT;\n        } else {\n          newColorLUT = { clusterID: colorLUT_byCluster };\n        }\n        props.colorLUTtoStore(newColorLUT);\n\n        props.graphClusterToStore(clusters);\n        props.changeIsUserClusteringSetting(false);\n      }, 100);\n    }\n  }, [graph_clusterMethod, graph_isUserClustering]);\n\n  useEffect(() => {\n    if (graph_layout && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      let layout = {\n        name: graph_layout,\n        animate: false,\n        fit: true,\n        prelayout: false,\n      };\n      cy.layout(layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_layout]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgeScaled) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"edge\"\n              );\n            },\n            \"arrow-scale\": function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"arrow\"\n              );\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: 3,\n            \"arrow-scale\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [graph_isEdgeScaled, graph_edgeScaleFactor]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgesHideByCutoff) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: function (o) {\n              let edgeWeight = o.data(\"weight\");\n              if (graph_isEdgesHideByCutoff) {\n                let res = edgeWeight <= graph_edgesHideCutoff ? 0 : 1;\n                return res;\n              } else {\n                return 1;\n              }\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_isEdgesHideByCutoff, graph_edgesHideCutoff]);\n\n  useEffect(() => {\n    if (graph_colorNodeBy && props.colorLUT && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"node\")\n        .style({\n          \"background-color\": function (d) {\n            let isolate_name = d.data(\"id\");\n            let col = getColorByColorIndex(\n              isolate_name,\n              graph_colorNodeBy,\n              props.colorLUT\n            );\n            return col;\n          },\n        })\n        .update();\n\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_colorNodeBy, props.colorLUT]);\n\n  //DRAW\n  function draw() {\n    //check hamming distance ? if not create one, send to store at the end.\n    const hammingMatrix = !props.hammMatrix\n      ? new HammingMatrix(props.sequence).getHammingMatrix()\n      : props.hammMatrix;\n\n    const seq_len = props.sequence ? props.sequence[0].size : null;\n\n    //Look at param (method, seq, ), generate graph object: util functions\n    //graphObject: {type:'mcg', mapData: edgeList object}\n    const graphObject = createGraphObject(\n      hammingMatrix,\n      graph_method,\n      graph_edgeFilterCutoff,\n      props.categoricalMap,\n      props.patientMovement,\n      props.metadata,\n      trans_locLevel,\n      seq_len\n    );\n\n    //generate cytoscape data\n    //graphObject = [{data:{id:id, nodeType:'singleton', data:[]}}, { data: {source: s, target: t, weight: w} } ]\n    const cytoscapeData = createCytoscapeData(graphObject);\n\n    //Load and view cytoscape\n    if (cytoscapeData) {\n      const cy = cytoscape({\n        elements: cytoscapeData,\n        container: document.getElementById(\"graph-cont-cytoscape-canvas\"),\n        pannable: true,\n        selected: true,\n        boxSelectionEnabled: false,\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              label: \"data(id)\",\n              \"border-width\": 3,\n              \"border-style\": \"solid\",\n              \"border-color\": \"black\",\n              \"background-color\": \"lightgray\",\n            },\n          },\n          {\n            selector: \"edge\",\n            style: {\n              opacity: function (o) {\n                let edgeWeight = o.data(\"weight\");\n                //console.log(edgeWeight);\n                if (graph_isEdgesHideByCutoff) {\n                  let res = edgeWeight <= graph_edgesHideCutoff ? 0 : 1;\n                  return res;\n                } else {\n                  return 1;\n                }\n              },\n              label: \"data(weight)\",\n              \"font-size\": \"10px\",\n              \"text-background-color\": \"#F5E372\",\n              color: \"red\",\n              width: function (e) {\n                return getEdgeAndArrowWidth(\n                  graph_isEdgeScaled,\n                  e.data(\"weight\"),\n                  graph_edgeScaleFactor,\n                  \"edge\"\n                );\n              },\n              \"target-arrow-color\": \"black\",\n              \"target-arrow-shape\": (e) => {\n                return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n              },\n              \"curve-style\": \"bezier\",\n              \"arrow-scale\": function (e) {\n                return getEdgeAndArrowWidth(\n                  graph_isEdgeScaled,\n                  e.data(\"weight\"),\n                  graph_edgeScaleFactor,\n                  \"arrow\"\n                );\n              },\n            },\n          },\n          {\n            selector: \":selected\",\n            style: {\n              \"border-width\": \"5\",\n              \"border-color\": \"red\",\n              \"border-style\": \"dashed\",\n              padding: \"8px\",\n            },\n          },\n        ],\n      });\n      if (graph_layout === \"spread\") {\n        let diverted_layout = {\n          name: \"cose\",\n          animate: false,\n          fit: true,\n          prelayout: false,\n        };\n        cy.layout(diverted_layout).run();\n      } else {\n        cy.layout(cy_layout).run();\n      }\n      //cy.layout(cy_layout).run();\n      //save current Ref\n      cytoscapeRef.current = cy;\n\n      //==== SEND TO STORE ====\n      if (props.hammMatrix) {\n        props.hmmMatrixToStore(hammingMatrix);\n      }\n      props.graphObjectToStore(graphObject);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Col span={24} style={{ position: \"relative\" }}>\n        <div\n          id=\"graph-cont-is-empty\"\n          style={{ display: graphIsAvailable ? \"none\" : \"block\" }}\n        >\n          <Empty\n            description={\"No previous graph found: click draw to create one\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div\n          id=\"graph-cont-is-processing\"\n          style={{ display: processingGraph ? \"block\" : \"none\" }}\n        >\n          <p>\n            <span>\n              <LoadingOutlined\n                style={{\n                  fontSize: 18,\n                }}\n                spin\n              />\n            </span>{\" \"}\n            Processing ...\n          </p>\n        </div>\n      </Col>\n      <div id=\"graph-cont-cytoscape-canvas\"></div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    patientMovement: state.patientMovement,\n    sequence: state.sequence,\n    graphObject: state.graphObject,\n    hammMatrix: state.hammMatrix,\n    graphSettings: state.graphSettings,\n    colorLUT: state.colorLUT,\n    graphClusters: state.graphClusters,\n    categoricalMap: state.categoricalMap,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeIsUserClusteringSetting,\n      changeIsUserReDrawSetting,\n      hmmMatrixToStore,\n      graphObjectToStore,\n      graphClusterToStore,\n      colorLUTtoStore,\n      changeIsUserDownloadingSetting,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphContainer);\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",["266"],"import React from \"react\";\nimport { Row, Col, Modal, Spin } from \"antd\";\nimport \"./style_home.css\";\nimport { connect } from \"react-redux\";\n//import { Link, NavLink } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { changeNavLocation } from \"../action/navigationActions\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport SNPsLoader from \"./comp_snpsLoader\";\nimport TitleHeader from \"./comp_titleHeader\";\nimport MetadataLoader from \"./comp_metadataLoader\";\nimport PatientMovementLoader from \"./comp_patientMovementLoader\";\nimport FooterComponent from \"./comp_footer\";\nimport Particles from \"react-particles-js\";\nimport { vh } from \"../utils/utils\";\n\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 34 }} spin />;\nconst getParticleHeight = String(vh(100) - 380) + \"px\";\nconst particleParams = {\n  fpsLimit: 24,\n  particles: {\n    number: { value: 25 },\n    size: { value: 4 },\n    links: {\n      enable: true,\n      distance: 75,\n    },\n    move: {\n      enable: true,\n      speed: 2,\n      outModes: {\n        default: \"bounce\",\n      },\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\",\n      },\n    },\n  },\n};\n\nconst Home = (props) => {\n  //console.log(\"Home\");\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xs={24} id=\"header-content\">\n          <Modal\n            visible={props.isInputLoading}\n            closable={false}\n            centered={true}\n            width={0}\n            footer={null}\n            bodyStyle={{\n              textAlign: \"center\",\n              padding: \"0px\",\n            }}\n          >\n            <Spin\n              indicator={loadingIcon}\n              style={{ color: \"white\" }}\n              tip=\"Processing...\"\n              size=\"large\"\n            />\n          </Modal>\n        </Col>\n      </Row>\n      <Row id=\"input-wrapper\">\n        <Particles\n          params={particleParams}\n          height={getParticleHeight}\n          style={{ position: \"absolute\", height: \"200px\" }}\n        />\n        <Col xs={24} sm={8}>\n          <SNPsLoader />\n        </Col>\n        <Col xs={24} sm={8}>\n          <MetadataLoader />\n        </Col>\n        <Col xs={24} sm={8}>\n          <PatientMovementLoader />\n        </Col>\n      </Row>\n      <FooterComponent />\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isInputLoading: state.isInputLoading,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeNavLocation,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n//Home called when navigating\n//Called when input is loaded (cause it subsribed to the store, so when the connected state change it will be re-called)\n/*\n<Col xs={24}>\n          <TitleHeader />\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],["267","268"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js",["269"],"import { Row, Col } from \"antd\";\nimport React from \"react\";\nimport \"./style_home.css\";\nconst TitleHeaderComponent = (props) => {\n  return (\n    <React.Fragment>\n      <Col sm={16} id=\"title-header-component\">\n        <p>\n          GraphSNP: Graph-based outbreak cluster and transmission detection and\n          visualization using single-nucleotide polymorphism (SNP) in web\n          browser\n        </p>\n      </Col>\n    </React.Fragment>\n  );\n};\n\nexport default TitleHeaderComponent;\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js",["270","271"],"import React from \"react\";\nimport { Button, Row, Col, Select, Divider } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  dist_changeDataToDisplay,\n  dist_changeDataColumn,\n  dist_changeDataColumnLevel,\n  dist_changeChartOrientation,\n  dist_changeExportFormat,\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n} from \"../action/snpdistSettingsActions\";\n\nimport { filterUnique } from \"../utils/utils\";\n\nconst { Option } = Select;\n\nconst SNPdistSettings = (props) => {\n  //GLOBAL\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //STATES\n\n  //SETTINGS\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const chartOrientation = props.snpDistSettings.chartOrientation;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n\n  //HANDLERS\n  const dataToDisplayHandler = (val) => {\n    props.dist_changeDataToDisplay(val);\n  };\n\n  const dataColumnHandler = (val) => {\n    props.dist_changeDataColumn(val);\n  };\n\n  const dataColumnLevelHandler = (val) => {\n    props.dist_changeDataColumnLevel(val);\n  };\n\n  const chartOrientationHandler = (val) => {\n    props.dist_changeChartOrientation(val);\n  };\n\n  const drawChartHandler = (val) => {\n    if (!isUserDrawChart) {\n      props.dist_changeIsUserDraw(true);\n    }\n  };\n\n  const exportFormatHandler = (val) => {\n    props.dist_changeExportFormat(val);\n  };\n\n  const exportChartHandler = (val) => {\n    if (!isUserExportSnpDist) {\n      props.dist_changeIsUserExport(true);\n    }\n  };\n  const getMetadataColumn = function (header, i) {\n    const excluded_headers = [\"sample_date\", \"patient_id\"];\n    if (excluded_headers.indexOf(header) === -1) {\n      return (\n        <Option key={i} disabled={false} value={header}>\n          {header}\n        </Option>\n      );\n    }\n  };\n\n  const getMetadataColumnLevels_arr = function (metadata_arr, dataColumn) {\n    if (metadata_arr && dataColumn) {\n      let dataColumnLevels_arr = metadata_arr\n        .map((d) => d[dataColumn])\n        .filter(filterUnique);\n\n      if (\n        Array.isArray(dataColumnLevels_arr) &&\n        dataColumnLevels_arr.length > 0\n      ) {\n        return dataColumnLevels_arr;\n      } else {\n        return [\"#na_exluded!\"];\n      }\n    } else {\n      return [\"#na_exluded!\"];\n    }\n  };\n\n  const getMetadataColumnLevel = function (level, idx) {\n    const excluded_headers = [\"#na_exluded!\"];\n    if (excluded_headers.indexOf(level) === -1) {\n      return (\n        <Option key={idx} disabled={false} value={level}>\n          {level}\n        </Option>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Row gutter={[8, 8]}>\n        <Col span={24}>\n          <h5>Pair-wise SNPs distance settings</h5>\n          <p>Show distribution for:</p>\n          <Select\n            value={dataToDisplay}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={dataToDisplayHandler}\n          >\n            <Option value=\"all\">All isolates</Option>\n            <Option\n              disabled={props.metadata ? false : true}\n              value=\"per-category\"\n            >\n              Isolates in specific group (metadata)\n            </Option>\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <p>Select column in metadata</p>\n          <Select\n            value={dataColumn}\n            style={{ width: \"100%\" }}\n            disabled={\n              dataToDisplay !== \"all\" && props.hammingMatrix && props.metadata\n                ? false\n                : true\n            }\n            onChange={dataColumnHandler}\n          >\n            {props.colorLUT && Object.keys(props.colorLUT)\n              ? Object.keys(props.colorLUT).map((k, i) => {\n                  return getMetadataColumn(k, i);\n                })\n              : [\"na\"].map((l, j) => {\n                  return (\n                    <Option key={j} disabled={false} value={l}>\n                      {l}\n                    </Option>\n                  );\n                })}\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <p>Select group in the choosen column</p>\n          <Select\n            value={dataColumnLevel}\n            style={{ width: \"100%\" }}\n            disabled={\n              dataToDisplay !== \"all\" &&\n              dataColumn &&\n              props.metadata &&\n              metadata_arr\n                ? false\n                : true\n            }\n            onChange={dataColumnLevelHandler}\n          >\n            {dataColumn && metadata_arr\n              ? getMetadataColumnLevels_arr(metadata_arr, dataColumn).map(\n                  (e, x) => {\n                    return getMetadataColumnLevel(e, x);\n                  }\n                )\n              : [\"na\"].map((l, j) => {\n                  return (\n                    <Option key={j} disabled={false} value={l}>\n                      {l}\n                    </Option>\n                  );\n                })}\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammingMatrix ? false : true}\n            onClick={drawChartHandler}\n            danger={true}\n          >\n            Create bar chart\n          </Button>\n        </Col>\n\n        <Divider style={{ margin: \"10px 0px 0px 0px\" }} />\n\n        <Col span={24}>\n          <h5>Download settings</h5>\n          <p>Format </p>\n          <Select\n            value={snpDistExportFormat}\n            onChange={exportFormatHandler}\n            style={{ width: \"100%\" }}\n          >\n            <Option\n              disabled={props.hammingMatrix ? false : true}\n              value=\"symSnpDist\"\n            >\n              Pairwise SNP distances\n            </Option>\n            <Option value=\"svg\">SVG Chart</Option>\n            <Option value=\"png\">PNG Chart</Option>\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <Button onClick={exportChartHandler} danger={true}>\n            Download\n          </Button>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    colorLUT: state.colorLUT,\n    metadata: state.metadata,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeDataToDisplay,\n      dist_changeDataColumn,\n      dist_changeDataColumnLevel,\n      dist_changeChartOrientation,\n      dist_changeExportFormat,\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistSettings);\n\n/*\n<Col span={24}>\n          <p>Chart(s) orientation</p>\n          <Select\n            value={chartOrientation}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={chartOrientationHandler}\n          >\n            <Option value=\"horizontal\">Horizontal</Option>\n            <Option value=\"vertical\">Vertical</Option>\n          </Select>\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js",["272","273","274","275"],"import React, { useEffect, useRef } from \"react\";\nimport { Row, Col } from \"antd\";\nimport \"./style_snpDist.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n} from \"../action/snpdistSettingsActions\";\nimport * as d3Select from \"d3-selection\";\n//import useResizeObserver from \"../hooks/hook_resizeObserver\"; //Broken\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport { vh, vw } from \"../utils/utils\";\nimport { createBarPlot_all } from \"./chart_barplot_all\";\nimport { createSNPdistCSVFile } from \"../utils/create_exportFile\";\n\nconst _ = require(\"lodash\");\n\nconst SNPdistViewer = (props) => {\n  //Ref\n  const chartContainerRef = useRef();\n  const snpdistSVGRef = useRef();\n\n  //Drawing constructor\n  const dim_w = vw(100) - 200 - 20; //200 is sider width, 20 is just a nice margin\n  const dim_h = vh(100) - 120 - 20;\n  const margin = { top: 20, right: 30, bottom: 30, left: 50 };\n  const chartArea_width = dim_w - margin.left - margin.right;\n  const chartArea_height = dim_h - margin.top - margin.bottom;\n\n  //States\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //Settings\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const chartOrientation = props.snpDistSettings.chartOrientation;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n\n  //UseEffect\n  useEffect(() => {\n    if (isUserDrawChart) {\n      setTimeout(() => {\n        draw();\n        props.dist_changeIsUserDraw(false);\n      }, 10);\n    }\n  }, [isUserDrawChart]);\n\n  useEffect(() => {\n    if (isUserExportSnpDist) {\n      switch (snpDistExportFormat) {\n        case \"symSnpDist\":\n          //prepare data\n          let edgeList = [];\n          let nodeList = [];\n          props.hammingMatrix.forEach((v, k) => {\n            nodeList.push(k);\n            edgeList = edgeList.concat(v);\n          });\n          let snp_dist = new GraphEdgeList(\n            nodeList,\n            edgeList\n          ).getSymetricEdges().edges;\n          createSNPdistCSVFile(snp_dist);\n          props.dist_changeIsUserExport(false);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [snpDistExportFormat, isUserExportSnpDist]);\n\n  //Functions\n  function getIsolatesByDataColumnAndLevel(meta_arr, dataCol, dataColLevel) {\n    let filteredRec = meta_arr.filter((rec) => {\n      if (rec[dataCol] === dataColLevel) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    let res = filteredRec.map((d) => d.sample_id);\n    return res;\n  }\n\n  //DRAWING\n  function draw() {\n    // console.log(\"draw\", +new Date());\n    //clean previous drawing artifacts\n    d3Select.select(\"#snpdist_svgGroup\").remove();\n\n    //prepare data\n    let edgeList = [];\n    let nodeList = [];\n\n    // console.log(\"edgeList_construction\", +new Date());\n\n    props.hammingMatrix.forEach((v, k) => {\n      nodeList.push(k);\n      edgeList = edgeList.concat(v);\n    });\n\n    // console.log(\"chart_data_construction\", +new Date());\n    let chart_data = new GraphEdgeList(nodeList, edgeList).getSymetricEdges()\n      .edges;\n\n    if (dataToDisplay === \"all\") {\n      // console.log(\"data_list_construction\", +new Date());\n      let data_list = chart_data.map((d) => d.value);\n\n      const svg = d3Select.select(snpdistSVGRef.current);\n      createBarPlot_all(\n        svg,\n        data_list,\n        chartArea_width,\n        chartArea_height,\n        margin\n      );\n    } else {\n      //get column header and level\n      if (metadata_arr && dataColumn && dataColumnLevel) {\n        let includedIsolates = getIsolatesByDataColumnAndLevel(\n          metadata_arr,\n          dataColumn,\n          dataColumnLevel\n        );\n        let filtered_chart_data = chart_data.filter((d) => {\n          if (\n            includedIsolates.indexOf(d.source) !== -1 &&\n            includedIsolates.indexOf(d.target) !== -1\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        let data_list = filtered_chart_data.map((d) => d.value);\n        const svg = d3Select.select(snpdistSVGRef.current);\n        createBarPlot_all(\n          svg,\n          data_list,\n          chartArea_width,\n          chartArea_height,\n          margin\n        );\n      }\n    }\n\n    //set svg attributes\n\n    // if (dataToDisplay === \"all\") {\n    //   // draw a violin + jitter + boxplot for all, color coded by selected column\n    // } else {\n    //   //draw charts based on factors from the column\n    // }\n  }\n\n  return (\n    <Row>\n      <Col ref={chartContainerRef} sm={24}>\n        <div\n          id=\"snpdist-chart-container\"\n          style={{ height: \"100%\", width: \"100%\" }}\n        >\n          <svg id=\"snpdist-chart-svg\" ref={snpdistSVGRef}></svg>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    metadata: state.metadata,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistViewer);\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js",["276","277"],"//========================================== SMSO ================================================\n/*\nCreate a directed graph object that edges represent transmissions\nDirected edges was created only if pair-wise of isolates has transmission signal\nTransmission signal were if transmission score >= 1, created by check patient stay overlap hiearchiely\n\n*/\n\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport StayList from \"../model/stayList_prop\";\nimport {\n  getHighestLocation,\n  filterInverseSymEdges,\n  getOverlapLocationLevel,\n} from \"../utils/utils\";\n\nconst moment = extendMoment(Moment);\nconst _ = require(\"lodash\");\n\nexport function createSMSO(\n  rawMatrix,\n  edgeCutoff,\n  rawPatientMovementData,\n  metadata,\n  trans_locLevel\n) {\n  //Assumed the input is true\n  //Take an adjacency matrix of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge <= cut-off\n  let mat = _.cloneDeep(rawMatrix);\n  let patientMovementData = _.cloneDeep(rawPatientMovementData);\n  let edgeList = [];\n  let nodeList = [];\n  mat.forEach((val, key) => {\n    nodeList.push(key);\n    let sortedRow = val;\n\n    //Filter by cut-off\n    if (edgeCutoff && edgeCutoff > 0) {\n      sortedRow = sortedRow.filter((e) => {\n        return e.value <= edgeCutoff;\n      });\n    }\n\n    //merge\n    edgeList = edgeList.concat(sortedRow);\n  });\n\n  //Asses transmission signal on each edge\n  let directedEdges = [];\n  let undirectedEdges = [];\n  if (edgeList.length > 0) {\n    for (let i = 0; i < edgeList.length; i++) {\n      let e = edgeList[i];\n      //get pid\n      let p1_id = metadata.get(e.source).patient_id;\n      let p2_id = metadata.get(e.target).patient_id;\n\n      let p1_sampleDate = moment(metadata.get(e.source).sample_date);\n      let p2_sampleDate = moment(metadata.get(e.target).sample_date);\n\n      //get the stays\n      let p1_stays = patientMovementData.get(p1_id)\n        ? new StayList(patientMovementData.get(p1_id))\n        : null;\n\n      let p2_stays = patientMovementData.get(p2_id)\n        ? new StayList(patientMovementData.get(p2_id))\n        : null;\n\n      //console.log(p1_id, p1_stays_obj instanceof StayList);\n      //console.log(p1_id, p1_stays_obj);\n\n      //if we have stays data for both isolates, do, else return 0 and break\n      //console.log(p1_id, p1_stays);\n      if (\n        p1_stays instanceof StayList &&\n        p2_stays instanceof StayList &&\n        Array.isArray(p1_stays.stays) &&\n        Array.isArray(p2_stays.stays) &&\n        p1_stays.stays.length > 0 &&\n        p2_stays.stays.length > 0\n      ) {\n        //which location level do these patients shared? hospital=1? ward=2? bay=3? bed=4?\n        //console.log(p1_stays_obj);\n        //console.log(p1_stays_obj.getLocationLevel());\n        let p1_locLevel = p1_stays.getLocationLevel();\n        let p2_locLevel = p2_stays.getLocationLevel();\n        let common_locLevel = Math.min(p1_locLevel, p2_locLevel)\n          ? Math.min(p1_locLevel, p2_locLevel)\n          : null;\n\n        //console.log(common_locLevel, p1_locLevel, p2_locLevel);\n\n        //if they dont shared any location, not even hospital, return e as undirected with score = 1 (genomic only)\n        if (!common_locLevel) {\n          e[\"dir\"] = \"none\";\n          e.value = 1;\n          undirectedEdges.push(e);\n        } else {\n          //if they share location, at least hospital\n          //check whether that had any overlap admission\n          let p1_rangeOfStay = p1_stays.getRangeOfStays();\n          let p2_rangeOfStay = p2_stays.getRangeOfStays();\n\n          let p1_range = moment.range(\n            p1_rangeOfStay.start_date.startOf(\"day\"),\n            p1_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let p2_range = moment.range(\n            p2_rangeOfStay.start_date.startOf(\"day\"),\n            p2_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let is_p1_p2_overlap = p1_range.overlaps(p2_range);\n          if (is_p1_p2_overlap) {\n            //they do have overlap\n            //compare the highest common level of location (common_locLevel) for both patients\n\n            if (p2_sampleDate.isAfter(p1_sampleDate, \"day\")) {\n              let transmissionScore = calculateTransScore(\n                p1_id,\n                p2_id,\n                p1_stays,\n                p2_stays,\n                common_locLevel\n              );\n              e[\"dir\"] = \"forward\";\n              e.value = 1 + transmissionScore;\n              directedEdges.push(e);\n            } else {\n              e[\"dir\"] = \"none\";\n              e.value = 1;\n              undirectedEdges.push(e);\n            }\n          } else {\n            //they dont have any overlap\n            e[\"dir\"] = \"none\";\n            e.value = 1;\n            undirectedEdges.push(e);\n          }\n        }\n      } else {\n        e[\"dir\"] = \"none\";\n        e.value = 1;\n        undirectedEdges.push(e);\n      }\n    }\n  }\n\n  //let clean_undirectedEdges = filterInverseSymEdges(undirectedEdges);\n  //merge edges\n\n  directedEdges = directedEdges.filter((e) => {\n    return e.value >= trans_locLevel;\n  });\n\n  //SCORING: 1: snps only, 2: snps+hospital, 3: snps+ ward, 4: snps+bay, 5: snps+bed\n\n  //return nodes and edges with direction property\n  //[edgeList[0]]\n\n  return { nodes: nodeList, edges: directedEdges };\n}\n\nfunction calculateTransScore(p1, p2, p1_stays, p2_stays, common_locLevel) {\n  let scoreOverlap = 0;\n\n  //filter stays to only to the level of both patients shared location\n  let p1_stays_common = p1_stays.stays.filter((s) => {\n    return getHighestLocation(s) === common_locLevel;\n  });\n  let p2_stays_common = p2_stays.stays.filter((st) => {\n    return getHighestLocation(st) === common_locLevel;\n  });\n\n  //console.log(p1_stays_common, p2_stays_common);\n\n  //at the level of\n\n  //compared each stays, get the least common location level, save to store, if we found bigger score, update\n  for (let i = 0; i < p1_stays_common.length; i++) {\n    let p1_stay = p1_stays_common[i];\n    let p1_stay_range = moment.range(\n      p1_stay.start_date.startOf(\"day\"),\n      p1_stay.end_date.endOf(\"day\")\n    );\n\n    for (let j = 0; j < p2_stays_common.length; j++) {\n      let p2_stay = p2_stays_common[j];\n      let p2_stay_range = moment.range(\n        p2_stay.start_date.startOf(\"day\"),\n        p2_stay.end_date.endOf(\"day\")\n      );\n\n      let is_stays_overlap = p1_stay_range.overlaps(p2_stay_range);\n\n      if (is_stays_overlap) {\n        let overlapDur = p1_stay_range.intersect(p2_stay_range).diff(\"days\");\n\n        if (overlapDur <= 7) {\n          //need to find, at which location level they were overlap\n          //check the deepest one\n\n          let loc_comm_score = getOverlapLocationLevel(p1_stay, p2_stay);\n\n          if (p1 === \"P-13\" && p2 === \"P-18\") {\n            //console.log(\"???\", is_stays_overlap);\n            //console.log(\"+++\", overlapDur, \"days\");\n            console.log(loc_comm_score);\n            console.log(\n              \"p1\",\n              p1_stay.hospital_id,\n              p1_stay.ward_id,\n              p1_stay.bay_id,\n              p1_stay.bed_id\n            );\n            console.log(\n              \"p2\",\n              p2_stay.hospital_id,\n              p2_stay.ward_id,\n              p2_stay.bay_id,\n              p2_stay.bed_id\n            );\n          }\n          if (loc_comm_score > scoreOverlap) {\n            scoreOverlap = loc_comm_score;\n          }\n        }\n      }\n    }\n  }\n  return scoreOverlap;\n  //SCORING: 1: hospital, 2: ward, 3: bay, 4: bed\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js",["278"],{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","severity":1,"message":"284","line":14,"column":10,"nodeType":"285","messageId":"286","endLine":14,"endColumn":30},{"ruleId":"287","severity":1,"message":"288","line":78,"column":6,"nodeType":"289","endLine":78,"endColumn":26,"suggestions":"290"},{"ruleId":"287","severity":1,"message":"291","line":87,"column":6,"nodeType":"289","endLine":87,"endColumn":31,"suggestions":"292"},{"ruleId":"287","severity":1,"message":"291","line":118,"column":6,"nodeType":"289","endLine":118,"endColumn":51,"suggestions":"293"},{"ruleId":"287","severity":1,"message":"294","line":171,"column":6,"nodeType":"289","endLine":171,"endColumn":49,"suggestions":"295"},{"ruleId":"287","severity":1,"message":"294","line":203,"column":6,"nodeType":"289","endLine":203,"endColumn":56,"suggestions":"296"},{"ruleId":"283","severity":1,"message":"297","line":10,"column":8,"nodeType":"285","messageId":"286","endLine":10,"endColumn":19},{"ruleId":"279","replacedBy":"298"},{"ruleId":"281","replacedBy":"299"},{"ruleId":"283","severity":1,"message":"300","line":1,"column":10,"nodeType":"285","messageId":"286","endLine":1,"endColumn":13},{"ruleId":"283","severity":1,"message":"301","line":31,"column":9,"nodeType":"285","messageId":"286","endLine":31,"endColumn":25},{"ruleId":"283","severity":1,"message":"302","line":49,"column":9,"nodeType":"285","messageId":"286","endLine":49,"endColumn":32},{"ruleId":"283","severity":1,"message":"303","line":17,"column":7,"nodeType":"285","messageId":"286","endLine":17,"endColumn":8},{"ruleId":"283","severity":1,"message":"301","line":40,"column":9,"nodeType":"285","messageId":"286","endLine":40,"endColumn":25},{"ruleId":"287","severity":1,"message":"288","line":53,"column":6,"nodeType":"289","endLine":53,"endColumn":23,"suggestions":"304"},{"ruleId":"287","severity":1,"message":"291","line":78,"column":6,"nodeType":"289","endLine":78,"endColumn":48,"suggestions":"305"},{"ruleId":"283","severity":1,"message":"306","line":9,"column":8,"nodeType":"285","messageId":"286","endLine":9,"endColumn":21},{"ruleId":"283","severity":1,"message":"307","line":15,"column":3,"nodeType":"285","messageId":"286","endLine":15,"endColumn":24},{"ruleId":"283","severity":1,"message":"306","line":5,"column":8,"nodeType":"285","messageId":"286","endLine":5,"endColumn":21},"no-native-reassign",["308"],"no-negated-in-lhs",["309"],"no-unused-vars","'createClusterCSVFile' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["310"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["311"],["312"],"React Hook useEffect has a missing dependency: 'props.graphObject'. Either include it or remove the dependency array.",["313"],["314"],"'TitleHeader' is defined but never used.",["308"],["309"],"'Row' is defined but never used.","'chartOrientation' is assigned a value but never used.","'chartOrientationHandler' is assigned a value but never used.","'_' is assigned a value but never used.",["315"],["316"],"'GraphEdgeList' is defined but never used.","'filterInverseSymEdges' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"331","text":"332"},"Update the dependencies array to be: [graph_isUserDownloading, props]",{"range":"333","text":"334"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"335","text":"336"},"Update the dependencies array to be: [graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",{"range":"337","text":"338"},"Update the dependencies array to be: [graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",{"range":"339","text":"340"},"Update the dependencies array to be: [draw, isUserDrawChart, props]",{"range":"341","text":"342"},"Update the dependencies array to be: [snpDistExportFormat, isUserExportSnpDist, props]",{"range":"343","text":"344"},[3014,3034],"[draw, graph_isUserReDraw, props]",[3317,3342],"[graph_isUserDownloading, props]",[4367,4412],"[graph_clusterMethod, graph_isUserClustering, props]",[5730,5773],"[graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",[6598,6648],"[graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",[1864,1881],"[draw, isUserDrawChart, props]",[2506,2548],"[snpDistExportFormat, isUserExportSnpDist, props]"]