[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"34","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"35","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"36","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"37","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"38","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js":"39","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js":"40","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js":"41","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js":"42","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js":"43","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js":"44","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js":"45","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js":"46","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js":"47","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js":"48","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js":"49","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js":"50","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js":"51","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js":"52","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js":"53","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js":"54","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js":"55","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js":"56","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js":"57","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js":"58","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js":"59","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js":"60","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js":"61","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js":"62","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js":"63","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js":"64","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js":"65","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js":"66","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js":"67","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js":"68","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js":"69","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js":"70","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js":"71","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js":"72","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_intra_inter.js":"73"},{"size":663,"mtime":1610195666935,"results":"74","hashOfConfig":"75"},{"size":1045,"mtime":1612155926082,"results":"76","hashOfConfig":"75"},{"size":362,"mtime":1610086392986,"results":"77","hashOfConfig":"75"},{"size":477,"mtime":1610107486220,"results":"78","hashOfConfig":"75"},{"size":717,"mtime":1610950774877,"results":"79","hashOfConfig":"75"},{"size":88,"mtime":1610155012196,"results":"80","hashOfConfig":"75"},{"size":2969,"mtime":1629784596090,"results":"81","hashOfConfig":"75"},{"size":1205,"mtime":1628788880308,"results":"82","hashOfConfig":"75"},{"size":21942,"mtime":1631240825371,"results":"83","hashOfConfig":"75"},{"size":20102,"mtime":1630296789428,"results":"84","hashOfConfig":"75"},{"size":2639,"mtime":1612146547627,"results":"85","hashOfConfig":"75"},{"size":612,"mtime":1628787892006,"results":"86","hashOfConfig":"75"},{"size":159,"mtime":1611887099249,"results":"87","hashOfConfig":"75"},{"size":2503,"mtime":1628875759404,"results":"88","hashOfConfig":"75"},{"size":378,"mtime":1610108902860,"results":"89","hashOfConfig":"75"},{"size":584,"mtime":1610154547016,"results":"90","hashOfConfig":"75"},{"size":5261,"mtime":1628875833582,"results":"91","hashOfConfig":"75"},{"size":7794,"mtime":1630375685448,"results":"92","hashOfConfig":"75"},{"size":3340,"mtime":1631240356821,"results":"93","hashOfConfig":"75"},{"size":401,"mtime":1610683140985,"results":"94","hashOfConfig":"75"},{"size":3156,"mtime":1631240209005,"results":"95","hashOfConfig":"75"},{"size":970,"mtime":1628782168193,"results":"96","hashOfConfig":"75"},{"size":678,"mtime":1628882847864,"results":"97","hashOfConfig":"75"},{"size":452,"mtime":1611822450355,"results":"98","hashOfConfig":"75"},{"size":383,"mtime":1611039003510,"results":"99","hashOfConfig":"75"},{"size":156,"mtime":1611039074948,"results":"100","hashOfConfig":"75"},{"size":1769,"mtime":1613287670459,"results":"101","hashOfConfig":"75"},{"size":3248,"mtime":1628132827608,"results":"102","hashOfConfig":"75"},{"size":390,"mtime":1611802301584,"results":"103","hashOfConfig":"75"},{"size":2033,"mtime":1628431320344,"results":"104","hashOfConfig":"75"},{"size":391,"mtime":1611809625614,"results":"105","hashOfConfig":"75"},{"size":2742,"mtime":1629170912428,"results":"106","hashOfConfig":"75"},{"size":4437,"mtime":1612256477904,"results":"107","hashOfConfig":"75"},{"size":499,"mtime":1612021206837,"results":"108","hashOfConfig":"75"},{"size":396,"mtime":1611822589287,"results":"109","hashOfConfig":"75"},{"size":379,"mtime":1611887208678,"results":"110","hashOfConfig":"75"},{"size":220,"mtime":1611889589251,"results":"111","hashOfConfig":"75"},{"size":379,"mtime":1612088497120,"results":"112","hashOfConfig":"75"},{"size":6539,"mtime":1628837437009,"results":"113","hashOfConfig":"75"},{"size":3827,"mtime":1628837361638,"results":"114","hashOfConfig":"75"},{"size":10713,"mtime":1629781216476,"results":"115","hashOfConfig":"75"},{"size":1759,"mtime":1628134710228,"results":"116","hashOfConfig":"75"},{"size":975,"mtime":1628743494809,"results":"117","hashOfConfig":"75"},{"size":1259,"mtime":1612312156147,"results":"118","hashOfConfig":"75"},{"size":408,"mtime":1612088419622,"results":"119","hashOfConfig":"75"},{"size":250,"mtime":1612088403076,"results":"120","hashOfConfig":"75"},{"size":2295,"mtime":1628744407732,"results":"121","hashOfConfig":"75"},{"size":487,"mtime":1612141196612,"results":"122","hashOfConfig":"75"},{"size":10239,"mtime":1630321330169,"results":"123","hashOfConfig":"75"},{"size":9549,"mtime":1630379481981,"results":"124","hashOfConfig":"75"},{"size":3147,"mtime":1628649252294,"results":"125","hashOfConfig":"75"},{"size":1381,"mtime":1628644646764,"results":"126","hashOfConfig":"75"},{"size":1437,"mtime":1628649292116,"results":"127","hashOfConfig":"75"},{"size":698,"mtime":1612251042608,"results":"128","hashOfConfig":"75"},{"size":1956,"mtime":1614030932579,"results":"129","hashOfConfig":"75"},{"size":3595,"mtime":1628837390281,"results":"130","hashOfConfig":"75"},{"size":405,"mtime":1613173279348,"results":"131","hashOfConfig":"75"},{"size":1413,"mtime":1613285314789,"results":"132","hashOfConfig":"75"},{"size":561,"mtime":1613264520935,"results":"133","hashOfConfig":"75"},{"size":7607,"mtime":1628825042519,"results":"134","hashOfConfig":"75"},{"size":10230,"mtime":1631240611987,"results":"135","hashOfConfig":"75"},{"size":7505,"mtime":1628734602629,"results":"136","hashOfConfig":"75"},{"size":2418,"mtime":1629158334353,"results":"137","hashOfConfig":"75"},{"size":1878,"mtime":1629158280612,"results":"138","hashOfConfig":"75"},{"size":2869,"mtime":1629158168156,"results":"139","hashOfConfig":"75"},{"size":404,"mtime":1628788106330,"results":"140","hashOfConfig":"75"},{"size":3652,"mtime":1629013094082,"results":"141","hashOfConfig":"75"},{"size":4851,"mtime":1630296925043,"results":"142","hashOfConfig":"75"},{"size":1585,"mtime":1628873754821,"results":"143","hashOfConfig":"75"},{"size":395,"mtime":1628876227672,"results":"144","hashOfConfig":"75"},{"size":415,"mtime":1629784335300,"results":"145","hashOfConfig":"75"},{"size":190,"mtime":1629784386865,"results":"146","hashOfConfig":"75"},{"size":11596,"mtime":1630909800157,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"13s4y1q",{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"150"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"150"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"150"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"150"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"150"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"150"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"150"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"150"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"150"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"150"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["306","307"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["308","309","310","311","312","313","314","315"],"/*\n- Comp init => render => all useEffect\n- loading wont work using states, use indicator on draw button instead\n- All useEffect called when first loaded (eg: from Home to graphSNP page)\n- certain useEffect called when any deppendent useEffect affected\n*/\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { Col, Empty, Button, message } from \"antd\";\nimport { createGraphObject } from \"../utils/create_graphObject\";\nimport { createCytoscapeData } from \"../utils/create_cyData\";\nimport { createClusterCSVFile } from \"../utils/create_exportFile\";\nimport { findClusters } from \"../utils//find_clusters\";\nimport cytoscape from \"cytoscape\";\nimport cy_svg from \"cytoscape-svg\";\nimport { LoadingOutlined, ReloadOutlined } from \"@ant-design/icons\";\nimport {\n  createColorLUT,\n  getColorByColorIndex,\n  getEdgeAndArrowWidth,\n  downloadFileAsText,\n} from \"../utils/utils\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport {\n  hmmMatrixToStore,\n  graphObjectToStore,\n  graphClusterToStore,\n} from \"../action/graphMatrixActions\";\nimport {\n  changeIsUserReDrawSetting,\n  changeIsUserClusteringSetting,\n  changeIsUserDownloadingSetting,\n  changeChartSessionSetting,\n  changeIsUserLoadSessionSetting,\n  changeSelectedNode,\n} from \"../action/graphSettingsActions\";\nimport isShowingLoadingModalToStore from \"../action/isShowingLoadingModalActions\";\n\nconst _ = require(\"lodash\");\nconst fcose = require(\"cytoscape-fcose\");\nconst spread = require(\"cytoscape-spread\");\ncytoscape.use(fcose); // register extension\ncytoscape.use(spread); // register extension\ncytoscape.use(cy_svg); // register extension\n\nconst GraphContainer = (props) => {\n  //state\n  const [graphIsAvailable, setGraphIsAvailable] = useState(false);\n  const [processingGraph, setProcessingGraph] = useState(false);\n\n  //Settings\n  const graph_typeOfAnalysis = props.graphSettings.typeOfAnalysis;\n  const graph_method = props.graphSettings.method;\n  const graph_layout = props.graphSettings.layout;\n  const graph_isUserReDraw = props.graphSettings.isUserReDraw;\n  const graph_isUserFilterEdges = props.graphSettings.isUserFilteringEdge;\n  const graph_edgeFilterCutoff = graph_isUserFilterEdges\n    ? props.graphSettings.edgeFilterCutoff\n    : null;\n  const graph_clusterMethod = props.graphSettings.clusterMethod;\n  const graph_isUserClustering = props.graphSettings.isUserClustering;\n  const graph_isEdgesHideByCutoff = props.graphSettings.isHideEdgesByCutoff;\n  const graph_edgesHideCutoff = props.graphSettings.hiddenEdgesCutoff;\n  const graph_colorNodeBy = props.graphSettings.colorNodedBy;\n  const graph_isEdgeScaled = props.graphSettings.isEdgeScaled;\n  const graph_edgeScaleFactor = props.graphSettings.edgeScaleFactor;\n  const graph_isUserDownloading = props.graphSettings.isUserDownloading;\n  const trans_locLevel = props.graphSettings.transIncludeLocLevel;\n\n  //Internal setting\n  const cy_layout = { name: graph_layout, animate: false, fit: true };\n  const cytoscapeRef = useRef(null);\n  const prevSessionData = props.graphSettings.chartSession;\n  const isUserReloadSession = props.graphSettings.isUserReloadSession;\n\n  //Automatic reloading if previous graph session data is a available\n\n  useEffect(() => {\n    if (graph_isUserReDraw) {\n      //console.log(\"1. START: user click draw ##\", +new Date());\n      //setProcessingGraph(true); // set time out to delay drawing and let processing graph state run\n\n      setTimeout(function () {\n        //console.log(\"2. setTimeout start and draw start ##\", +new Date());\n        draw();\n        //console.log(\"8. Draw end in setTimeout ##\", +new Date());\n        setGraphIsAvailable(true);\n        //setProcessingGraph(false);\n        props.changeIsUserReDrawSetting(false);\n        props.isShowingLoadingModalToStore(false);\n        //console.log(\"9. SetTimeout end ##\", +new Date());\n      }, 100);\n    }\n  }, [graph_isUserReDraw]);\n\n  useEffect(() => {\n    if (isUserReloadSession) {\n      //setProcessingGraph(true);\n      setTimeout(() => {\n        redraw();\n        setGraphIsAvailable(true);\n        //setProcessingGraph(false);\n        props.changeIsUserLoadSessionSetting(false);\n        props.isShowingLoadingModalToStore(false);\n      }, 100);\n    }\n  }, [isUserReloadSession]);\n\n  useEffect(() => {\n    if (graph_isUserDownloading) {\n      let cy = cytoscapeRef.current;\n      let svgContent = cy.svg({ scale: 1, full: true });\n      downloadFileAsText(\"GraphSNP-cytoscape-svg.svg\", svgContent);\n      props.changeIsUserDownloadingSetting(false);\n    }\n  }, [graph_isUserDownloading]);\n\n  useEffect(() => {\n    if (graph_isUserClustering && props.graphObject) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        //call clustering\n        let clusters = findClusters(props.graphObject, graph_clusterMethod);\n        setProcessingGraph(false);\n        message.success(\n          `Found ${clusters.group.length} clusters in the graph`,\n          2\n        );\n        //update colorLUT by new clusters color\n        let colorLUT_byCluster = createColorLUT(clusters.members, \"clusterID\");\n        let newColorLUT = _.cloneDeep(props.colorLUT);\n        if (newColorLUT) {\n          let updated_newColorLUT = {\n            ...newColorLUT,\n            clusterID: colorLUT_byCluster,\n          };\n          newColorLUT = updated_newColorLUT;\n        } else {\n          newColorLUT = { clusterID: colorLUT_byCluster };\n        }\n        props.colorLUTtoStore(newColorLUT);\n\n        props.graphClusterToStore(clusters);\n        props.changeIsUserClusteringSetting(false);\n      }, 100);\n    }\n  }, [graph_clusterMethod, graph_isUserClustering]);\n\n  useEffect(() => {\n    if (graph_layout && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      let layout = {\n        name: graph_layout,\n        animate: false,\n        fit: true,\n        prelayout: false,\n      };\n      cy.layout(layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_layout]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgeScaled) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"edge\"\n              );\n            },\n            \"arrow-scale\": function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"arrow\"\n              );\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: 3,\n            \"arrow-scale\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [graph_isEdgeScaled, graph_edgeScaleFactor]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgesHideByCutoff) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: function (o) {\n              let edgeWeight = o.data(\"weight\");\n              if (graph_isEdgesHideByCutoff) {\n                let res =\n                  edgeWeight < graph_edgesHideCutoff.min ||\n                  edgeWeight > graph_edgesHideCutoff.max\n                    ? 0\n                    : 1;\n                return res;\n              } else {\n                return 1;\n              }\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_isEdgesHideByCutoff, graph_edgesHideCutoff]);\n\n  useEffect(() => {\n    if (graph_colorNodeBy && props.colorLUT && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"node\")\n        .style({\n          \"background-color\": function (d) {\n            let isolate_name = d.data(\"id\");\n            let col = getColorByColorIndex(\n              isolate_name,\n              graph_colorNodeBy,\n              props.colorLUT\n            );\n            return col;\n          },\n        })\n        .update();\n\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_colorNodeBy, props.colorLUT]);\n\n  const reloadChartHandler = (val) => {\n    if (!isUserReloadSession) {\n      props.isShowingLoadingModalToStore(true);\n      props.changeIsUserLoadSessionSetting(true);\n    }\n  };\n\n  //DRAW\n  function draw() {\n    //console.log(\"3. Start drawing, creating hammingMatrix ##\", +new Date());\n    //check hamming distance ? if not create one, send to store at the end.\n    const hammingMatrix = !props.hammMatrix\n      ? new HammingMatrix(props.sequence).getHammingMatrix()\n      : props.hammMatrix;\n\n    const seq_len = props.sequence ? props.sequence[0].size : null;\n\n    //Look at param (method, seq, ), generate graph object: util functions\n    //graphObject: {type:'mcg', mapData: edgeList object}\n    //console.log(\"4. Creating graph object ##\", +new Date());\n\n    const graphObject = createGraphObject(\n      hammingMatrix,\n      graph_method,\n      graph_edgeFilterCutoff,\n      props.categoricalMap,\n      props.patientMovement,\n      props.metadata,\n      trans_locLevel,\n      seq_len\n    );\n\n    //generate cytoscape data\n    if (graphObject && graphObject.nodes && graphObject.edges) {\n      //cytoscapeData = [{data:{id:id, nodeType:'singleton', data:[]}}, { data: {source: s, target: t, weight: w} } ]\n      //console.log(\"5. Creating cytoscape data ##\", +new Date());\n      const cytoscapeData = createCytoscapeData(graphObject);\n\n      //Load and view cytoscape\n      if (cytoscapeData) {\n        //console.log(\"6. Cytoscape data mapping ##\", +new Date());\n        if (prevSessionData) {\n          let cy = prevSessionData;\n          cy.unmount();\n        }\n        const cy = cytoscape({\n          elements: cytoscapeData,\n          container: document.getElementById(\"graph-cont-cytoscape-canvas\"),\n          pannable: true,\n          selected: true,\n          boxSelectionEnabled: false,\n          style: [\n            {\n              selector: \"node\",\n              style: {\n                label: \"data(id)\",\n                \"border-width\": 3,\n                \"border-style\": \"solid\",\n                \"border-color\": \"black\",\n                \"background-color\": function (d) {\n                  if (graph_colorNodeBy && props.colorLUT) {\n                    let isolate_name = d.data(\"id\");\n                    let col = getColorByColorIndex(\n                      isolate_name,\n                      graph_colorNodeBy,\n                      props.colorLUT\n                    );\n                    return col;\n                  } else {\n                    return \"lightgray\";\n                  }\n                },\n              },\n            },\n            {\n              selector: \"edge\",\n              style: {\n                opacity: function (o) {\n                  let edgeWeight = o.data(\"weight\");\n                  //console.log(edgeWeight);\n                  if (graph_isEdgesHideByCutoff) {\n                    let res =\n                      edgeWeight < graph_edgesHideCutoff.min ||\n                      edgeWeight > graph_edgesHideCutoff.max\n                        ? 0\n                        : 1;\n                    return res;\n                  } else {\n                    return 1;\n                  }\n                },\n                label: \"data(weight)\",\n                \"font-size\": \"10px\",\n                \"text-background-color\": \"#F5E372\",\n                color: \"red\",\n                width: function (e) {\n                  return getEdgeAndArrowWidth(\n                    graph_isEdgeScaled,\n                    e.data(\"weight\"),\n                    graph_edgeScaleFactor,\n                    \"edge\"\n                  );\n                },\n                \"target-arrow-color\": \"black\",\n                \"target-arrow-shape\": (e) => {\n                  return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n                },\n                \"curve-style\": \"bezier\",\n                \"arrow-scale\": function (e) {\n                  return getEdgeAndArrowWidth(\n                    graph_isEdgeScaled,\n                    e.data(\"weight\"),\n                    graph_edgeScaleFactor,\n                    \"arrow\"\n                  );\n                },\n              },\n            },\n            {\n              selector: \":selected\",\n              style: {\n                \"border-width\": \"5\",\n                \"border-color\": \"red\",\n                \"border-style\": \"dashed\",\n                padding: \"8px\",\n              },\n            },\n          ],\n        });\n\n        if (graph_layout === \"spread\") {\n          let diverted_layout = {\n            name: \"cose\",\n            animate: false,\n            fit: true,\n            prelayout: false,\n          };\n\n          cy.layout(diverted_layout).run();\n        } else {\n          //console.log(\"7. Cytoscape running with layout ##\", +new Date());\n          cy.layout(cy_layout).run();\n        }\n        //node event click listener\n        cy.selectionType(\"single\");\n        cy.nodes().bind(\"tap\", function (evt) {\n          if (props.metadata) {\n            // get isolate object by source name\n            let clickedNode = [evt.target.data(\"id\")];\n            props.changeSelectedNode(clickedNode);\n          }\n        });\n        //click on background listener\n        cy.on(\"tap\", function (evt) {\n          if (evt.target === cy) {\n            props.changeSelectedNode([]);\n          }\n        });\n        //cy.layout(cy_layout).run();\n        //save current Ref\n        //save current Ref\n        cytoscapeRef.current = cy;\n\n        //==== SEND TO STORE ====\n        if (props.hammMatrix) {\n          props.hmmMatrixToStore(hammingMatrix);\n        }\n        props.graphObjectToStore(graphObject);\n        props.changeChartSessionSetting(cy);\n      }\n    }\n  }\n  function redraw() {\n    let cy = prevSessionData;\n    cy.unmount();\n    cy.mount(document.getElementById(\"graph-cont-cytoscape-canvas\"));\n    cytoscapeRef.current = cy;\n  }\n\n  // function redraw() {\n  //   const cytoscapeData = prevSessionData;\n\n  //   //ReLoad and view cytoscape\n  //   if (cytoscapeData) {\n  //     const cy = cytoscape({\n  //       elements: cytoscapeData,\n  //       container: document.getElementById(\"graph-cont-cytoscape-canvas\"),\n  //       pannable: true,\n  //       selected: true,\n  //       boxSelectionEnabled: false,\n  //       style: [\n  //         {\n  //           selector: \"node\",\n  //           style: {\n  //             label: \"data(id)\",\n  //             \"border-width\": 3,\n  //             \"border-style\": \"solid\",\n  //             \"border-color\": \"black\",\n  //             \"background-color\": \"lightgray\",\n  //           },\n  //         },\n  //         {\n  //           selector: \"edge\",\n  //           style: {\n  //             opacity: function (o) {\n  //               let edgeWeight = o.data(\"weight\");\n  //               //console.log(edgeWeight);\n  //               if (graph_isEdgesHideByCutoff) {\n  //                 let res =\n  //                   edgeWeight < graph_edgesHideCutoff.min ||\n  //                   edgeWeight > graph_edgesHideCutoff.max\n  //                     ? 0\n  //                     : 1;\n  //                 return res;\n  //               } else {\n  //                 return 1;\n  //               }\n  //             },\n  //             label: \"data(weight)\",\n  //             \"font-size\": \"10px\",\n  //             \"text-background-color\": \"#F5E372\",\n  //             color: \"red\",\n  //             width: function (e) {\n  //               return getEdgeAndArrowWidth(\n  //                 graph_isEdgeScaled,\n  //                 e.data(\"weight\"),\n  //                 graph_edgeScaleFactor,\n  //                 \"edge\"\n  //               );\n  //             },\n  //             \"target-arrow-color\": \"black\",\n  //             \"target-arrow-shape\": (e) => {\n  //               return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n  //             },\n  //             \"curve-style\": \"bezier\",\n  //             \"arrow-scale\": function (e) {\n  //               return getEdgeAndArrowWidth(\n  //                 graph_isEdgeScaled,\n  //                 e.data(\"weight\"),\n  //                 graph_edgeScaleFactor,\n  //                 \"arrow\"\n  //               );\n  //             },\n  //           },\n  //         },\n  //         {\n  //           selector: \":selected\",\n  //           style: {\n  //             \"border-width\": \"5\",\n  //             \"border-color\": \"red\",\n  //             \"border-style\": \"dashed\",\n  //             padding: \"8px\",\n  //           },\n  //         },\n  //       ],\n  //     });\n  //     if (graph_layout === \"spread\") {\n  //       let diverted_layout = {\n  //         name: \"cose\",\n  //         animate: false,\n  //         fit: true,\n  //         prelayout: false,\n  //       };\n  //       cy.layout(diverted_layout).run();\n  //     } else {\n  //       cy.layout(cy_layout).run();\n  //     }\n  //     //node event click listener\n  //     cy.selectionType(\"single\");\n  //     cy.nodes().bind(\"tap\", function (evt) {\n  //       let clickedNode = [evt.target.data(\"id\")];\n  //       props.changeSelectedNode(clickedNode);\n  //     });\n  //     //click on background listener\n  //     cy.on(\"tap\", function (evt) {\n  //       if (evt.target === cy) {\n  //         props.changeSelectedNode([]);\n  //       }\n  //     });\n  //     //cy.layout(cy_layout).run();\n  //     //save current Ref\n  //     cytoscapeRef.current = cy;\n  //   }\n  // }\n\n  return (\n    <React.Fragment>\n      <Col span={24} style={{ position: \"relative\" }}>\n        <div\n          id=\"graph-cont-is-empty\"\n          style={{ display: graphIsAvailable ? \"none\" : \"block\" }}\n        >\n          <Empty\n            description={\n              prevSessionData ? \"Reload previous graph\" : \"No graph. Create one\"\n            }\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          >\n            {prevSessionData && (\n              <Button onClick={reloadChartHandler} type=\"primary\">\n                <ReloadOutlined />\n              </Button>\n            )}\n          </Empty>\n        </div>\n        <div\n          id=\"graph-cont-is-processing\"\n          style={{ display: processingGraph ? \"block\" : \"none\" }}\n        >\n          <p\n            style={{\n              textAlign: \"right\",\n            }}\n          >\n            <span>\n              <LoadingOutlined\n                style={{\n                  fontSize: 18,\n                }}\n                spin\n              />\n            </span>{\" \"}\n            Creating graph ...\n          </p>\n        </div>\n      </Col>\n      <div id=\"graph-cont-cytoscape-canvas\"></div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    patientMovement: state.patientMovement,\n    sequence: state.sequence,\n    graphObject: state.graphObject,\n    hammMatrix: state.hammMatrix,\n    graphSettings: state.graphSettings,\n    colorLUT: state.colorLUT,\n    graphClusters: state.graphClusters,\n    categoricalMap: state.categoricalMap,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeIsUserClusteringSetting,\n      changeIsUserReDrawSetting,\n      hmmMatrixToStore,\n      graphObjectToStore,\n      graphClusterToStore,\n      colorLUTtoStore,\n      changeIsUserDownloadingSetting,\n      changeChartSessionSetting,\n      changeIsUserLoadSessionSetting,\n      changeSelectedNode,\n      isShowingLoadingModalToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphContainer);\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",["316","317","318"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],["319","320"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js",["321"],"import React from \"react\";\nimport { Upload, Button, message, Tooltip } from \"antd\";\nimport {\n  StopOutlined,\n  CheckCircleFilled,\n  DeleteFilled,\n  DeleteOutlined,\n  QuestionCircleOutlined,\n} from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { sequenceToStore, isinputLoadingToStore } from \"../action/inputActions\";\nimport { hmmMatrixToStore } from \"../action/graphMatrixActions\";\nimport { snpsLoader } from \"./util_inputLoaders\";\n\nconst { Dragger } = Upload;\n\nconst InputLoader = (props) => {\n  //console.log(\"Input Loader - init\");\n\n  const beforeUploadHandler = (file) => {\n    if (file) {\n      let inputType = \"seq\";\n\n      //check extension\n      //check content\n\n      switch (inputType) {\n        case \"seq\":\n          const reader = new FileReader();\n          reader.readAsText(file);\n          //console.log(reader.readAsText(file));\n          props.isinputLoadingToStore(true);\n          reader.onloadend = function (evt) {\n            console.log(evt);\n            const dataText = evt.target.result;\n            snpsLoader(\n              dataText,\n              props.sequenceToStore,\n              props.hmmMatrixToStore,\n              props.isinputLoadingToStore\n            );\n          };\n          break;\n\n        default:\n          message.error(\"Invalid input file\", 0.5);\n          break;\n      }\n    }\n    return false; //to avoid upload action (we parse and load it to store instead)\n  };\n\n  const getIconStatus = function () {\n    if (props.sequence) {\n      return <CheckCircleFilled style={{ fontSize: \"14pt\" }} />;\n    } else {\n      return <StopOutlined />;\n    }\n  };\n\n  const removeSNPHandler = (val) => {\n    props.sequenceToStore(null);\n    props.hmmMatrixToStore(null);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Dragger\n          accept={\".fa, .fasta, .fna, .mfa\"}\n          showUploadList={false}\n          style={{\n            backgroundColor: \"transparent\",\n            height: \"500px\",\n          }}\n          name=\"file\"\n          multiple={false}\n          action=\"dummy-post\"\n          beforeUpload={beforeUploadHandler}\n        >\n          <div id=\"input-loader-snps\">\n            <Button\n              id=\"input-loader-button-snps\"\n              shape={\"round\"}\n              size={\"large\"}\n            >\n              {getIconStatus()} SNPs {\"  \"}\n              <span style={{ marginLeft: \"5px\" }}>\n                <Tooltip\n                  title=\"Input or drag and drop non-ambiguous multi-fasta SNPs alignment file here\"\n                  placement=\"rightTop\"\n                >\n                  <QuestionCircleOutlined\n                    style={{ fontSize: \"14px\", color: \"white\" }}\n                  />\n                </Tooltip>\n              </span>\n            </Button>\n          </div>\n        </Dragger>\n        <div className=\"remove-button-container\">\n          <Button\n            disabled={props.sequence ? false : true}\n            title={\"Remove loaded SNPs alignment\"}\n            type={\"ghost\"}\n            className=\"input-loader-remove-button \"\n            shape={\"circle\"}\n            size={\"small\"}\n            onClick={removeSNPHandler}\n          >\n            <DeleteOutlined />\n          </Button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    sequence: state.sequence,\n    patientMovement: state.patientMovement,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      sequenceToStore,\n      isinputLoadingToStore,\n      hmmMatrixToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputLoader);\n\n/*\nasync function readFastaToJSON(fastaString) {\n    if (props.sequence === null) {\n      //console.log(\"async\");\n      const sequenceJSON = await fastaToJson(fastaString);\n      const snpsSequence = [];\n      if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n        //console.log(sequenceJSON);\n        //check all error message, alert, and no seq to store\n        let isolateName = {};\n        let seqLen = [];\n        let noErr = true;\n        for (let index = 0; index < sequenceJSON.length; index++) {\n          let messages = sequenceJSON[index].messages;\n          let parsedSequence = sequenceJSON[index].parsedSequence;\n          let success = sequenceJSON[index].success;\n          //tracking size\n          if (seqLen.indexOf(parsedSequence.size) === -1) {\n            seqLen.push(parsedSequence.size);\n          }\n          //check success parsing\n          if (!success) {\n            noErr = false;\n            alert(\"Parsing error:\", parsedSequence.name);\n            break;\n          }\n          //check err messages\n          if (messages.length > 0) {\n            noErr = false;\n            alert(messages[0]);\n            break;\n          }\n          //check sequence length\n          if (seqLen.length > 1) {\n            noErr = false;\n            alert(\"Size error: Alignment required sequence with same length\");\n            break;\n          }\n          //check duplicated isolate\n          if (!isolateName[parsedSequence.name]) {\n            isolateName[parsedSequence.name] = true;\n          } else {\n            noErr = false;\n            alert(\"Sequence error: Duplicated sequence\");\n            break;\n          }\n          //making snpsSequence\n          if (noErr) {\n            snpsSequence.push({\n              id: parsedSequence.name,\n              size: parsedSequence.size,\n              sequence: parsedSequence.sequence.toLowerCase(),\n            });\n          }\n        }\n\n        if (noErr) {\n          //display success message\n          message.success(\n            \"The sequences have been loaded, now building distance matrix ..\",\n            1\n          );\n          setTimeout(() => {\n            const hammingMatrix = new HammingMatrix(\n              snpsSequence\n            ).getHammingMatrix();\n            message.success(\n              \"Pair-wise SNP distance matrix has been created\",\n              1\n            );\n            props.sequenceToStore(snpsSequence);\n            props.hmmMatrixToStore(hammingMatrix);\n            props.isinputLoadingToStore(false);\n          }, 100);\n\n          //load to store\n        }\n      } else {\n        alert(\"Error: Required at least 2 sequences\");\n      }\n    } else {\n      alert(\"Sequences have been loaded. Refresh to re-load a new one\");\n    }\n  }\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js",["322"],"import { Row, Col } from \"antd\";\nimport React from \"react\";\nimport \"./style_home.css\";\nconst TitleHeaderComponent = (props) => {\n  return (\n    <React.Fragment>\n      <Col sm={16} id=\"title-header-component\">\n        <p>\n          GraphSNP: Graph-based outbreak cluster and transmission detection and\n          visualization using single-nucleotide polymorphism (SNP) in web\n          browser\n        </p>\n      </Col>\n    </React.Fragment>\n  );\n};\n\nexport default TitleHeaderComponent;\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js",["323","324"],"import React from \"react\";\nimport { Button, Row, Col, Select, Divider, Tooltip, Modal, Spin } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { QuestionCircleOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport {\n  dist_changeDataToDisplay,\n  dist_changeDataColumn,\n  dist_changeDataColumnLevel,\n  dist_changeChartOrientation,\n  dist_changeExportFormat,\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n} from \"../action/snpdistSettingsActions\";\n\nimport { filterUnique } from \"../utils/utils\";\n\nconst { Option } = Select;\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 34 }} spin />;\n\nconst SNPdistSettings = (props) => {\n  //GLOBAL\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //STATES\n\n  //SETTINGS\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const chartOrientation = props.snpDistSettings.chartOrientation;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n\n  //HANDLERS\n  const dataToDisplayHandler = (val) => {\n    props.dist_changeDataToDisplay(val);\n  };\n\n  const dataColumnHandler = (val) => {\n    props.dist_changeDataColumn(val);\n  };\n\n  const dataColumnLevelHandler = (val) => {\n    props.dist_changeDataColumnLevel(val);\n  };\n\n  const chartOrientationHandler = (val) => {\n    props.dist_changeChartOrientation(val);\n  };\n\n  const drawChartHandler = (val) => {\n    if (!isUserDrawChart) {\n      props.dist_changeIsUserDraw(true);\n    }\n  };\n\n  const exportFormatHandler = (val) => {\n    props.dist_changeExportFormat(val);\n  };\n\n  const exportChartHandler = (val) => {\n    console.log(\"downlaod handlers\");\n    if (!isUserExportSnpDist) {\n      props.dist_changeIsUserExport(true);\n    }\n  };\n  const getMetadataColumn = function (header, i) {\n    const excluded_headers = [\"sample_date\", \"patient_id\"];\n    if (excluded_headers.indexOf(header) === -1) {\n      return (\n        <Option key={i} disabled={false} value={header}>\n          {header}\n        </Option>\n      );\n    }\n  };\n\n  const getMetadataColumnLevels_arr = function (metadata_arr, dataColumn) {\n    if (metadata_arr && dataColumn) {\n      let dataColumnLevels_arr = metadata_arr\n        .map((d) => d[dataColumn])\n        .filter(filterUnique);\n\n      if (\n        Array.isArray(dataColumnLevels_arr) &&\n        dataColumnLevels_arr.length > 0\n      ) {\n        dataColumnLevels_arr.unshift(\"intra-inter-group\");\n        return dataColumnLevels_arr;\n      } else {\n        return [\"#na_exluded!\"];\n      }\n    } else {\n      return [\"#na_exluded!\"];\n    }\n  };\n\n  const getMetadataColumnLevel = function (level, idx) {\n    const excluded_headers = [\"#na_exluded!\"];\n    if (excluded_headers.indexOf(level) === -1) {\n      return (\n        <Option key={idx} disabled={false} value={level}>\n          {level}\n        </Option>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xs={24} id=\"header-content\">\n          <Modal\n            visible={props.isShowingLoadingModal}\n            closable={false}\n            centered={true}\n            width={0}\n            footer={null}\n            bodyStyle={{\n              textAlign: \"center\",\n              padding: \"0px\",\n            }}\n          >\n            <Spin\n              indicator={loadingIcon}\n              style={{ color: \"white\" }}\n              tip=\"Processing...\"\n              size=\"large\"\n            />\n          </Modal>\n        </Col>\n      </Row>\n      <Row gutter={[8, 8]}>\n        <Col span={24}>\n          <h5>Bar chart settings</h5>\n          <p>\n            Select isolates{\" \"}\n            <span>\n              <Tooltip\n                title=\"Select group of isolates for bar chart visualization.\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            value={dataToDisplay}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={dataToDisplayHandler}\n          >\n            <Option value=\"all\">All isolates</Option>\n            <Option\n              disabled={props.metadata ? false : true}\n              value=\"per-category\"\n            >\n              Specific group (metadata)\n            </Option>\n          </Select>\n        </Col>\n\n        {dataToDisplay === \"per-category\" &&\n          props.hammingMatrix &&\n          props.metadata && (\n            <Col span={24}>\n              <p>\n                Select metadata column{\" \"}\n                <span>\n                  <Tooltip\n                    title=\"Column in metadata which group of isolates to be displayed\"\n                    placement=\"rightTop\"\n                  >\n                    <QuestionCircleOutlined style={{ color: \"red\" }} />\n                  </Tooltip>\n                </span>\n              </p>\n              <Select\n                value={dataColumn}\n                style={{ width: \"100%\" }}\n                disabled={\n                  dataToDisplay === \"per-category\" &&\n                  props.hammingMatrix &&\n                  props.metadata\n                    ? false\n                    : true\n                }\n                onChange={dataColumnHandler}\n              >\n                {props.colorLUT && Object.keys(props.colorLUT)\n                  ? Object.keys(props.colorLUT).map((k, i) => {\n                      return getMetadataColumn(k, i);\n                    })\n                  : [\"na\"].map((l, j) => {\n                      return (\n                        <Option key={j} disabled={false} value={l}>\n                          {l}\n                        </Option>\n                      );\n                    })}\n              </Select>\n            </Col>\n          )}\n\n        {dataToDisplay === \"per-category\" &&\n          dataColumn &&\n          props.metadata &&\n          metadata_arr && (\n            <Col span={24}>\n              <p>\n                Select group{\" \"}\n                <span>\n                  <Tooltip\n                    title=\"Categorical group from the selected metadata column\"\n                    placement=\"rightTop\"\n                  >\n                    <QuestionCircleOutlined style={{ color: \"red\" }} />\n                  </Tooltip>\n                </span>\n              </p>\n              <Select\n                value={dataColumnLevel}\n                style={{ width: \"100%\" }}\n                disabled={\n                  dataToDisplay !== \"all\" &&\n                  dataColumn &&\n                  props.metadata &&\n                  metadata_arr\n                    ? false\n                    : true\n                }\n                onChange={dataColumnLevelHandler}\n              >\n                {dataColumn && metadata_arr\n                  ? getMetadataColumnLevels_arr(metadata_arr, dataColumn).map(\n                      (e, x) => {\n                        return getMetadataColumnLevel(e, x);\n                      }\n                    )\n                  : [\"na\"].map((l, j) => {\n                      return (\n                        <Option key={j} disabled={false} value={l}>\n                          {l}\n                        </Option>\n                      );\n                    })}\n              </Select>\n            </Col>\n          )}\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammingMatrix ? false : true}\n            onClick={drawChartHandler}\n            type=\"primary\"\n          >\n            Create chart\n          </Button>\n        </Col>\n\n        <Divider style={{ margin: \"10px 0px 0px 0px\" }} />\n\n        <Col span={24}>\n          <h5>Download settings</h5>\n          <p>\n            Type{\" \"}\n            <span>\n              <Tooltip\n                title=\"Type of file to be downloaded: Table of pairwise SNP distances (CSV) or Displayed bar chart (SVG)\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            disabled={props.hammingMatrix ? false : true}\n            value={snpDistExportFormat}\n            onChange={exportFormatHandler}\n            style={{ width: \"100%\" }}\n          >\n            <Option\n              disabled={props.hammingMatrix ? false : true}\n              value=\"symSnpDist\"\n            >\n              Table of pairwise SNP distances (CSV)\n            </Option>\n            <Option value=\"barChartSvg\">Bar chart (SVG)</Option>\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammingMatrix ? false : true}\n            onClick={exportChartHandler}\n            type=\"primary\"\n          >\n            Download\n          </Button>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    colorLUT: state.colorLUT,\n    metadata: state.metadata,\n    isShowingLoadingModal: state.isShowingLoadingModal,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeDataToDisplay,\n      dist_changeDataColumn,\n      dist_changeDataColumnLevel,\n      dist_changeChartOrientation,\n      dist_changeExportFormat,\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistSettings);\n\n/*\n<Col span={24}>\n          <p>Chart(s) orientation</p>\n          <Select\n            value={chartOrientation}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={chartOrientationHandler}\n          >\n            <Option value=\"horizontal\">Horizontal</Option>\n            <Option value=\"vertical\">Vertical</Option>\n          </Select>\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js",["325","326","327","328","329","330","331","332","333"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Row, Col, Empty, Button } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport \"./style_snpDist.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n  dist_changeIsUserLoadSession,\n  dist_changeChartSession,\n} from \"../action/snpdistSettingsActions\";\nimport isShowingLoadingModalToStore from \"../action/isShowingLoadingModalActions.js\";\nimport * as d3Select from \"d3-selection\";\n//import useResizeObserver from \"../hooks/hook_resizeObserver\"; //Broken\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport { vh, vw, downloadSVG, filterUnique } from \"../utils/utils\";\nimport { createBarPlot_all, recreateChart } from \"./chart_barplot_all\";\nimport {\n  createBar_intraInter,\n  recreateBar_intraInter,\n} from \"./chart_barplot_intra_inter\";\nimport { createSNPdistCSVFile } from \"../utils/create_exportFile\";\n\nconst _ = require(\"lodash\");\n\nconst SNPdistViewer = (props) => {\n  //Ref\n  const chartContainerRef = useRef();\n  const snpdistSVGRef = useRef();\n\n  //Drawing constructor\n  const dim_w = vw(100) - 200 - 20; //200 is sider width, 20 is just a nice margin\n  const dim_h = vh(100) - 120 - 20;\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\n  const chartArea_width = dim_w - margin.left - margin.right;\n  const chartArea_height = dim_h - margin.top - margin.bottom;\n\n  //States\n  //state\n  const [chartIsDisplayed, setChartIsDisplayed] = useState(false);\n\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //Settings\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const chartOrientation = props.snpDistSettings.chartOrientation;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n  const prevSessionData = props.snpDistSettings.chartSession;\n  const isUserReloadSession = props.snpDistSettings.isUserReloadSession;\n\n  //Automatic reload if we have previous session\n  if (prevSessionData) {\n    //check the method dataColumnLevel: intra_inter_group\n    setTimeout(() => {\n      redraw();\n      setChartIsDisplayed(true);\n    }, 10);\n  }\n\n  //UseEffect\n  useEffect(() => {\n    if (isUserDrawChart) {\n      props.isShowingLoadingModalToStore(true);\n      setTimeout(() => {\n        draw();\n        setChartIsDisplayed(true);\n        props.dist_changeIsUserDraw(false);\n        props.isShowingLoadingModalToStore(false);\n      }, 10);\n    }\n  }, [isUserDrawChart]);\n\n  useEffect(() => {\n    if (isUserReloadSession) {\n      setTimeout(() => {\n        redraw();\n        setChartIsDisplayed(true);\n        props.dist_changeIsUserLoadSession(false);\n      }, 10);\n    }\n  }, [isUserReloadSession]);\n\n  useEffect(() => {\n    if (isUserExportSnpDist) {\n      switch (snpDistExportFormat) {\n        case \"symSnpDist\":\n          //prepare data\n          let edgeList = [];\n          let nodeList = [];\n          props.hammingMatrix.forEach((v, k) => {\n            nodeList.push(k);\n            edgeList = edgeList.concat(v);\n          });\n          let snp_dist = new GraphEdgeList(\n            nodeList,\n            edgeList\n          ).getSymetricEdges().edges;\n          createSNPdistCSVFile(snp_dist);\n          props.dist_changeIsUserExport(false);\n          break;\n\n        case \"barChartSvg\":\n          downloadSVG(\"snpdist-chart-svg\");\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [snpDistExportFormat, isUserExportSnpDist]);\n\n  //Functions\n  const reloadChartHandler = (val) => {\n    if (!isUserReloadSession) {\n      props.dist_changeIsUserLoadSession(true);\n    }\n  };\n\n  function getIsolatesByDataColumnAndLevel(meta_arr, dataCol, dataColLevel) {\n    let filteredRec = meta_arr.filter((rec) => {\n      if (rec[dataCol] === dataColLevel) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    let res = filteredRec.map((d) => d.sample_id);\n    return res;\n  }\n\n  //DRAWING\n  function draw() {\n    // console.log(\"draw\", +new Date());\n    //clean previous drawing artifacts\n    d3Select.select(\"#snpdist_svgGroup\").remove();\n\n    //prepare data\n    let edgeList = [];\n    let nodeList = [];\n\n    // console.log(\"edgeList_construction\", +new Date());\n\n    props.hammingMatrix.forEach((v, k) => {\n      nodeList.push(k);\n      edgeList = edgeList.concat(v);\n    });\n\n    // console.log(\"chart_data_construction\", +new Date());\n    let chart_data = new GraphEdgeList(nodeList, edgeList).getSymetricEdges()\n      .edges;\n\n    if (dataToDisplay === \"all\") {\n      // console.log(\"data_list_construction\", +new Date());\n      let data_list = chart_data.map((d) => d.value);\n\n      const svg = d3Select.select(snpdistSVGRef.current);\n      createBarPlot_all(\n        svg,\n        data_list,\n        chartArea_width,\n        chartArea_height,\n        margin,\n        props.dist_changeChartSession\n      );\n    } else {\n      //get column header and level\n      if (metadata_arr && dataColumn && dataColumnLevel) {\n        if (dataColumnLevel === \"intra-inter-group\") {\n          //exclude non-group record e.g null, NA, N/A, #N/A, #NA, \"\", \"null\"\n          let nonGroup_ColLevel = [\n            null,\n            \"NA\",\n            \"N/A\",\n            \"#N/A\",\n            \"#NA\",\n            \"\",\n            \"null\",\n            undefined,\n          ];\n          let groupLUT = new Map();\n          metadata_arr.forEach((d) => {\n            if (nonGroup_ColLevel.indexOf(d[dataColumn]) === -1) {\n              //console.log(d[dataColumn]);\n              groupLUT.set(d.sample_id, d[dataColumn]);\n            }\n          });\n\n          let data_list_intra = [];\n          let data_list_inter = [];\n\n          chart_data.forEach((e) => {\n            //intra\n            let sourceGroup = groupLUT.get(e.source);\n            let targetGroup = groupLUT.get(e.target);\n            if (sourceGroup === targetGroup) {\n              //console.log(\"sama\", sourceGroup, targetGroup);\n              data_list_intra.push(e.value);\n            } else {\n              data_list_inter.push(e.value);\n            }\n          });\n          const svg = d3Select.select(snpdistSVGRef.current);\n          createBar_intraInter(\n            svg,\n            data_list_intra,\n            data_list_inter,\n            chartArea_width,\n            chartArea_height,\n            margin,\n            props.dist_changeChartSession\n          );\n        } else {\n          let includedIsolates = getIsolatesByDataColumnAndLevel(\n            metadata_arr,\n            dataColumn,\n            dataColumnLevel\n          );\n          let filtered_chart_data = chart_data.filter((d) => {\n            if (\n              includedIsolates.indexOf(d.source) !== -1 &&\n              includedIsolates.indexOf(d.target) !== -1\n            ) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n          let data_list = filtered_chart_data.map((d) => d.value);\n          const svg = d3Select.select(snpdistSVGRef.current);\n          createBarPlot_all(\n            svg,\n            data_list,\n            chartArea_width,\n            chartArea_height,\n            margin,\n            props.dist_changeChartSession\n          );\n        }\n      }\n    }\n\n    //set svg attributes\n\n    // if (dataToDisplay === \"all\") {\n    //   // draw a violin + jitter + boxplot for all, color coded by selected column\n    // } else {\n    //   //draw charts based on factors from the column\n    // }\n  }\n\n  //RE-DRAWING\n  function redraw() {\n    // console.log(\"draw\", +new Date());\n    //clean previous drawing artifacts\n    d3Select.select(\"#snpdist_svgGroup\").remove();\n    const svg = d3Select.select(snpdistSVGRef.current);\n    if (dataColumnLevel === \"intra-inter-group\") {\n      console.log(prevSessionData);\n      recreateBar_intraInter(svg, prevSessionData);\n    } else {\n      recreateChart(svg, prevSessionData);\n    }\n  }\n\n  return (\n    <Row>\n      <Col span={24}>\n        <div id=\"bar-chart-cont-is-empty\" style={{ display: \"block\" }}>\n          <Empty\n            style={{ display: chartIsDisplayed ? \"none\" : \"block\" }}\n            description={\n              prevSessionData\n                ? \"Reload previous chart\"\n                : \"No chart, create one \"\n            }\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          ></Empty>\n        </div>\n      </Col>\n      <Col ref={chartContainerRef} sm={24}>\n        <div\n          id=\"snpdist-chart-container\"\n          style={{ height: \"100%\", width: \"100%\" }}\n        >\n          <svg id=\"snpdist-chart-svg\" ref={snpdistSVGRef}></svg>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    metadata: state.metadata,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n      dist_changeChartSession,\n      dist_changeIsUserLoadSession,\n      isShowingLoadingModalToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistViewer);\n\n/*\n<Button onClick={reloadChartHandler} type=\"primary\">\n              Reload\n            </Button>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js",["334","335"],"import React from \"react\";\nimport { Layout, Row, Col, Empty } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport \"./style_snpDist.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport SNPdistSettings from \"./comp_snpDist_settings\";\nimport SNPdistViewer from \"./comp_snpDist_viewer\";\n\nconst { Sider, Content } = Layout;\n\nconst SNPdistance = (props) => {\n  return (\n    <React.Fragment>\n      <Layout>\n        <Sider id=\"snpdist-sider\">\n          <SNPdistSettings />\n        </Sider>\n        <Layout>\n          <Content>{props.hammingMatrix && <SNPdistViewer />}</Content>\n          <Content>\n            {!props.hammingMatrix && (\n              <Col span={24}>\n                <div id=\"bar-chart-cont-is-empty\" style={{ display: \"block\" }}>\n                  <Empty\n                    description={\"No SNPs alignment input: Please load one.\"}\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\n                  />\n                </div>\n              </Col>\n            )}\n          </Content>\n        </Layout>\n      </Layout>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    hammingMatrix: state.hammMatrix,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistance);\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js",["336","337"],"//========================================== SMSO ================================================\n/*\nCreate a directed graph object that edges represent transmissions\nDirected edges was created only if pair-wise of isolates has transmission signal\nTransmission signal were if transmission score >= 1, created by check patient stay overlap hiearchiely\n\n*/\n\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport StayList from \"../model/stayList_prop\";\nimport {\n  getHighestLocation,\n  filterInverseSymEdges,\n  getOverlapLocationLevel,\n} from \"../utils/utils\";\n\nconst moment = extendMoment(Moment);\nconst _ = require(\"lodash\");\n\nexport function createSMSO(\n  rawMatrix,\n  edgeCutoff,\n  rawPatientMovementData,\n  metadata,\n  trans_locLevel\n) {\n  //Assumed the input is true\n  //Take an adjacency matrix of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge <= cut-off\n  let mat = _.cloneDeep(rawMatrix);\n  let patientMovementData = _.cloneDeep(rawPatientMovementData);\n  let edgeList = [];\n  let nodeList = [];\n  mat.forEach((val, key) => {\n    nodeList.push(key);\n    let sortedRow = val;\n\n    //Filter by cut-off\n    if (edgeCutoff !== null && edgeCutoff > 0) {\n      sortedRow = sortedRow.filter((e) => {\n        return e.value <= edgeCutoff;\n      });\n    }\n\n    //merge\n    edgeList = edgeList.concat(sortedRow);\n  });\n\n  //Asses transmission signal on each edge\n  let directedEdges = [];\n  let undirectedEdges = [];\n  if (edgeList.length > 0) {\n    for (let i = 0; i < edgeList.length; i++) {\n      let e = edgeList[i];\n      //get pid\n      let p1_id = metadata.get(e.source).patient_id;\n      let p2_id = metadata.get(e.target).patient_id;\n\n      let p1_sampleDate = moment(metadata.get(e.source).sample_date);\n      let p2_sampleDate = moment(metadata.get(e.target).sample_date);\n\n      //get the stays\n      let p1_stays = patientMovementData.get(p1_id)\n        ? new StayList(patientMovementData.get(p1_id))\n        : null;\n\n      let p2_stays = patientMovementData.get(p2_id)\n        ? new StayList(patientMovementData.get(p2_id))\n        : null;\n\n      //console.log(p1_id, p1_stays_obj instanceof StayList);\n      //console.log(p1_id, p1_stays_obj);\n\n      //if we have stays data for both isolates, do, else return 0 and break\n      //console.log(p1_id, p1_stays);\n      if (\n        p1_stays instanceof StayList &&\n        p2_stays instanceof StayList &&\n        Array.isArray(p1_stays.stays) &&\n        Array.isArray(p2_stays.stays) &&\n        p1_stays.stays.length > 0 &&\n        p2_stays.stays.length > 0\n      ) {\n        //which location level do these patients shared? hospital=1? ward=2? bay=3? bed=4?\n        //console.log(p1_stays_obj);\n        //console.log(p1_stays_obj.getLocationLevel());\n        let p1_locLevel = p1_stays.getLocationLevel();\n        let p2_locLevel = p2_stays.getLocationLevel();\n        let common_locLevel = Math.min(p1_locLevel, p2_locLevel)\n          ? Math.min(p1_locLevel, p2_locLevel)\n          : null;\n\n        //console.log(common_locLevel, p1_locLevel, p2_locLevel);\n\n        //if they dont shared any location, not even hospital, return e as undirected with score = 1 (genomic only)\n        if (!common_locLevel) {\n          e[\"dir\"] = \"none\";\n          e.value = 1;\n          undirectedEdges.push(e);\n        } else {\n          //if they share location, at least hospital\n          //check whether that had any overlap admission\n          let p1_rangeOfStay = p1_stays.getRangeOfStays();\n          let p2_rangeOfStay = p2_stays.getRangeOfStays();\n\n          let p1_range = moment.range(\n            p1_rangeOfStay.start_date.startOf(\"day\"),\n            p1_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let p2_range = moment.range(\n            p2_rangeOfStay.start_date.startOf(\"day\"),\n            p2_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let is_p1_p2_overlap = p1_range.overlaps(p2_range);\n          if (is_p1_p2_overlap) {\n            //they do have overlap\n            //compare the highest common level of location (common_locLevel) for both patients\n\n            if (p2_sampleDate.isAfter(p1_sampleDate, \"day\")) {\n              let transmissionScore = calculateTransScore(\n                p1_id,\n                p2_id,\n                p1_stays,\n                p2_stays,\n                common_locLevel\n              );\n              e[\"dir\"] = \"forward\";\n              e.value = 1 + transmissionScore;\n              directedEdges.push(e);\n            } else {\n              e[\"dir\"] = \"none\";\n              e.value = 1;\n              undirectedEdges.push(e);\n            }\n          } else {\n            //they dont have any overlap\n            e[\"dir\"] = \"none\";\n            e.value = 1;\n            undirectedEdges.push(e);\n          }\n        }\n      } else {\n        e[\"dir\"] = \"none\";\n        e.value = 1;\n        undirectedEdges.push(e);\n      }\n    }\n  }\n\n  //let clean_undirectedEdges = filterInverseSymEdges(undirectedEdges);\n  //merge edges\n\n  directedEdges = directedEdges.filter((e) => {\n    return e.value >= trans_locLevel;\n  });\n\n  //SCORING: 1: snps only, 2: snps+hospital, 3: snps+ ward, 4: snps+bay, 5: snps+bed\n\n  //return nodes and edges with direction property\n  //[edgeList[0]]\n\n  return { nodes: nodeList, edges: directedEdges };\n}\n\nfunction calculateTransScore(p1, p2, p1_stays, p2_stays, common_locLevel) {\n  let scoreOverlap = 0;\n\n  //filter stays to only to the level of both patients shared location\n  let p1_stays_common = p1_stays.stays.filter((s) => {\n    return getHighestLocation(s) === common_locLevel;\n  });\n  let p2_stays_common = p2_stays.stays.filter((st) => {\n    return getHighestLocation(st) === common_locLevel;\n  });\n\n  //console.log(p1_stays_common, p2_stays_common);\n\n  //at the level of\n\n  //compared each stays, get the least common location level, save to store, if we found bigger score, update\n  for (let i = 0; i < p1_stays_common.length; i++) {\n    let p1_stay = p1_stays_common[i];\n    let p1_stay_range = moment.range(\n      p1_stay.start_date.startOf(\"day\"),\n      p1_stay.end_date.endOf(\"day\")\n    );\n\n    for (let j = 0; j < p2_stays_common.length; j++) {\n      let p2_stay = p2_stays_common[j];\n      let p2_stay_range = moment.range(\n        p2_stay.start_date.startOf(\"day\"),\n        p2_stay.end_date.endOf(\"day\")\n      );\n\n      let is_stays_overlap = p1_stay_range.overlaps(p2_stay_range);\n\n      if (is_stays_overlap) {\n        let overlapDur = p1_stay_range.intersect(p2_stay_range).diff(\"days\");\n\n        if (overlapDur <= 7) {\n          //need to find, at which location level they were overlap\n          //check the deepest one\n\n          let loc_comm_score = getOverlapLocationLevel(p1_stay, p2_stay);\n\n          if (p1 === \"P-13\" && p2 === \"P-18\") {\n            //console.log(\"???\", is_stays_overlap);\n            //console.log(\"+++\", overlapDur, \"days\");\n            // console.log(loc_comm_score);\n            // console.log(\n            //   \"p1\",\n            //   p1_stay.hospital_id,\n            //   p1_stay.ward_id,\n            //   p1_stay.bay_id,\n            //   p1_stay.bed_id\n            // );\n            // console.log(\n            //   \"p2\",\n            //   p2_stay.hospital_id,\n            //   p2_stay.ward_id,\n            //   p2_stay.bay_id,\n            //   p2_stay.bed_id\n            // );\n          }\n          if (loc_comm_score > scoreOverlap) {\n            scoreOverlap = loc_comm_score;\n          }\n        }\n      }\n    }\n  }\n  return scoreOverlap;\n  //SCORING: 1: hospital, 2: ward, 3: bay, 4: bed\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js",["338","339","340","341","342"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js",["343"],"//========================================== SeqTrack ================================================\n/* Adapted from SeqTrack algorithm implemented in:\n- paper\n*/\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\n\nconst _ = require(\"lodash\");\nconst moment = extendMoment(Moment);\nvar dbinom = require(\"@stdlib/stats-base-dists-binomial-pmf\");\n\nexport function createSeqTrack(\n  rawMatrix,\n  metadataMap,\n  snpSeq_len,\n  mut_rate = null\n) {\n  let hammingDistMat = _.cloneDeep(rawMatrix);\n  //list of case\n  let cases = []; //list of case object [ {id: caseID, date: caseDate}, ...  ]\n  metadataMap.forEach((val, key) => {\n    cases.push({ id: key, date: val.sample_date });\n  });\n  // console.log(\"cases:\", cases);\n\n  //error check\n  let paramsError = false;\n  //check for consistency of id between sequence and metadata\n  for (let i = 0; i < cases.length; i++) {\n    let aCase = cases[i];\n    let caseInAlignment = hammingDistMat.has(aCase.id);\n    if (!caseInAlignment) {\n      paramsError = true;\n      alert(\n        \"Case id in metadata is not consistent with taxa id in alignment:\" +\n          aCase.id\n      );\n      break;\n    }\n  }\n  //other check\n\n  //Fun 4: Running selAmongAncestors\n  function selAmongAncestors(\n    aCase,\n    ancesWithLowestSNPdist,\n    snpLen = snpSeq_len,\n    mu = mut_rate,\n    metadata = metadataMap\n  ) {\n    //if proximity matrix is available do here:\n    //but not now, because we dont have one in graphsnp\n\n    if (ancesWithLowestSNPdist.length > 1) {\n      let ancesWithLowestSNPdist_wDate = ancesWithLowestSNPdist\n        .map((d) => {\n          d[\"date\"] = moment(metadata.get(d.id).sample_date);\n          return d;\n        })\n        .sort((a, b) => a.date > b.date);\n\n      // if mutation rate not available, choose the oldest one\n\n      if (!mut_rate || !snpLen) {\n        let oldestAnces = ancesWithLowestSNPdist_wDate[0];\n        return { ances: oldestAnces.id, snpDist: oldestAnces.snpDist };\n      } else {\n        console.log(\"with mutation\");\n        let case_date = moment(aCase.date);\n        let ancesWithLowestSNPdist_wDayDiff = ancesWithLowestSNPdist_wDate.map(\n          (a) => {\n            let timeDiff = case_date.diff(a.date, \"days\");\n            let prob = dbinom(a.snpDist, timeDiff * snpLen, mu);\n            a[\"dayDiff\"] = timeDiff;\n            a[\"probability\"] = prob;\n            return a;\n          }\n        );\n        let sorted_ancesWithLowestSNPdist_wDayDiff =\n          ancesWithLowestSNPdist_wDayDiff.sort(\n            (a, b) => a.probability < b.probability\n          );\n        let mostProbableAnces = sorted_ancesWithLowestSNPdist_wDayDiff[0];\n        // improvement: if there are two equaly most probable ances, return all.\n        return {\n          ances: mostProbableAnces.id,\n          snpDist: mostProbableAnces.snpDist,\n        };\n      }\n    }\n  }\n\n  //Fun 3: Get snp distances between case to its ances candidates, then select the lowest\n  function compareAncesSNPdist(aCase, ancesCanditates, hammingDistMat) {\n    let snpDistAnces = [];\n    for (let i = 0; i < ancesCanditates.length; i++) {\n      const ancesCandId = ancesCanditates[i].id;\n      // edgesOfAnces is a list of object paired (both dir)\n      let edgesOfAnces = hammingDistMat.get(ancesCandId).filter((d) => {\n        if (d.target === aCase.id) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      snpDistAnces.push({ id: ancesCandId, snpDist: edgesOfAnces[0].value });\n    }\n\n    snpDistAnces.sort((a, b) => a.snpDist - b.snpDist);\n    // console.log(\"snpDistAnces\", snpDistAnces);\n    //which ances has the lowest SNP dist?\n    let lowestSNPdistAnces = snpDistAnces.filter((e) => {\n      if (e.snpDist === snpDistAnces[0].snpDist) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // console.log(\"lowestSNPdistAnces\", lowestSNPdistAnces);\n    return lowestSNPdistAnces;\n  }\n\n  //Fun 2: Running and calling selAmongAncestors\n  function findAncestor(aCase, cases, hammingDistMat) {\n    //Search and return 1 best ancestor for a caseID, from the list of available cases\n    //+based on case's collection date, and (if available) mutation rate and haplo length\n    //+(length of snp sites)\n    let bestAncestor = { ances: null, snpDist: null };\n    //1. Find ancestor candidates: other case(s) which collected before this caseId\n    let candid = cases.filter((c) => {\n      if (c.date < aCase.date) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    //2. Check whether this case have ancestor(s) or not. If no its the index case (ancestor = 'NA')\n    //+ if has multiple canditates, run selAmongAncestors to choose 1 most likely candidate\n\n    // if it is index case, set ances to NA, return bestAnces\n    if (candid.length === 0) {\n      bestAncestor.ances = \"NA\";\n      bestAncestor.snpDist = \"NA\";\n      // console.log(\"index case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // if it is the second case (only have 1 candidate). set ances to identified ances, return bestAnces\n    else if (candid.length === 1) {\n      bestAncestor.ances = candid[0].id;\n      let candidHamDist = hammingDistMat.get(candid[0].id).filter((d) => {\n        let cond = d.target === aCase.id ? true : false;\n        return cond;\n      });\n      bestAncestor.snpDist = candidHamDist[0].value;\n      // console.log(\"second case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // any other cases (multiple candidates were found)\n    else {\n      //filter candidates based on their snp distance, get candidate(s) with the least snpDist\n      let ancesWithLowestSNPdist = compareAncesSNPdist(\n        aCase,\n        candid,\n        hammingDistMat\n      ); //return a list of ances(s) [{}, {}]\n\n      //check if ancesWithLowestSNPdist is more than 1\n      if (ancesWithLowestSNPdist.length > 1) {\n        let selectedAnces = selAmongAncestors(aCase, ancesWithLowestSNPdist);\n        bestAncestor.ances = selectedAnces.ances;\n        bestAncestor.snpDist = selectedAnces.snpDist;\n        return bestAncestor;\n      } else {\n        //ancesWithLowestSNPdist is a list of one object [{ances: 'ancesID', snpDist: number}]\n        bestAncestor.ances = ancesWithLowestSNPdist[0].id;\n        bestAncestor.snpDist = ancesWithLowestSNPdist[0].snpDist;\n        return bestAncestor;\n      }\n    }\n  }\n\n  // PERFORM THIS FUN IF ALL REQUIREMENTS ARE MET\n  if (!paramsError) {\n    //initial result\n    let res = new Map();\n    for (let index = 0; index < cases.length; index++) {\n      const thisCase = cases[index];\n      //Fun 1: calling findAncestor function\n      let ancestor = findAncestor(thisCase, cases, hammingDistMat); //must return one best ancestor object for this caseId {ances: sample_id, snpDist= null}\n      //set the ancestor of this case to the result map\n      res.set(thisCase.id, ancestor);\n    }\n\n    //create a final graph object from the res map object\n    let final_graph = { nodes: [], edges: [] };\n    res.forEach((v, k) => {\n      final_graph.nodes.push(k);\n      if (v.ances !== \"NA\") {\n        final_graph.edges.push({\n          source: v.ances,\n          target: k,\n          value: v.snpDist,\n          dir: \"forward\",\n        });\n      }\n    });\n    //final_graph.nodes.push(\"NA\");\n\n    //return final graph\n\n    return final_graph;\n  } else {\n    let final_graph = { nodes: null, edges: null };\n    return final_graph;\n  }\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js",["344"],"import React from \"react\";\nimport { Typography, Divider, Button } from \"antd\";\nimport * as constant from \"../utils/constants\";\nimport \"./style_documentation.css\";\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst InputFiles = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"graphsnp-docs-content\">\n        <Title level={2} underline>\n          {\" \"}\n          Input file(s){\" \"}\n        </Title>\n        <Title level={3}>A multi-fasta SNPs alignment</Title>\n        <Text>\n          SNPs alignment file must contain at least two equally length of\n          fasta-formatted non-gap nucleotide sequences.\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.snps}>\n          Download SNPs example file\n        </Button>\n        <br />\n        <br />\n\n        <Title level={3}>Metadata table</Title>\n        <Text>\n          Metadata table must contain at least three non-empty columns:\n          sampleID, sampleDate, and sampleSource. Sample identifier must be\n          identical on both metadata and SNPs alignment.\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.metadata}>\n          Download metadata example file\n        </Button>\n        <br />\n        <br />\n\n        <Title level={3}>Patient stay timeline table </Title>\n        <Text>\n          Patient stay timeline table (for nosocomial transmission analysis)\n          should list the period and location of patient stay in the hospital.\n          Such information must be provided in CSV-formatted file .\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.stayTimeline}>\n          Download Patient stay timeline example file\n        </Button>\n\n        <Divider />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default InputFiles;\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js",["345"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Collapse, Table } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { changeSelectedNode } from \"../action/graphSettingsActions\";\n\nconst { Panel } = Collapse;\nconst moment = extendMoment(Moment);\nconst MetadataBox = (props) => {\n  //STATES\n  const [dataTable, setdataTable] = useState({\n    columns: null,\n    cells: null,\n  });\n  // //DATA FOR TABLE: INITIATION\n  // let selectedNodeList =\n  //   props.selectedNode && props.selectedNode.length > 0\n  //     ? props.selectedNode.map((n) => props.metadata.get(n))\n  //     : [];\n  // let columns = [];\n  // let dataSource = [];\n  // selectedNodeList.forEach((d) => {\n  //   let keyIndexFoUniq = 0;\n  //   for (const [k, v, i] of Object.entries(d)) {\n  //     console.log(i);\n  //     //column\n  //     columns.push({\n  //       title: k,\n  //       dataIndex: k,\n  //       key: k + keyIndexFoUniq.toString(),\n  //     });\n  //     //datasource\n  //     let dataInIndex = dataSource[keyIndexFoUniq]\n  //       ? _.cloneDeep(dataSource[keyIndexFoUniq])\n  //       : {};\n  //     dataInIndex[\"key\"] = keyIndexFoUniq.toString();\n  //     dataInIndex[k] = v;\n  //     dataSource.push(dataInIndex);\n  //     keyIndexFoUniq = keyIndexFoUniq + 1;\n  //   }\n  // });\n\n  //USEEFFECTS\n  useEffect(() => {\n    if (props.metadata && props.selectedNode) {\n      if (props.selectedNode.length > 0) {\n        let selectedNodeList = props.selectedNode.map((n) =>\n          props.metadata.get(n)\n        );\n        let columns = [];\n        let dataSource = [];\n        selectedNodeList.forEach((d) => {\n          let keyIndexFoUniq = 0;\n          for (const [k, v] of Object.entries(d)) {\n            //column\n            columns.push({\n              title: k,\n              dataIndex: k,\n              key: k + keyIndexFoUniq.toString(),\n            });\n            //datasource in index i\n            let dataSourceInIndex = dataSource[0];\n            let dataInIndex = {};\n            if (dataSourceInIndex) {\n              // if exist, copy it\n              dataInIndex = Object.assign({}, dataSourceInIndex);\n            }\n            //console.log(\"before\", dataInIndex);\n            if (!dataInIndex.key) {\n              dataInIndex[\"key\"] = keyIndexFoUniq.toString();\n            }\n            if (k === \"sample_date\") {\n              dataInIndex[k] = moment(v).format(\"YYYY-MM-DD\");\n            } else {\n              dataInIndex[k] = v;\n            }\n\n            dataSource = [dataInIndex];\n            //keyIndexFoUniq = keyIndexFoUniq + 1;\n            //console.log(\"after\", dataInIndex);\n          }\n        });\n\n        setdataTable({\n          columns: columns,\n          cells: dataSource,\n        });\n      } else {\n        setdataTable({\n          columns: null,\n          cells: null,\n        });\n      }\n    }\n  }, [props.selectedNode]);\n\n  return (\n    <React.Fragment>\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: \"10\",\n          top: \"inherit\",\n          width: \"100%\",\n        }}\n      >\n        {props.metadata && (\n          <Row>\n            <Col span={24}>\n              <Collapse bordered={false} expandIconPosition=\"left\">\n                <Panel\n                  style={{\n                    marginBottom: \"0px\",\n                    textAlign: \"left\",\n                    overflowY: \"auto\",\n                  }}\n                  header={\n                    <p style={{ marginBottom: \"0px\" }}>\n                      <InfoCircleOutlined /> Selected node metadata\n                    </p>\n                  }\n                  key=\"100\"\n                >\n                  {props.selectedNode &&\n                    props.graphObject &&\n                    dataTable.columns && (\n                      <Table\n                        size=\"small\"\n                        pagination={false}\n                        style={{ width: \"100%\" }}\n                        dataSource={dataTable.cells}\n                        columns={dataTable.columns}\n                      />\n                    )}\n\n                  {!props.selectedNode && <p>No selected node</p>}\n                </Panel>\n              </Collapse>\n            </Col>\n          </Row>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    colorLUT: state.colorLUT,\n    selectedNode: state.selectedNode,\n    graphObject: state.graphObject,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeSelectedNode,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MetadataBox);\n\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js",["346","347","348","349"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_intra_inter.js",["350","351"],{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":14,"column":10,"nodeType":"358","messageId":"359","endLine":14,"endColumn":30},{"ruleId":"356","severity":1,"message":"360","line":54,"column":9,"nodeType":"358","messageId":"359","endLine":54,"endColumn":29},{"ruleId":"361","severity":1,"message":"362","line":96,"column":6,"nodeType":"363","endLine":96,"endColumn":26,"suggestions":"364"},{"ruleId":"361","severity":1,"message":"365","line":109,"column":6,"nodeType":"363","endLine":109,"endColumn":27,"suggestions":"366"},{"ruleId":"361","severity":1,"message":"367","line":118,"column":6,"nodeType":"363","endLine":118,"endColumn":31,"suggestions":"368"},{"ruleId":"361","severity":1,"message":"367","line":149,"column":6,"nodeType":"363","endLine":149,"endColumn":51,"suggestions":"369"},{"ruleId":"361","severity":1,"message":"370","line":202,"column":6,"nodeType":"363","endLine":202,"endColumn":49,"suggestions":"371"},{"ruleId":"361","severity":1,"message":"370","line":238,"column":6,"nodeType":"363","endLine":238,"endColumn":56,"suggestions":"372"},{"ruleId":"356","severity":1,"message":"373","line":2,"column":33,"nodeType":"358","messageId":"359","endLine":2,"endColumn":39},{"ruleId":"356","severity":1,"message":"374","line":10,"column":8,"nodeType":"358","messageId":"359","endLine":10,"endColumn":19},{"ruleId":"356","severity":1,"message":"375","line":12,"column":8,"nodeType":"358","messageId":"359","endLine":12,"endColumn":29},{"ruleId":"352","replacedBy":"376"},{"ruleId":"354","replacedBy":"377"},{"ruleId":"356","severity":1,"message":"378","line":6,"column":3,"nodeType":"358","messageId":"359","endLine":6,"endColumn":15},{"ruleId":"356","severity":1,"message":"379","line":1,"column":10,"nodeType":"358","messageId":"359","endLine":1,"endColumn":13},{"ruleId":"356","severity":1,"message":"380","line":33,"column":9,"nodeType":"358","messageId":"359","endLine":33,"endColumn":25},{"ruleId":"356","severity":1,"message":"381","line":51,"column":9,"nodeType":"358","messageId":"359","endLine":51,"endColumn":32},{"ruleId":"356","severity":1,"message":"382","line":2,"column":27,"nodeType":"358","messageId":"359","endLine":2,"endColumn":33},{"ruleId":"356","severity":1,"message":"383","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"384","line":17,"column":31,"nodeType":"358","messageId":"359","endLine":17,"endColumn":43},{"ruleId":"356","severity":1,"message":"385","line":25,"column":7,"nodeType":"358","messageId":"359","endLine":25,"endColumn":8},{"ruleId":"356","severity":1,"message":"380","line":51,"column":9,"nodeType":"358","messageId":"359","endLine":51,"endColumn":25},{"ruleId":"361","severity":1,"message":"362","line":78,"column":6,"nodeType":"363","endLine":78,"endColumn":23,"suggestions":"386"},{"ruleId":"361","severity":1,"message":"365","line":88,"column":6,"nodeType":"363","endLine":88,"endColumn":27,"suggestions":"387"},{"ruleId":"361","severity":1,"message":"367","line":117,"column":6,"nodeType":"363","endLine":117,"endColumn":48,"suggestions":"388"},{"ruleId":"356","severity":1,"message":"389","line":120,"column":9,"nodeType":"358","messageId":"359","endLine":120,"endColumn":27},{"ruleId":"356","severity":1,"message":"379","line":2,"column":18,"nodeType":"358","messageId":"359","endLine":2,"endColumn":21},{"ruleId":"356","severity":1,"message":"383","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":25},{"ruleId":"356","severity":1,"message":"390","line":9,"column":8,"nodeType":"358","messageId":"359","endLine":9,"endColumn":21},{"ruleId":"356","severity":1,"message":"391","line":15,"column":3,"nodeType":"358","messageId":"359","endLine":15,"endColumn":24},{"ruleId":"356","severity":1,"message":"392","line":245,"column":9,"nodeType":"358","messageId":"359","endLine":245,"endColumn":15},{"ruleId":"356","severity":1,"message":"393","line":247,"column":9,"nodeType":"358","messageId":"359","endLine":247,"endColumn":20},{"ruleId":"356","severity":1,"message":"394","line":248,"column":9,"nodeType":"358","messageId":"359","endLine":248,"endColumn":20},{"ruleId":"356","severity":1,"message":"395","line":251,"column":9,"nodeType":"358","messageId":"359","endLine":251,"endColumn":27},{"ruleId":"356","severity":1,"message":"396","line":252,"column":9,"nodeType":"358","messageId":"359","endLine":252,"endColumn":25},{"ruleId":"356","severity":1,"message":"390","line":5,"column":8,"nodeType":"358","messageId":"359","endLine":5,"endColumn":21},{"ruleId":"356","severity":1,"message":"397","line":6,"column":16,"nodeType":"358","messageId":"359","endLine":6,"endColumn":25},{"ruleId":"361","severity":1,"message":"398","line":98,"column":6,"nodeType":"363","endLine":98,"endColumn":26,"suggestions":"399"},{"ruleId":"356","severity":1,"message":"379","line":2,"column":10,"nodeType":"358","messageId":"359","endLine":2,"endColumn":13},{"ruleId":"356","severity":1,"message":"400","line":2,"column":15,"nodeType":"358","messageId":"359","endLine":2,"endColumn":18},{"ruleId":"356","severity":1,"message":"401","line":3,"column":10,"nodeType":"358","messageId":"359","endLine":3,"endColumn":28},{"ruleId":"356","severity":1,"message":"402","line":5,"column":9,"nodeType":"358","messageId":"359","endLine":5,"endColumn":14},{"ruleId":"356","severity":1,"message":"403","line":4,"column":13,"nodeType":"358","messageId":"359","endLine":4,"endColumn":24},{"ruleId":"356","severity":1,"message":"404","line":5,"column":13,"nodeType":"358","messageId":"359","endLine":5,"endColumn":22},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"no-unused-vars","'createClusterCSVFile' is defined but never used.","Identifier","unusedVar","'graph_typeOfAnalysis' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["407"],"React Hook useEffect has missing dependencies: 'props' and 'redraw'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["408"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["409"],["410"],"React Hook useEffect has a missing dependency: 'props.graphObject'. Either include it or remove the dependency array.",["411"],["412"],"'Select' is defined but never used.","'TitleHeader' is defined but never used.","'PatientMovementLoader' is defined but never used.",["405"],["406"],"'DeleteFilled' is defined but never used.","'Row' is defined but never used.","'chartOrientation' is assigned a value but never used.","'chartOrientationHandler' is assigned a value but never used.","'Button' is defined but never used.","'LoadingOutlined' is defined but never used.","'filterUnique' is defined but never used.","'_' is assigned a value but never used.",["413"],["414"],["415"],"'reloadChartHandler' is assigned a value but never used.","'GraphEdgeList' is defined but never used.","'filterInverseSymEdges' is defined but never used.","'barMap' is assigned a value but never used.","'barSNP_dist' is assigned a value but never used.","'barSNP_freq' is assigned a value but never used.","'bar_linear_scale_v' is assigned a value but never used.","'bar_band_scale_h' is assigned a value but never used.","'Paragraph' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.metadata'. Either include it or remove the dependency array.",["416"],"'Col' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'Panel' is assigned a value but never used.","'d3Selection' is defined but never used.","'d3Fetches' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"419","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"436","text":"437"},"Update the dependencies array to be: [isUserReloadSession, props, redraw]",{"range":"438","text":"439"},"Update the dependencies array to be: [graph_isUserDownloading, props]",{"range":"440","text":"441"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"442","text":"443"},"Update the dependencies array to be: [graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",{"range":"444","text":"445"},"Update the dependencies array to be: [graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",{"range":"446","text":"447"},"Update the dependencies array to be: [draw, isUserDrawChart, props]",{"range":"448","text":"449"},{"range":"450","text":"439"},"Update the dependencies array to be: [snpDistExportFormat, isUserExportSnpDist, props]",{"range":"451","text":"452"},"Update the dependencies array to be: [props.metadata, props.selectedNode]",{"range":"453","text":"454"},[3986,4006],"[draw, graph_isUserReDraw, props]",[4340,4361],"[isUserReloadSession, props, redraw]",[4644,4669],"[graph_isUserDownloading, props]",[5694,5739],"[graph_clusterMethod, graph_isUserClustering, props]",[7057,7100],"[graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",[8046,8096],"[graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",[2794,2811],"[draw, isUserDrawChart, props]",[3020,3041],[3756,3798],"[snpDistExportFormat, isUserExportSnpDist, props]",[3023,3043],"[props.metadata, props.selectedNode]"]