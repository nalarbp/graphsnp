[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"34","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"35","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"36","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"37","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"38","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js":"39","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js":"40","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js":"41","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js":"42","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js":"43","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js":"44","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js":"45","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js":"46","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js":"47","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js":"48","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js":"49","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js":"50","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js":"51","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js":"52","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js":"53","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js":"54","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js":"55","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js":"56","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js":"57","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js":"58","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js":"59","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js":"60","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js":"61","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js":"62","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js":"63","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js":"64","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js":"65","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js":"66","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js":"67","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js":"68","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js":"69","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js":"70","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js":"71","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js":"72","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_intra_inter.js":"73"},{"size":663,"mtime":1610195666935,"results":"74","hashOfConfig":"75"},{"size":1045,"mtime":1612155926082,"results":"76","hashOfConfig":"75"},{"size":362,"mtime":1610086392986,"results":"77","hashOfConfig":"75"},{"size":477,"mtime":1610107486220,"results":"78","hashOfConfig":"75"},{"size":661,"mtime":1631252944768,"results":"79","hashOfConfig":"75"},{"size":88,"mtime":1610155012196,"results":"80","hashOfConfig":"75"},{"size":2996,"mtime":1631259436295,"results":"81","hashOfConfig":"75"},{"size":1169,"mtime":1632196418176,"results":"82","hashOfConfig":"75"},{"size":22617,"mtime":1631260214835,"results":"83","hashOfConfig":"75"},{"size":16936,"mtime":1631261342668,"results":"84","hashOfConfig":"75"},{"size":2638,"mtime":1632195447368,"results":"85","hashOfConfig":"75"},{"size":612,"mtime":1628787892006,"results":"86","hashOfConfig":"75"},{"size":159,"mtime":1611887099249,"results":"87","hashOfConfig":"75"},{"size":2636,"mtime":1631259599315,"results":"88","hashOfConfig":"75"},{"size":378,"mtime":1610108902860,"results":"89","hashOfConfig":"75"},{"size":584,"mtime":1610154547016,"results":"90","hashOfConfig":"75"},{"size":5510,"mtime":1631259522180,"results":"91","hashOfConfig":"75"},{"size":7794,"mtime":1630375685448,"results":"92","hashOfConfig":"75"},{"size":3412,"mtime":1631259465496,"results":"93","hashOfConfig":"75"},{"size":401,"mtime":1610683140985,"results":"94","hashOfConfig":"75"},{"size":3161,"mtime":1631844800553,"results":"95","hashOfConfig":"75"},{"size":970,"mtime":1628782168193,"results":"96","hashOfConfig":"75"},{"size":1461,"mtime":1631261579405,"results":"97","hashOfConfig":"75"},{"size":452,"mtime":1611822450355,"results":"98","hashOfConfig":"75"},{"size":383,"mtime":1611039003510,"results":"99","hashOfConfig":"75"},{"size":156,"mtime":1611039074948,"results":"100","hashOfConfig":"75"},{"size":1769,"mtime":1613287670459,"results":"101","hashOfConfig":"75"},{"size":3248,"mtime":1628132827608,"results":"102","hashOfConfig":"75"},{"size":390,"mtime":1611802301584,"results":"103","hashOfConfig":"75"},{"size":2033,"mtime":1628431320344,"results":"104","hashOfConfig":"75"},{"size":391,"mtime":1611809625614,"results":"105","hashOfConfig":"75"},{"size":2742,"mtime":1629170912428,"results":"106","hashOfConfig":"75"},{"size":4437,"mtime":1612256477904,"results":"107","hashOfConfig":"75"},{"size":499,"mtime":1612021206837,"results":"108","hashOfConfig":"75"},{"size":396,"mtime":1611822589287,"results":"109","hashOfConfig":"75"},{"size":379,"mtime":1611887208678,"results":"110","hashOfConfig":"75"},{"size":220,"mtime":1611889589251,"results":"111","hashOfConfig":"75"},{"size":379,"mtime":1612088497120,"results":"112","hashOfConfig":"75"},{"size":6539,"mtime":1628837437009,"results":"113","hashOfConfig":"75"},{"size":3827,"mtime":1628837361638,"results":"114","hashOfConfig":"75"},{"size":10744,"mtime":1631255071192,"results":"115","hashOfConfig":"75"},{"size":1759,"mtime":1628134710228,"results":"116","hashOfConfig":"75"},{"size":975,"mtime":1628743494809,"results":"117","hashOfConfig":"75"},{"size":1259,"mtime":1612312156147,"results":"118","hashOfConfig":"75"},{"size":408,"mtime":1612088419622,"results":"119","hashOfConfig":"75"},{"size":250,"mtime":1612088403076,"results":"120","hashOfConfig":"75"},{"size":2295,"mtime":1628744407732,"results":"121","hashOfConfig":"75"},{"size":487,"mtime":1612141196612,"results":"122","hashOfConfig":"75"},{"size":10288,"mtime":1632463199597,"results":"123","hashOfConfig":"75"},{"size":9067,"mtime":1632464703215,"results":"124","hashOfConfig":"75"},{"size":3147,"mtime":1628649252294,"results":"125","hashOfConfig":"75"},{"size":1376,"mtime":1631258070585,"results":"126","hashOfConfig":"75"},{"size":1437,"mtime":1628649292116,"results":"127","hashOfConfig":"75"},{"size":698,"mtime":1612251042608,"results":"128","hashOfConfig":"75"},{"size":1945,"mtime":1631767380230,"results":"129","hashOfConfig":"75"},{"size":3595,"mtime":1628837390281,"results":"130","hashOfConfig":"75"},{"size":405,"mtime":1613173279348,"results":"131","hashOfConfig":"75"},{"size":1413,"mtime":1613285314789,"results":"132","hashOfConfig":"75"},{"size":561,"mtime":1613264520935,"results":"133","hashOfConfig":"75"},{"size":7607,"mtime":1628825042519,"results":"134","hashOfConfig":"75"},{"size":7049,"mtime":1632464914269,"results":"135","hashOfConfig":"75"},{"size":7505,"mtime":1628734602629,"results":"136","hashOfConfig":"75"},{"size":2418,"mtime":1629158334353,"results":"137","hashOfConfig":"75"},{"size":1365,"mtime":1632465004183,"results":"138","hashOfConfig":"75"},{"size":2869,"mtime":1629158168156,"results":"139","hashOfConfig":"75"},{"size":404,"mtime":1628788106330,"results":"140","hashOfConfig":"75"},{"size":3752,"mtime":1631261250233,"results":"141","hashOfConfig":"75"},{"size":3993,"mtime":1631261422721,"results":"142","hashOfConfig":"75"},{"size":1585,"mtime":1628873754821,"results":"143","hashOfConfig":"75"},{"size":395,"mtime":1628876227672,"results":"144","hashOfConfig":"75"},{"size":415,"mtime":1629784335300,"results":"145","hashOfConfig":"75"},{"size":190,"mtime":1629784386865,"results":"146","hashOfConfig":"75"},{"size":11596,"mtime":1630909800157,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"13s4y1q",{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"150"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"150"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"150"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"250"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"150"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"150"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"150"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"150"},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["305","306"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["307","308","309","310","311","312","313","314","315"],"/*\n- Comp init => render => all useEffect\n- loading wont work using states, use indicator on draw button instead\n- All useEffect called when first loaded (eg: from Home to graphSNP page)\n- certain useEffect called when any deppendent useEffect affected\n*/\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { Col, Empty, Button, message } from \"antd\";\nimport { createGraphObject } from \"../utils/create_graphObject\";\nimport { createCytoscapeData } from \"../utils/create_cyData\";\nimport { createClusterCSVFile } from \"../utils/create_exportFile\";\nimport { findClusters } from \"../utils//find_clusters\";\nimport cytoscape from \"cytoscape\";\nimport cy_svg from \"cytoscape-svg\";\nimport { LoadingOutlined, ReloadOutlined } from \"@ant-design/icons\";\nimport {\n  createColorLUT,\n  getColorByColorIndex,\n  getEdgeAndArrowWidth,\n  downloadFileAsText,\n} from \"../utils/utils\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport {\n  hmmMatrixToStore,\n  graphObjectToStore,\n  graphClusterToStore,\n} from \"../action/graphMatrixActions\";\nimport {\n  changeIsUserReDrawSetting,\n  changeIsUserClusteringSetting,\n  changeIsUserDownloadingSetting,\n  changeChartSessionSetting,\n  changeIsUserLoadSessionSetting,\n  changeSelectedNode,\n  changeIsUserRelayoutSetting,\n} from \"../action/graphSettingsActions\";\nimport isShowingLoadingModalToStore from \"../action/isShowingLoadingModalActions\";\n\nconst _ = require(\"lodash\");\nconst fcose = require(\"cytoscape-fcose\");\nconst spread = require(\"cytoscape-spread\");\ncytoscape.use(fcose); // register extension\ncytoscape.use(spread); // register extension\ncytoscape.use(cy_svg); // register extension\n\nconst GraphContainer = (props) => {\n  //state\n  const [graphIsAvailable, setGraphIsAvailable] = useState(false);\n  const [processingGraph, setProcessingGraph] = useState(false);\n\n  //Settings\n  const graph_typeOfAnalysis = props.graphSettings.typeOfAnalysis;\n  const graph_method = props.graphSettings.method;\n  const graph_layout = props.graphSettings.layout;\n  const graph_isUserReDraw = props.graphSettings.isUserReDraw;\n  const graph_isUserFilterEdges = props.graphSettings.isUserFilteringEdge;\n  const graph_edgeFilterCutoff = graph_isUserFilterEdges\n    ? props.graphSettings.edgeFilterCutoff\n    : null;\n  const graph_clusterMethod = props.graphSettings.clusterMethod;\n  const graph_isUserClustering = props.graphSettings.isUserClustering;\n  const graph_isEdgesHideByCutoff = props.graphSettings.isHideEdgesByCutoff;\n  const graph_edgesHideCutoff = props.graphSettings.hiddenEdgesCutoff;\n  const graph_colorNodeBy = props.graphSettings.colorNodedBy;\n  const graph_isEdgeScaled = props.graphSettings.isEdgeScaled;\n  const graph_edgeScaleFactor = props.graphSettings.edgeScaleFactor;\n  const graph_isUserDownloading = props.graphSettings.isUserDownloading;\n  const trans_locLevel = props.graphSettings.transIncludeLocLevel;\n  const graph_isUserRelayout = props.graphSettings.isUserRelayout;\n\n  //Internal setting\n  const cy_layout = { name: graph_layout, animate: false, fit: true };\n  const cytoscapeRef = useRef(null);\n  const prevSessionData = props.graphSettings.chartSession;\n  const isUserReloadSession = props.graphSettings.isUserReloadSession;\n\n  //Automatic reloading if previous graph session data is a available\n\n  useEffect(() => {\n    if (graph_isUserReDraw) {\n      //console.log(\"1. START: user click draw ##\", +new Date());\n      //setProcessingGraph(true); // set time out to delay drawing and let processing graph state run\n\n      setTimeout(function () {\n        //console.log(\"2. setTimeout start and draw start ##\", +new Date());\n        draw();\n        //console.log(\"8. Draw end in setTimeout ##\", +new Date());\n        setGraphIsAvailable(true);\n        //setProcessingGraph(false);\n        props.changeIsUserReDrawSetting(false);\n        props.isShowingLoadingModalToStore(false);\n        //console.log(\"9. SetTimeout end ##\", +new Date());\n      }, 100);\n    }\n  }, [graph_isUserReDraw]);\n\n  useEffect(() => {\n    if (isUserReloadSession) {\n      //setProcessingGraph(true);\n      setTimeout(() => {\n        redraw();\n        setGraphIsAvailable(true);\n        //setProcessingGraph(false);\n        props.changeIsUserLoadSessionSetting(false);\n        props.isShowingLoadingModalToStore(false);\n      }, 100);\n    }\n  }, [isUserReloadSession]);\n\n  useEffect(() => {\n    if (graph_isUserDownloading) {\n      let cy = cytoscapeRef.current;\n      let svgContent = cy.svg({ scale: 1, full: true });\n      downloadFileAsText(\"GraphSNP-cytoscape-svg.svg\", svgContent);\n      props.changeIsUserDownloadingSetting(false);\n    }\n  }, [graph_isUserDownloading]);\n\n  useEffect(() => {\n    if (graph_isUserClustering && props.graphObject) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        //call clustering\n        let clusters = findClusters(props.graphObject, graph_clusterMethod);\n        setProcessingGraph(false);\n        message.success(\n          `Found ${clusters.group.length} clusters in the graph`,\n          2\n        );\n        //update colorLUT by new clusters color\n        let colorLUT_byCluster = createColorLUT(clusters.members, \"clusterID\");\n        let newColorLUT = _.cloneDeep(props.colorLUT);\n        if (newColorLUT) {\n          let updated_newColorLUT = {\n            ...newColorLUT,\n            clusterID: colorLUT_byCluster,\n          };\n          newColorLUT = updated_newColorLUT;\n        } else {\n          newColorLUT = { clusterID: colorLUT_byCluster };\n        }\n        props.colorLUTtoStore(newColorLUT);\n\n        props.graphClusterToStore(clusters);\n        props.changeIsUserClusteringSetting(false);\n      }, 100);\n    }\n  }, [graph_clusterMethod, graph_isUserClustering]);\n\n  useEffect(() => {\n    if (graph_isUserRelayout && cytoscapeRef.current) {\n      setTimeout(() => {\n        let cy = cytoscapeRef.current;\n        let layout = {\n          name: graph_layout,\n          animate: false,\n          fit: true,\n          prelayout: false,\n        };\n        cy.layout(layout).run();\n        cytoscapeRef.current = cy;\n        props.isShowingLoadingModalToStore(false);\n        props.changeIsUserRelayoutSetting(false);\n      }, 100);\n    }\n  }, [graph_isUserRelayout]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgeScaled) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"edge\"\n              );\n            },\n            \"arrow-scale\": function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"arrow\"\n              );\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: 3,\n            \"arrow-scale\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [graph_isEdgeScaled, graph_edgeScaleFactor]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgesHideByCutoff) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: function (o) {\n              let edgeWeight = o.data(\"weight\");\n              if (graph_isEdgesHideByCutoff) {\n                let res =\n                  edgeWeight < graph_edgesHideCutoff.min ||\n                  edgeWeight > graph_edgesHideCutoff.max\n                    ? 0\n                    : 1;\n                return res;\n              } else {\n                return 1;\n              }\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_isEdgesHideByCutoff, graph_edgesHideCutoff]);\n\n  useEffect(() => {\n    if (graph_colorNodeBy && props.colorLUT && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"node\")\n        .style({\n          \"background-color\": function (d) {\n            let isolate_name = d.data(\"id\");\n            let col = getColorByColorIndex(\n              isolate_name,\n              graph_colorNodeBy,\n              props.colorLUT\n            );\n            return col;\n          },\n        })\n        .update();\n\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_colorNodeBy, props.colorLUT]);\n\n  const reloadChartHandler = (val) => {\n    if (!isUserReloadSession) {\n      props.isShowingLoadingModalToStore(true);\n      props.changeIsUserLoadSessionSetting(true);\n    }\n  };\n\n  //DRAW\n  function draw() {\n    //console.log(\"3. Start drawing, creating hammingMatrix ##\", +new Date());\n    //check hamming distance ? if not create one, send to store at the end.\n    const hammingMatrix = !props.hammMatrix\n      ? new HammingMatrix(props.sequence).getHammingMatrix()\n      : props.hammMatrix;\n\n    const seq_len = props.sequence ? props.sequence[0].size : null;\n\n    //Look at param (method, seq, ), generate graph object: util functions\n    //graphObject: {type:'mcg', mapData: edgeList object}\n    //console.log(\"4. Creating graph object ##\", +new Date());\n\n    const graphObject = createGraphObject(\n      hammingMatrix,\n      graph_method,\n      graph_edgeFilterCutoff,\n      props.categoricalMap,\n      props.patientMovement,\n      props.metadata,\n      trans_locLevel,\n      seq_len\n    );\n\n    //generate cytoscape data\n    if (graphObject && graphObject.nodes && graphObject.edges) {\n      //cytoscapeData = [{data:{id:id, nodeType:'singleton', data:[]}}, { data: {source: s, target: t, weight: w} } ]\n      //console.log(\"5. Creating cytoscape data ##\", +new Date());\n      const cytoscapeData = createCytoscapeData(graphObject);\n\n      //Load and view cytoscape\n      if (cytoscapeData) {\n        //console.log(\"6. Cytoscape data mapping ##\", +new Date());\n        if (prevSessionData) {\n          let cy = prevSessionData;\n          cy.unmount();\n        }\n        const cy = cytoscape({\n          elements: cytoscapeData,\n          container: document.getElementById(\"graph-cont-cytoscape-canvas\"),\n          pannable: true,\n          selected: true,\n          boxSelectionEnabled: false,\n          style: [\n            {\n              selector: \"node\",\n              style: {\n                label: \"data(id)\",\n                \"border-width\": 3,\n                \"border-style\": \"solid\",\n                \"border-color\": \"black\",\n                \"background-color\": function (d) {\n                  if (graph_colorNodeBy && props.colorLUT) {\n                    let isolate_name = d.data(\"id\");\n                    let col = getColorByColorIndex(\n                      isolate_name,\n                      graph_colorNodeBy,\n                      props.colorLUT\n                    );\n                    return col;\n                  } else {\n                    return \"lightgray\";\n                  }\n                },\n              },\n            },\n            {\n              selector: \"edge\",\n              style: {\n                opacity: function (o) {\n                  let edgeWeight = o.data(\"weight\");\n                  //console.log(edgeWeight);\n                  if (graph_isEdgesHideByCutoff) {\n                    let res =\n                      edgeWeight < graph_edgesHideCutoff.min ||\n                      edgeWeight > graph_edgesHideCutoff.max\n                        ? 0\n                        : 1;\n                    return res;\n                  } else {\n                    return 1;\n                  }\n                },\n                label: \"data(weight)\",\n                \"font-size\": \"10px\",\n                \"text-background-color\": \"#F5E372\",\n                color: \"red\",\n                width: function (e) {\n                  return getEdgeAndArrowWidth(\n                    graph_isEdgeScaled,\n                    e.data(\"weight\"),\n                    graph_edgeScaleFactor,\n                    \"edge\"\n                  );\n                },\n                \"target-arrow-color\": \"black\",\n                \"target-arrow-shape\": (e) => {\n                  return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n                },\n                \"curve-style\": \"bezier\",\n                \"arrow-scale\": function (e) {\n                  return getEdgeAndArrowWidth(\n                    graph_isEdgeScaled,\n                    e.data(\"weight\"),\n                    graph_edgeScaleFactor,\n                    \"arrow\"\n                  );\n                },\n              },\n            },\n            {\n              selector: \":selected\",\n              style: {\n                \"border-width\": \"5\",\n                \"border-color\": \"red\",\n                \"border-style\": \"dashed\",\n                padding: \"8px\",\n              },\n            },\n          ],\n        });\n\n        if (graph_layout === \"spread\") {\n          let diverted_layout = {\n            name: \"cose\",\n            animate: false,\n            fit: true,\n            prelayout: false,\n          };\n\n          cy.layout(diverted_layout).run();\n        } else {\n          //console.log(\"7. Cytoscape running with layout ##\", +new Date());\n          cy.layout(cy_layout).run();\n        }\n        //node event click listener\n        cy.selectionType(\"single\");\n        cy.nodes().bind(\"tap\", function (evt) {\n          if (props.metadata) {\n            // get isolate object by source name\n            let clickedNode = [evt.target.data(\"id\")];\n            props.changeSelectedNode(clickedNode);\n          }\n        });\n        //click on background listener\n        cy.on(\"tap\", function (evt) {\n          if (evt.target === cy) {\n            props.changeSelectedNode([]);\n          }\n        });\n        //cy.layout(cy_layout).run();\n        //save current Ref\n        //save current Ref\n        cytoscapeRef.current = cy;\n\n        //==== SEND TO STORE ====\n        if (props.hammMatrix) {\n          props.hmmMatrixToStore(hammingMatrix);\n        }\n        props.graphObjectToStore(graphObject);\n        props.changeChartSessionSetting(cy);\n      }\n    }\n  }\n  function redraw() {\n    let cy = prevSessionData;\n    cy.unmount();\n    cy.mount(document.getElementById(\"graph-cont-cytoscape-canvas\"));\n    cytoscapeRef.current = cy;\n  }\n\n  return (\n    <React.Fragment>\n      <Col span={24} style={{ position: \"relative\" }}>\n        <div\n          id=\"graph-cont-is-empty\"\n          style={{ display: graphIsAvailable ? \"none\" : \"block\" }}\n        >\n          <Empty\n            description={\n              prevSessionData ? \"Reload previous graph\" : \"No graph. Create one\"\n            }\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          >\n            {prevSessionData && (\n              <Button onClick={reloadChartHandler} type=\"primary\">\n                <ReloadOutlined />\n              </Button>\n            )}\n          </Empty>\n        </div>\n        <div\n          id=\"graph-cont-is-processing\"\n          style={{ display: processingGraph ? \"block\" : \"none\" }}\n        >\n          <p\n            style={{\n              textAlign: \"right\",\n            }}\n          >\n            <span>\n              <LoadingOutlined\n                style={{\n                  fontSize: 18,\n                }}\n                spin\n              />\n            </span>{\" \"}\n            Creating graph ...\n          </p>\n        </div>\n      </Col>\n      <div id=\"graph-cont-cytoscape-canvas\"></div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    patientMovement: state.patientMovement,\n    sequence: state.sequence,\n    graphObject: state.graphObject,\n    hammMatrix: state.hammMatrix,\n    graphSettings: state.graphSettings,\n    colorLUT: state.colorLUT,\n    graphClusters: state.graphClusters,\n    categoricalMap: state.categoricalMap,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeIsUserClusteringSetting,\n      changeIsUserReDrawSetting,\n      hmmMatrixToStore,\n      graphObjectToStore,\n      graphClusterToStore,\n      colorLUTtoStore,\n      changeIsUserDownloadingSetting,\n      changeChartSessionSetting,\n      changeIsUserLoadSessionSetting,\n      changeSelectedNode,\n      isShowingLoadingModalToStore,\n      changeIsUserRelayoutSetting,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphContainer);\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",["316"],"import React from \"react\";\nimport { Row, Col, Modal, Spin, Select } from \"antd\";\nimport \"./style_home.css\";\nimport { connect } from \"react-redux\";\n//import { Link, NavLink } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { changeNavLocation } from \"../action/navigationActions\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport SNPsLoader from \"./comp_snpsLoader\";\n//import TitleHeader from \"./comp_titleHeader\";\nimport MetadataLoader from \"./comp_metadataLoader\";\n//import PatientMovementLoader from \"./comp_patientMovementLoader\";\nimport SelectDemoData from \"./comp_selectDemoData\";\nimport FooterComponent from \"./comp_footer\";\nimport Particles from \"react-particles-js\";\nimport { vh } from \"../utils/utils\";\n\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 34 }} spin />;\nconst getParticleHeight = String(vh(100) - 380) + \"px\";\nconst particleParams = {\n  fpsLimit: 24,\n  particles: {\n    number: { value: 25 },\n    size: { value: 4 },\n    links: {\n      enable: true,\n      distance: 75,\n    },\n    move: {\n      enable: true,\n      speed: 2,\n      outModes: {\n        default: \"bounce\",\n      },\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\",\n      },\n    },\n  },\n};\n\nconst Home = (props) => {\n  //console.log(\"Home\");\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xs={24} id=\"header-content\">\n          <Modal\n            visible={props.isInputLoading}\n            closable={false}\n            centered={true}\n            width={0}\n            footer={null}\n            bodyStyle={{\n              textAlign: \"center\",\n              padding: \"0px\",\n            }}\n          >\n            <Spin\n              indicator={loadingIcon}\n              style={{ color: \"white\" }}\n              tip=\"Processing...\"\n              size=\"large\"\n            />\n          </Modal>\n        </Col>\n      </Row>\n      <Row id=\"input-wrapper\">\n        <Particles\n          params={particleParams}\n          height={getParticleHeight}\n          style={{ position: \"absolute\", height: \"200px\" }}\n        />\n        <Col xs={24} sm={12}>\n          <SNPsLoader />\n        </Col>\n        <Col xs={24} sm={12}>\n          <MetadataLoader />\n        </Col>\n      </Row>\n      <Row id=\"demo-selection\">\n        <SelectDemoData />\n      </Row>\n      <FooterComponent />\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isInputLoading: state.isInputLoading,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeNavLocation,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n/*\n//Home called when navigating\n//Called when input is loaded (cause it subsribed to the store, so when the connected state change it will be re-called)\n\n<Col xs={24}>\n          <TitleHeader />\n        </Col>\n        <Col xs={24} style={{ padding: \"5px 0 0 5px\" }}>\n          <h5>\n            Click the input button or drag and drop input file(s) to start\n          </h5>\n        </Col>\n        <Col xs={24} sm={8}>\n          <PatientMovementLoader />\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],["317","318"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js",["319"],"import React from \"react\";\nimport { Upload, Button, message, Tooltip } from \"antd\";\nimport {\n  StopOutlined,\n  CheckCircleFilled,\n  DeleteFilled,\n  DeleteOutlined,\n  QuestionCircleOutlined,\n} from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { sequenceToStore, isinputLoadingToStore } from \"../action/inputActions\";\nimport { hmmMatrixToStore } from \"../action/graphMatrixActions\";\nimport { snpsLoader } from \"./util_inputLoaders\";\n\nconst { Dragger } = Upload;\n\nconst InputLoader = (props) => {\n  //console.log(\"Input Loader - init\");\n\n  const beforeUploadHandler = (file) => {\n    if (file) {\n      let inputType = \"seq\";\n\n      //check extension\n      //check content\n\n      switch (inputType) {\n        case \"seq\":\n          const reader = new FileReader();\n          reader.readAsText(file);\n          //console.log(reader.readAsText(file));\n          props.isinputLoadingToStore(true);\n          reader.onloadend = function (evt) {\n            console.log(evt);\n            const dataText = evt.target.result;\n            snpsLoader(\n              dataText,\n              props.sequenceToStore,\n              props.hmmMatrixToStore,\n              props.isinputLoadingToStore\n            );\n          };\n          break;\n\n        default:\n          message.error(\"Invalid input file\", 0.5);\n          break;\n      }\n    }\n    return false; //to avoid upload action (we parse and load it to store instead)\n  };\n\n  const getIconStatus = function () {\n    if (props.sequence) {\n      return <CheckCircleFilled style={{ fontSize: \"14pt\" }} />;\n    } else {\n      return <StopOutlined />;\n    }\n  };\n\n  const removeSNPHandler = (val) => {\n    props.sequenceToStore(null);\n    props.hmmMatrixToStore(null);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <Dragger\n          accept={\".fa, .fasta, .fna, .mfa\"}\n          showUploadList={false}\n          style={{\n            backgroundColor: \"transparent\",\n            height: \"500px\",\n          }}\n          name=\"file\"\n          multiple={false}\n          action=\"dummy-post\"\n          beforeUpload={beforeUploadHandler}\n        >\n          <div id=\"input-loader-snps\">\n            <Button\n              id=\"input-loader-button-snps\"\n              shape={\"round\"}\n              size={\"large\"}\n            >\n              {getIconStatus()} SNPs {\"  \"}\n              <span style={{ marginLeft: \"5px\" }}>\n                <Tooltip\n                  title=\"Input or drag and drop non-ambiguous multi-fasta SNPs alignment file here\"\n                  placement=\"rightTop\"\n                >\n                  <QuestionCircleOutlined\n                    style={{ fontSize: \"14px\", color: \"white\" }}\n                  />\n                </Tooltip>\n              </span>\n            </Button>\n          </div>\n        </Dragger>\n        <div className=\"remove-button-container\">\n          <Button\n            disabled={props.sequence ? false : true}\n            title={\"Remove loaded SNPs alignment\"}\n            type={\"ghost\"}\n            className=\"input-loader-remove-button \"\n            shape={\"circle\"}\n            size={\"small\"}\n            onClick={removeSNPHandler}\n          >\n            <DeleteOutlined />\n          </Button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    sequence: state.sequence,\n    patientMovement: state.patientMovement,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      sequenceToStore,\n      isinputLoadingToStore,\n      hmmMatrixToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputLoader);\n\n/*\nasync function readFastaToJSON(fastaString) {\n    if (props.sequence === null) {\n      //console.log(\"async\");\n      const sequenceJSON = await fastaToJson(fastaString);\n      const snpsSequence = [];\n      if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n        //console.log(sequenceJSON);\n        //check all error message, alert, and no seq to store\n        let isolateName = {};\n        let seqLen = [];\n        let noErr = true;\n        for (let index = 0; index < sequenceJSON.length; index++) {\n          let messages = sequenceJSON[index].messages;\n          let parsedSequence = sequenceJSON[index].parsedSequence;\n          let success = sequenceJSON[index].success;\n          //tracking size\n          if (seqLen.indexOf(parsedSequence.size) === -1) {\n            seqLen.push(parsedSequence.size);\n          }\n          //check success parsing\n          if (!success) {\n            noErr = false;\n            alert(\"Parsing error:\", parsedSequence.name);\n            break;\n          }\n          //check err messages\n          if (messages.length > 0) {\n            noErr = false;\n            alert(messages[0]);\n            break;\n          }\n          //check sequence length\n          if (seqLen.length > 1) {\n            noErr = false;\n            alert(\"Size error: Alignment required sequence with same length\");\n            break;\n          }\n          //check duplicated isolate\n          if (!isolateName[parsedSequence.name]) {\n            isolateName[parsedSequence.name] = true;\n          } else {\n            noErr = false;\n            alert(\"Sequence error: Duplicated sequence\");\n            break;\n          }\n          //making snpsSequence\n          if (noErr) {\n            snpsSequence.push({\n              id: parsedSequence.name,\n              size: parsedSequence.size,\n              sequence: parsedSequence.sequence.toLowerCase(),\n            });\n          }\n        }\n\n        if (noErr) {\n          //display success message\n          message.success(\n            \"The sequences have been loaded, now building distance matrix ..\",\n            1\n          );\n          setTimeout(() => {\n            const hammingMatrix = new HammingMatrix(\n              snpsSequence\n            ).getHammingMatrix();\n            message.success(\n              \"Pair-wise SNP distance matrix has been created\",\n              1\n            );\n            props.sequenceToStore(snpsSequence);\n            props.hmmMatrixToStore(hammingMatrix);\n            props.isinputLoadingToStore(false);\n          }, 100);\n\n          //load to store\n        }\n      } else {\n        alert(\"Error: Required at least 2 sequences\");\n      }\n    } else {\n      alert(\"Sequences have been loaded. Refresh to re-load a new one\");\n    }\n  }\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js",["320"],"import { Row, Col } from \"antd\";\nimport React from \"react\";\nimport \"./style_home.css\";\nconst TitleHeaderComponent = (props) => {\n  return (\n    <React.Fragment>\n      <Col sm={16} id=\"title-header-component\">\n        <p>\n          GraphSNP: Graph-based outbreak cluster and transmission detection and\n          visualization using single-nucleotide polymorphism (SNP) in web\n          browser\n        </p>\n      </Col>\n    </React.Fragment>\n  );\n};\n\nexport default TitleHeaderComponent;\n",["321","322"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js",["323","324"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js",["325","326","327","328","329","330","331","332"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js",["333","334"],"//========================================== SMSO ================================================\n/*\nCreate a directed graph object that edges represent transmissions\nDirected edges was created only if pair-wise of isolates has transmission signal\nTransmission signal were if transmission score >= 1, created by check patient stay overlap hiearchiely\n\n*/\n\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport StayList from \"../model/stayList_prop\";\nimport {\n  getHighestLocation,\n  filterInverseSymEdges,\n  getOverlapLocationLevel,\n} from \"../utils/utils\";\n\nconst moment = extendMoment(Moment);\nconst _ = require(\"lodash\");\n\nexport function createSMSO(\n  rawMatrix,\n  edgeCutoff,\n  rawPatientMovementData,\n  metadata,\n  trans_locLevel\n) {\n  //Assumed the input is true\n  //Take an adjacency matrix of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge <= cut-off\n  let mat = _.cloneDeep(rawMatrix);\n  let patientMovementData = _.cloneDeep(rawPatientMovementData);\n  let edgeList = [];\n  let nodeList = [];\n  mat.forEach((val, key) => {\n    nodeList.push(key);\n    let sortedRow = val;\n\n    //Filter by cut-off\n    if (edgeCutoff !== null && edgeCutoff > 0) {\n      sortedRow = sortedRow.filter((e) => {\n        return e.value <= edgeCutoff;\n      });\n    }\n\n    //merge\n    edgeList = edgeList.concat(sortedRow);\n  });\n\n  //Asses transmission signal on each edge\n  let directedEdges = [];\n  let undirectedEdges = [];\n  if (edgeList.length > 0) {\n    for (let i = 0; i < edgeList.length; i++) {\n      let e = edgeList[i];\n      //get pid\n      let p1_id = metadata.get(e.source).patient_id;\n      let p2_id = metadata.get(e.target).patient_id;\n\n      let p1_sampleDate = moment(metadata.get(e.source).sample_date);\n      let p2_sampleDate = moment(metadata.get(e.target).sample_date);\n\n      //get the stays\n      let p1_stays = patientMovementData.get(p1_id)\n        ? new StayList(patientMovementData.get(p1_id))\n        : null;\n\n      let p2_stays = patientMovementData.get(p2_id)\n        ? new StayList(patientMovementData.get(p2_id))\n        : null;\n\n      //console.log(p1_id, p1_stays_obj instanceof StayList);\n      //console.log(p1_id, p1_stays_obj);\n\n      //if we have stays data for both isolates, do, else return 0 and break\n      //console.log(p1_id, p1_stays);\n      if (\n        p1_stays instanceof StayList &&\n        p2_stays instanceof StayList &&\n        Array.isArray(p1_stays.stays) &&\n        Array.isArray(p2_stays.stays) &&\n        p1_stays.stays.length > 0 &&\n        p2_stays.stays.length > 0\n      ) {\n        //which location level do these patients shared? hospital=1? ward=2? bay=3? bed=4?\n        //console.log(p1_stays_obj);\n        //console.log(p1_stays_obj.getLocationLevel());\n        let p1_locLevel = p1_stays.getLocationLevel();\n        let p2_locLevel = p2_stays.getLocationLevel();\n        let common_locLevel = Math.min(p1_locLevel, p2_locLevel)\n          ? Math.min(p1_locLevel, p2_locLevel)\n          : null;\n\n        //console.log(common_locLevel, p1_locLevel, p2_locLevel);\n\n        //if they dont shared any location, not even hospital, return e as undirected with score = 1 (genomic only)\n        if (!common_locLevel) {\n          e[\"dir\"] = \"none\";\n          e.value = 1;\n          undirectedEdges.push(e);\n        } else {\n          //if they share location, at least hospital\n          //check whether that had any overlap admission\n          let p1_rangeOfStay = p1_stays.getRangeOfStays();\n          let p2_rangeOfStay = p2_stays.getRangeOfStays();\n\n          let p1_range = moment.range(\n            p1_rangeOfStay.start_date.startOf(\"day\"),\n            p1_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let p2_range = moment.range(\n            p2_rangeOfStay.start_date.startOf(\"day\"),\n            p2_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let is_p1_p2_overlap = p1_range.overlaps(p2_range);\n          if (is_p1_p2_overlap) {\n            //they do have overlap\n            //compare the highest common level of location (common_locLevel) for both patients\n\n            if (p2_sampleDate.isAfter(p1_sampleDate, \"day\")) {\n              let transmissionScore = calculateTransScore(\n                p1_id,\n                p2_id,\n                p1_stays,\n                p2_stays,\n                common_locLevel\n              );\n              e[\"dir\"] = \"forward\";\n              e.value = 1 + transmissionScore;\n              directedEdges.push(e);\n            } else {\n              e[\"dir\"] = \"none\";\n              e.value = 1;\n              undirectedEdges.push(e);\n            }\n          } else {\n            //they dont have any overlap\n            e[\"dir\"] = \"none\";\n            e.value = 1;\n            undirectedEdges.push(e);\n          }\n        }\n      } else {\n        e[\"dir\"] = \"none\";\n        e.value = 1;\n        undirectedEdges.push(e);\n      }\n    }\n  }\n\n  //let clean_undirectedEdges = filterInverseSymEdges(undirectedEdges);\n  //merge edges\n\n  directedEdges = directedEdges.filter((e) => {\n    return e.value >= trans_locLevel;\n  });\n\n  //SCORING: 1: snps only, 2: snps+hospital, 3: snps+ ward, 4: snps+bay, 5: snps+bed\n\n  //return nodes and edges with direction property\n  //[edgeList[0]]\n\n  return { nodes: nodeList, edges: directedEdges };\n}\n\nfunction calculateTransScore(p1, p2, p1_stays, p2_stays, common_locLevel) {\n  let scoreOverlap = 0;\n\n  //filter stays to only to the level of both patients shared location\n  let p1_stays_common = p1_stays.stays.filter((s) => {\n    return getHighestLocation(s) === common_locLevel;\n  });\n  let p2_stays_common = p2_stays.stays.filter((st) => {\n    return getHighestLocation(st) === common_locLevel;\n  });\n\n  //console.log(p1_stays_common, p2_stays_common);\n\n  //at the level of\n\n  //compared each stays, get the least common location level, save to store, if we found bigger score, update\n  for (let i = 0; i < p1_stays_common.length; i++) {\n    let p1_stay = p1_stays_common[i];\n    let p1_stay_range = moment.range(\n      p1_stay.start_date.startOf(\"day\"),\n      p1_stay.end_date.endOf(\"day\")\n    );\n\n    for (let j = 0; j < p2_stays_common.length; j++) {\n      let p2_stay = p2_stays_common[j];\n      let p2_stay_range = moment.range(\n        p2_stay.start_date.startOf(\"day\"),\n        p2_stay.end_date.endOf(\"day\")\n      );\n\n      let is_stays_overlap = p1_stay_range.overlaps(p2_stay_range);\n\n      if (is_stays_overlap) {\n        let overlapDur = p1_stay_range.intersect(p2_stay_range).diff(\"days\");\n\n        if (overlapDur <= 7) {\n          //need to find, at which location level they were overlap\n          //check the deepest one\n\n          let loc_comm_score = getOverlapLocationLevel(p1_stay, p2_stay);\n\n          if (p1 === \"P-13\" && p2 === \"P-18\") {\n            //console.log(\"???\", is_stays_overlap);\n            //console.log(\"+++\", overlapDur, \"days\");\n            // console.log(loc_comm_score);\n            // console.log(\n            //   \"p1\",\n            //   p1_stay.hospital_id,\n            //   p1_stay.ward_id,\n            //   p1_stay.bay_id,\n            //   p1_stay.bed_id\n            // );\n            // console.log(\n            //   \"p2\",\n            //   p2_stay.hospital_id,\n            //   p2_stay.ward_id,\n            //   p2_stay.bay_id,\n            //   p2_stay.bed_id\n            // );\n          }\n          if (loc_comm_score > scoreOverlap) {\n            scoreOverlap = loc_comm_score;\n          }\n        }\n      }\n    }\n  }\n  return scoreOverlap;\n  //SCORING: 1: hospital, 2: ward, 3: bay, 4: bed\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js",["335"],"//========================================== SeqTrack ================================================\n/* Adapted from SeqTrack algorithm implemented in:\n- paper\n*/\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\n\nconst _ = require(\"lodash\");\nconst moment = extendMoment(Moment);\nvar dbinom = require(\"@stdlib/stats-base-dists-binomial-pmf\");\n\nexport function createSeqTrack(\n  rawMatrix,\n  metadataMap,\n  snpSeq_len,\n  mut_rate = null\n) {\n  let hammingDistMat = _.cloneDeep(rawMatrix);\n  //list of case\n  let cases = []; //list of case object [ {id: caseID, date: caseDate}, ...  ]\n  metadataMap.forEach((val, key) => {\n    cases.push({ id: key, date: val.sample_date });\n  });\n  // console.log(\"cases:\", cases);\n\n  //error check\n  let paramsError = false;\n  //check for consistency of id between sequence and metadata\n  for (let i = 0; i < cases.length; i++) {\n    let aCase = cases[i];\n    let caseInAlignment = hammingDistMat.has(aCase.id);\n    if (!caseInAlignment) {\n      paramsError = true;\n      alert(\n        \"Case id in metadata is not consistent with taxa id in alignment:\" +\n          aCase.id\n      );\n      break;\n    }\n  }\n  //other check\n\n  //Fun 4: Running selAmongAncestors\n  function selAmongAncestors(\n    aCase,\n    ancesWithLowestSNPdist,\n    snpLen = snpSeq_len,\n    mu = mut_rate,\n    metadata = metadataMap\n  ) {\n    //if proximity matrix is available do here:\n    //but not now, because we dont have one in graphsnp\n\n    if (ancesWithLowestSNPdist.length > 1) {\n      let ancesWithLowestSNPdist_wDate = ancesWithLowestSNPdist\n        .map((d) => {\n          d[\"date\"] = moment(metadata.get(d.id).sample_date);\n          return d;\n        })\n        .sort((a, b) => a.date > b.date);\n\n      // if mutation rate not available, choose the oldest one\n\n      if (!mut_rate || !snpLen) {\n        let oldestAnces = ancesWithLowestSNPdist_wDate[0];\n        return { ances: oldestAnces.id, snpDist: oldestAnces.snpDist };\n      } else {\n        console.log(\"with mutation\");\n        let case_date = moment(aCase.date);\n        let ancesWithLowestSNPdist_wDayDiff = ancesWithLowestSNPdist_wDate.map(\n          (a) => {\n            let timeDiff = case_date.diff(a.date, \"days\");\n            let prob = dbinom(a.snpDist, timeDiff * snpLen, mu);\n            a[\"dayDiff\"] = timeDiff;\n            a[\"probability\"] = prob;\n            return a;\n          }\n        );\n        let sorted_ancesWithLowestSNPdist_wDayDiff =\n          ancesWithLowestSNPdist_wDayDiff.sort(\n            (a, b) => a.probability < b.probability\n          );\n        let mostProbableAnces = sorted_ancesWithLowestSNPdist_wDayDiff[0];\n        // improvement: if there are two equaly most probable ances, return all.\n        return {\n          ances: mostProbableAnces.id,\n          snpDist: mostProbableAnces.snpDist,\n        };\n      }\n    }\n  }\n\n  //Fun 3: Get snp distances between case to its ances candidates, then select the lowest\n  function compareAncesSNPdist(aCase, ancesCanditates, hammingDistMat) {\n    let snpDistAnces = [];\n    for (let i = 0; i < ancesCanditates.length; i++) {\n      const ancesCandId = ancesCanditates[i].id;\n      // edgesOfAnces is a list of object paired (both dir)\n      let edgesOfAnces = hammingDistMat.get(ancesCandId).filter((d) => {\n        if (d.target === aCase.id) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      snpDistAnces.push({ id: ancesCandId, snpDist: edgesOfAnces[0].value });\n    }\n\n    snpDistAnces.sort((a, b) => a.snpDist - b.snpDist);\n    // console.log(\"snpDistAnces\", snpDistAnces);\n    //which ances has the lowest SNP dist?\n    let lowestSNPdistAnces = snpDistAnces.filter((e) => {\n      if (e.snpDist === snpDistAnces[0].snpDist) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // console.log(\"lowestSNPdistAnces\", lowestSNPdistAnces);\n    return lowestSNPdistAnces;\n  }\n\n  //Fun 2: Running and calling selAmongAncestors\n  function findAncestor(aCase, cases, hammingDistMat) {\n    //Search and return 1 best ancestor for a caseID, from the list of available cases\n    //+based on case's collection date, and (if available) mutation rate and haplo length\n    //+(length of snp sites)\n    let bestAncestor = { ances: null, snpDist: null };\n    //1. Find ancestor candidates: other case(s) which collected before this caseId\n    let candid = cases.filter((c) => {\n      if (c.date < aCase.date) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    //2. Check whether this case have ancestor(s) or not. If no its the index case (ancestor = 'NA')\n    //+ if has multiple canditates, run selAmongAncestors to choose 1 most likely candidate\n\n    // if it is index case, set ances to NA, return bestAnces\n    if (candid.length === 0) {\n      bestAncestor.ances = \"NA\";\n      bestAncestor.snpDist = \"NA\";\n      // console.log(\"index case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // if it is the second case (only have 1 candidate). set ances to identified ances, return bestAnces\n    else if (candid.length === 1) {\n      bestAncestor.ances = candid[0].id;\n      let candidHamDist = hammingDistMat.get(candid[0].id).filter((d) => {\n        let cond = d.target === aCase.id ? true : false;\n        return cond;\n      });\n      bestAncestor.snpDist = candidHamDist[0].value;\n      // console.log(\"second case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // any other cases (multiple candidates were found)\n    else {\n      //filter candidates based on their snp distance, get candidate(s) with the least snpDist\n      let ancesWithLowestSNPdist = compareAncesSNPdist(\n        aCase,\n        candid,\n        hammingDistMat\n      ); //return a list of ances(s) [{}, {}]\n\n      //check if ancesWithLowestSNPdist is more than 1\n      if (ancesWithLowestSNPdist.length > 1) {\n        let selectedAnces = selAmongAncestors(aCase, ancesWithLowestSNPdist);\n        bestAncestor.ances = selectedAnces.ances;\n        bestAncestor.snpDist = selectedAnces.snpDist;\n        return bestAncestor;\n      } else {\n        //ancesWithLowestSNPdist is a list of one object [{ances: 'ancesID', snpDist: number}]\n        bestAncestor.ances = ancesWithLowestSNPdist[0].id;\n        bestAncestor.snpDist = ancesWithLowestSNPdist[0].snpDist;\n        return bestAncestor;\n      }\n    }\n  }\n\n  // PERFORM THIS FUN IF ALL REQUIREMENTS ARE MET\n  if (!paramsError) {\n    //initial result\n    let res = new Map();\n    for (let index = 0; index < cases.length; index++) {\n      const thisCase = cases[index];\n      //Fun 1: calling findAncestor function\n      let ancestor = findAncestor(thisCase, cases, hammingDistMat); //must return one best ancestor object for this caseId {ances: sample_id, snpDist= null}\n      //set the ancestor of this case to the result map\n      res.set(thisCase.id, ancestor);\n    }\n\n    //create a final graph object from the res map object\n    let final_graph = { nodes: [], edges: [] };\n    res.forEach((v, k) => {\n      final_graph.nodes.push(k);\n      if (v.ances !== \"NA\") {\n        final_graph.edges.push({\n          source: v.ances,\n          target: k,\n          value: v.snpDist,\n          dir: \"forward\",\n        });\n      }\n    });\n    //final_graph.nodes.push(\"NA\");\n\n    //return final graph\n\n    return final_graph;\n  } else {\n    let final_graph = { nodes: null, edges: null };\n    return final_graph;\n  }\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js",["336","337"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js",["338"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Collapse, Table } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { changeSelectedNode } from \"../action/graphSettingsActions\";\n\nconst { Panel } = Collapse;\nconst moment = extendMoment(Moment);\nconst MetadataBox = (props) => {\n  //STATES\n  const [dataTable, setdataTable] = useState({\n    columns: null,\n    cells: null,\n  });\n\n  //USEEFFECTS\n  useEffect(() => {\n    if (props.metadata && props.selectedNode) {\n      if (props.selectedNode.length > 0) {\n        let selectedNodeList = props.selectedNode.map((n) =>\n          props.metadata.get(n)\n        );\n        let columns = [];\n        let dataSource = [];\n        selectedNodeList.forEach((d) => {\n          let keyIndexFoUniq = 0;\n          for (const [k, v] of Object.entries(d)) {\n            //column\n            columns.push({\n              title: k,\n              dataIndex: k,\n              key: k + keyIndexFoUniq.toString(),\n            });\n            //datasource in index i\n            let dataSourceInIndex = dataSource[0];\n            let dataInIndex = {};\n            if (dataSourceInIndex) {\n              // if exist, copy it\n              dataInIndex = Object.assign({}, dataSourceInIndex);\n            }\n            //console.log(\"before\", dataInIndex);\n            if (!dataInIndex.key) {\n              dataInIndex[\"key\"] = keyIndexFoUniq.toString();\n            }\n            if (k === \"sample_date\") {\n              dataInIndex[k] = moment(v).format(\"YYYY-MM-DD\");\n            } else {\n              dataInIndex[k] = v;\n            }\n\n            dataSource = [dataInIndex];\n            //keyIndexFoUniq = keyIndexFoUniq + 1;\n            //console.log(\"after\", dataInIndex);\n          }\n        });\n\n        setdataTable({\n          columns: columns,\n          cells: dataSource,\n        });\n      } else {\n        setdataTable({\n          columns: null,\n          cells: null,\n        });\n      }\n    }\n  }, [props.selectedNode]);\n\n  return (\n    <React.Fragment>\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: \"10\",\n          top: \"inherit\",\n          width: \"100%\",\n        }}\n      >\n        {props.metadata && props.graphObject && (\n          <Row>\n            <Col span={24}>\n              <Collapse bordered={false} expandIconPosition=\"left\">\n                <Panel\n                  style={{\n                    marginBottom: \"0px\",\n                    textAlign: \"left\",\n                    overflowY: \"auto\",\n                  }}\n                  header={\n                    <p style={{ marginBottom: \"0px\" }}>\n                      <InfoCircleOutlined /> Selected node metadata\n                    </p>\n                  }\n                  key=\"100\"\n                >\n                  {props.selectedNode &&\n                    props.graphObject &&\n                    dataTable.columns && (\n                      <Table\n                        size=\"small\"\n                        pagination={false}\n                        style={{ width: \"100%\" }}\n                        dataSource={dataTable.cells}\n                        columns={dataTable.columns}\n                      />\n                    )}\n\n                  {!props.selectedNode && <p>No selected node</p>}\n                </Panel>\n              </Collapse>\n            </Col>\n          </Row>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    colorLUT: state.colorLUT,\n    selectedNode: state.selectedNode,\n    graphObject: state.graphObject,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeSelectedNode,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MetadataBox);\n\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js",["339","340","341","342"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_intra_inter.js",["343","344"],"import * as d3Scale from \"d3-scale\";\nimport * as d3Array from \"d3-array\";\nimport * as d3Axis from \"d3-axis\";\nimport * as d3Selection from \"d3-selection\";\nimport * as d3Fetches from \"d3-fetch\";\n\nimport { getBarChartTickValues } from \"../utils/utils\";\n\nexport function createBar_intraInter(\n  svg,\n  chart_data_intra,\n  chart_data_inter,\n  w_all,\n  h_all,\n  margin,\n  chartSessionToStore\n) {\n  //GENERAL\n  const margin_stats = 30;\n  const margin_intra_inter = 30;\n  const cont_bar_w = w_all;\n  const cont_bar_h = h_all / 2 - margin_stats * 2;\n  svg\n    .attr(\"width\", w_all + margin.left + margin.right)\n    .attr(\"height\", h_all + margin.top + margin.bottom);\n\n  //DATA: INTRA-TOP\n  let data_len_intra = chart_data_intra.length;\n  let data_min_intra = parseFloat(d3Array.min(chart_data_intra)).toFixed(0);\n  let data_max_intra = parseFloat(d3Array.max(chart_data_intra)).toFixed(0);\n  let data_q1_intra = parseFloat(\n    d3Array.quantile(chart_data_intra, 0.25)\n  ).toFixed(1);\n  let data_q3_intra = parseFloat(\n    d3Array.quantile(chart_data_intra, 0.75)\n  ).toFixed(1);\n  let data_median_intra = parseFloat(d3Array.median(chart_data_intra)).toFixed(\n    1\n  );\n  let data_mean_intra = parseFloat(d3Array.mean(chart_data_intra)).toFixed(1);\n\n  //prepare data\n  const barMap_intra = d3Array.rollup(\n    chart_data_intra,\n    (v) => v.length,\n    (d) => d\n  );\n  const barData_intra = Array.from(barMap_intra.entries()); //[{0: isKey, 1: isValue}]\n  const barSNP_dist_intra = Array.from(barMap_intra.keys());\n  const barSNP_freq_intra = Array.from(barMap_intra.values());\n\n  //DATA: INTER-BOTTOM\n  let data_len_inter = chart_data_inter.length;\n  let data_min_inter = parseFloat(d3Array.min(chart_data_inter)).toFixed(0);\n  let data_max_inter = parseFloat(d3Array.max(chart_data_inter)).toFixed(0);\n  let data_q1_inter = parseFloat(\n    d3Array.quantile(chart_data_inter, 0.25)\n  ).toFixed(1);\n  let data_q3_inter = parseFloat(\n    d3Array.quantile(chart_data_inter, 0.75)\n  ).toFixed(1);\n  let data_median_inter = parseFloat(d3Array.median(chart_data_inter)).toFixed(\n    1\n  );\n  let data_mean_inter = parseFloat(d3Array.mean(chart_data_inter)).toFixed(1);\n\n  //prepare data\n  const barMap_inter = d3Array.rollup(\n    chart_data_inter,\n    (v) => v.length,\n    (d) => d\n  );\n  const barData_inter = Array.from(barMap_inter.entries()); //[{0: isKey, 1: isValue}]\n  const barSNP_dist_inter = Array.from(barMap_inter.keys());\n  const barSNP_freq_inter = Array.from(barMap_inter.values());\n\n  //DRAWING: INTRA-TOP\n  //scales\n  const bar_linear_scale_v_intra = d3Scale.scaleLinear().range([cont_bar_h, 0]);\n  const bar_band_scale_h_intra = d3Scale.scaleBand().range([0, cont_bar_w]);\n  const bar_bandWidth_intra =\n    cont_bar_w / (d3Array.range(0, d3Array.max(barSNP_dist_intra)).length + 1);\n\n  //create scale\n  let bar_linear_scale_x_intra = bar_linear_scale_v_intra;\n  bar_linear_scale_x_intra.domain([0, d3Array.max(barSNP_freq_intra)]);\n\n  let bar_band_scale_y_intra = bar_band_scale_h_intra;\n  bar_band_scale_y_intra.domain(\n    d3Array.range(0, d3Array.max(barSNP_dist_intra) + 1)\n  );\n\n  // create axis\n  //axis\n  const bar_axis_x_intra = d3Axis.axisLeft().scale(bar_linear_scale_x_intra);\n  const bar_axis_y_intra = d3Axis\n    .axisBottom()\n    .scale(bar_band_scale_y_intra)\n    .tickValues(getBarChartTickValues(bar_band_scale_y_intra.domain()));\n\n  //DRAWING\n  //make group root of svg for transformation purpose\n  let svgGroup = svg.append(\"g\").attr(\"id\", \"snpdist_svgGroup\");\n\n  let svgGroup_intra = svgGroup\n    .append(\"g\")\n    .attr(\"id\", \"snpdist_svgGroup_intra\")\n    .attr(\n      \"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\"\n    );\n\n  //stats text\n  let stats_text_intra = [\n    \"INTRA-Group pairwise distances (n:\",\n    data_len_intra,\n    \"), Min: \",\n    data_min_intra,\n    \", Q1:\",\n    data_q1_intra,\n    \", Median:\",\n    data_median_intra,\n    \", Mean:\",\n    data_mean_intra,\n    \", Q3:\",\n    data_q3_intra,\n    \", Max:\",\n    data_max_intra,\n  ].join(\"\");\n\n  let barchart_stats_g_intra = svgGroup_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-stats-g-intra\");\n  barchart_stats_g_intra\n    .append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"y\", margin_stats / 2)\n    .text(stats_text_intra);\n\n  let barchart_g_intra = svgGroup_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-g-intra\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + margin_stats + \")scale(1)\");\n\n  //h axis\n  barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-y-intra\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + cont_bar_h + \")scale(1)\")\n    .call(bar_axis_y_intra);\n\n  //h axis label group\n  let h_axis_label_g_intra = barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"h-axis-label-g-intra\")\n    .attr(\n      \"transform\",\n      \"translate(\" + cont_bar_w / 2 + \",\" + cont_bar_h + \")scale(1)\"\n    );\n\n  //h axis label\n  h_axis_label_g_intra\n    .append(\"text\")\n    .attr(\"id\", \"h-axis-label-intra\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Pairwise SNP distance\");\n\n  //v axis\n  barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-x-intra\")\n    .attr(\"transform\", \"translate(\" + -5 + \",\" + 0 + \")scale(1)\")\n    .call(bar_axis_x_intra);\n\n  //v axis label group\n  let v_axis_label_g_intra = barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"v-axis-label-g-intra\")\n    .attr(\n      \"transform\",\n      \"translate(\" + -5 + \",\" + cont_bar_h / 2 + \")scale(1) rotate(-90)\"\n    );\n\n  //v axis label\n  v_axis_label_g_intra\n    .append(\"text\")\n    .attr(\"id\", \"v-axis-label-intra\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Frequency\");\n\n  //bar chart\n  let bar_g_intra = barchart_g_intra.append(\"g\").attr(\"id\", \"bar-group-intra\");\n  bar_g_intra\n    .selectAll(\".barchart-bar-intra\")\n    .data(barData_intra)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"barchart-bar-intra\")\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"fill\", \"gray\")\n    .attr(\"x\", function (d) {\n      let res = bar_band_scale_y_intra(d[0]);\n      return res;\n    })\n    .attr(\"y\", function (d) {\n      let res = bar_linear_scale_x_intra(d[1]);\n      return res;\n    })\n    .attr(\"width\", function (d) {\n      let res = bar_bandWidth_intra;\n      return res;\n    })\n    .attr(\"height\", function (d) {\n      let res = Math.abs(\n        bar_linear_scale_x_intra(d[1]) - bar_linear_scale_x_intra(0)\n      );\n      return res;\n    });\n\n  //DRAWING: INTRA-TOP\n  //scales\n  const bar_linear_scale_v_inter = d3Scale.scaleLinear().range([cont_bar_h, 0]);\n  const bar_band_scale_h_inter = d3Scale.scaleBand().range([0, cont_bar_w]);\n  const bar_bandWidth_inter =\n    cont_bar_w / (d3Array.range(0, d3Array.max(barSNP_dist_inter)).length + 1);\n\n  //create scale\n  let bar_linear_scale_x_inter = bar_linear_scale_v_inter;\n  bar_linear_scale_x_inter.domain([0, d3Array.max(barSNP_freq_inter)]);\n\n  let bar_band_scale_y_inter = bar_band_scale_h_inter;\n  bar_band_scale_y_inter.domain(\n    d3Array.range(0, d3Array.max(barSNP_dist_inter) + 1)\n  );\n\n  // create axis function\n  const bar_axis_x_inter = d3Axis.axisLeft().scale(bar_linear_scale_x_inter);\n  const bar_axis_y_inter = d3Axis\n    .axisBottom()\n    .scale(bar_band_scale_y_inter)\n    .tickValues(getBarChartTickValues(bar_band_scale_y_inter.domain()));\n\n  //DRAWING\n  //make group root of svg for transformation purpose\n  let translate_y_pos =\n    cont_bar_h + margin_stats * 2 + margin.top + margin_intra_inter;\n\n  let svgGroup_inter = svgGroup\n    .append(\"g\")\n    .attr(\"id\", \"snpdist_svgGroup_inter\")\n    .attr(\n      \"transform\",\n      \"translate(\" + margin.left + \",\" + translate_y_pos + \")scale(1)\"\n    );\n\n  //stats text\n  let stats_text_inter = [\n    \"INTER-Group pairwise distances (n:\",\n    data_len_inter,\n    \"), Min: \",\n    data_min_inter,\n    \", Q1:\",\n    data_q1_inter,\n    \", Median:\",\n    data_median_inter,\n    \", Mean:\",\n    data_mean_inter,\n    \", Q3:\",\n    data_q3_inter,\n    \", Max:\",\n    data_max_inter,\n  ].join(\"\");\n\n  let barchart_stats_g_inter = svgGroup_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-stats-g-inter\");\n\n  barchart_stats_g_inter\n    .append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"y\", margin_stats / 2)\n    .text(stats_text_inter);\n\n  let barchart_g_inter = svgGroup_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-g-inter\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + margin_stats + \")scale(1)\");\n\n  //h axis\n  barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-y-inter\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + cont_bar_h + \")scale(1)\")\n    .call(bar_axis_y_inter);\n\n  //h axis label group\n  let h_axis_label_g_inter = barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"h-axis-label-g-inter\")\n    .attr(\n      \"transform\",\n      \"translate(\" + cont_bar_w / 2 + \",\" + cont_bar_h + \")scale(1)\"\n    );\n\n  //h axis label\n  h_axis_label_g_inter\n    .append(\"text\")\n    .attr(\"id\", \"h-axis-label-inter\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Pairwise SNP distance\");\n\n  //v axis\n  barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-x-inter\")\n    .attr(\"transform\", \"translate(\" + -5 + \",\" + 0 + \")scale(1)\")\n    .call(bar_axis_x_inter);\n\n  //v axis label group\n  let v_axis_label_g_inter = barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"v-axis-label-g-inter\")\n    .attr(\n      \"transform\",\n      \"translate(\" + -5 + \",\" + cont_bar_h / 2 + \")scale(1) rotate(-90)\"\n    );\n\n  //v axis label\n  v_axis_label_g_inter\n    .append(\"text\")\n    .attr(\"id\", \"v-axis-label-inter\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Frquency\");\n\n  //bar chart\n  let bar_g_inter = barchart_g_inter.append(\"g\").attr(\"id\", \"bar-group-inter\");\n  bar_g_inter\n    .selectAll(\".barchart-bar-inter\")\n    .data(barData_inter)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"barchart-bar-inter\")\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"fill\", \"gray\")\n    .attr(\"x\", function (d) {\n      let res = bar_band_scale_y_inter(d[0]);\n      return res;\n    })\n    .attr(\"y\", function (d) {\n      let res = bar_linear_scale_x_inter(d[1]);\n      return res;\n    })\n    .attr(\"width\", function (d) {\n      let res = bar_bandWidth_inter;\n      return res;\n    })\n    .attr(\"height\", function (d) {\n      let res = Math.abs(\n        bar_linear_scale_x_inter(d[1]) - bar_linear_scale_x_inter(0)\n      );\n      return res;\n    });\n  //end inter\n\n  //console.log(\"finish\", +new Date());\n  //save this session to store\n  // let svgGroup_node = svgGroup.node();\n  // console.log(svgGroup_node);\n  // let thisSessionData = {\n  //   type: \"intra-inter-group\",\n  //   svgGroup_node,\n  //   w: w_all,\n  //   h: h_all,\n  //   margin,\n  // };\n  // chartSessionToStore(thisSessionData);\n}\n\nexport function recreateBar_intraInter(svg, prevSessionData) {\n  console.log(svg, prevSessionData);\n  svg\n    .attr(\n      \"width\",\n      prevSessionData.w +\n        prevSessionData.margin.left +\n        prevSessionData.margin.right\n    )\n    .attr(\n      \"height\",\n      prevSessionData.h +\n        prevSessionData.margin.top +\n        prevSessionData.margin.bottom\n    );\n  svg.append(prevSessionData.svgGroup_node.node());\n  //make group root of svg for transformation purpose\n  // let svgGroup_node = d3Selection\n  //   .select(prevSessionData.svgGroup_root)\n  //   .select(\"#snpdist_svgGroup\")\n  //   .node();\n  // console.log(svgGroup_node);\n}\n",{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","severity":1,"message":"350","line":14,"column":10,"nodeType":"351","messageId":"352","endLine":14,"endColumn":30},{"ruleId":"349","severity":1,"message":"353","line":55,"column":9,"nodeType":"351","messageId":"352","endLine":55,"endColumn":29},{"ruleId":"354","severity":1,"message":"355","line":98,"column":6,"nodeType":"356","endLine":98,"endColumn":26,"suggestions":"357"},{"ruleId":"354","severity":1,"message":"358","line":111,"column":6,"nodeType":"356","endLine":111,"endColumn":27,"suggestions":"359"},{"ruleId":"354","severity":1,"message":"360","line":120,"column":6,"nodeType":"356","endLine":120,"endColumn":31,"suggestions":"361"},{"ruleId":"354","severity":1,"message":"360","line":151,"column":6,"nodeType":"356","endLine":151,"endColumn":51,"suggestions":"362"},{"ruleId":"354","severity":1,"message":"363","line":169,"column":6,"nodeType":"356","endLine":169,"endColumn":28,"suggestions":"364"},{"ruleId":"354","severity":1,"message":"365","line":208,"column":6,"nodeType":"356","endLine":208,"endColumn":49,"suggestions":"366"},{"ruleId":"354","severity":1,"message":"365","line":244,"column":6,"nodeType":"356","endLine":244,"endColumn":56,"suggestions":"367"},{"ruleId":"349","severity":1,"message":"368","line":2,"column":33,"nodeType":"351","messageId":"352","endLine":2,"endColumn":39},{"ruleId":"345","replacedBy":"369"},{"ruleId":"347","replacedBy":"370"},{"ruleId":"349","severity":1,"message":"371","line":6,"column":3,"nodeType":"351","messageId":"352","endLine":6,"endColumn":15},{"ruleId":"349","severity":1,"message":"372","line":1,"column":10,"nodeType":"351","messageId":"352","endLine":1,"endColumn":13},{"ruleId":"345","replacedBy":"373"},{"ruleId":"347","replacedBy":"374"},{"ruleId":"349","severity":1,"message":"375","line":33,"column":9,"nodeType":"351","messageId":"352","endLine":33,"endColumn":25},{"ruleId":"349","severity":1,"message":"376","line":51,"column":9,"nodeType":"351","messageId":"352","endLine":51,"endColumn":32},{"ruleId":"349","severity":1,"message":"377","line":2,"column":27,"nodeType":"351","messageId":"352","endLine":2,"endColumn":33},{"ruleId":"349","severity":1,"message":"378","line":3,"column":10,"nodeType":"351","messageId":"352","endLine":3,"endColumn":25},{"ruleId":"349","severity":1,"message":"379","line":17,"column":31,"nodeType":"351","messageId":"352","endLine":17,"endColumn":43},{"ruleId":"349","severity":1,"message":"380","line":21,"column":7,"nodeType":"351","messageId":"352","endLine":21,"endColumn":8},{"ruleId":"354","severity":1,"message":"355","line":73,"column":6,"nodeType":"356","endLine":73,"endColumn":23,"suggestions":"381"},{"ruleId":"354","severity":1,"message":"358","line":83,"column":6,"nodeType":"356","endLine":83,"endColumn":27,"suggestions":"382"},{"ruleId":"354","severity":1,"message":"360","line":112,"column":6,"nodeType":"356","endLine":112,"endColumn":48,"suggestions":"383"},{"ruleId":"349","severity":1,"message":"384","line":115,"column":9,"nodeType":"351","messageId":"352","endLine":115,"endColumn":27},{"ruleId":"349","severity":1,"message":"385","line":9,"column":8,"nodeType":"351","messageId":"352","endLine":9,"endColumn":21},{"ruleId":"349","severity":1,"message":"386","line":15,"column":3,"nodeType":"351","messageId":"352","endLine":15,"endColumn":24},{"ruleId":"349","severity":1,"message":"385","line":5,"column":8,"nodeType":"351","messageId":"352","endLine":5,"endColumn":21},{"ruleId":"349","severity":1,"message":"387","line":2,"column":22,"nodeType":"351","messageId":"352","endLine":2,"endColumn":29},{"ruleId":"349","severity":1,"message":"388","line":6,"column":16,"nodeType":"351","messageId":"352","endLine":6,"endColumn":25},{"ruleId":"354","severity":1,"message":"389","line":71,"column":6,"nodeType":"356","endLine":71,"endColumn":26,"suggestions":"390"},{"ruleId":"349","severity":1,"message":"372","line":2,"column":10,"nodeType":"351","messageId":"352","endLine":2,"endColumn":13},{"ruleId":"349","severity":1,"message":"391","line":2,"column":15,"nodeType":"351","messageId":"352","endLine":2,"endColumn":18},{"ruleId":"349","severity":1,"message":"392","line":3,"column":10,"nodeType":"351","messageId":"352","endLine":3,"endColumn":28},{"ruleId":"349","severity":1,"message":"393","line":5,"column":9,"nodeType":"351","messageId":"352","endLine":5,"endColumn":14},{"ruleId":"349","severity":1,"message":"394","line":4,"column":13,"nodeType":"351","messageId":"352","endLine":4,"endColumn":24},{"ruleId":"349","severity":1,"message":"395","line":5,"column":13,"nodeType":"351","messageId":"352","endLine":5,"endColumn":22},"no-native-reassign",["396"],"no-negated-in-lhs",["397"],"no-unused-vars","'createClusterCSVFile' is defined but never used.","Identifier","unusedVar","'graph_typeOfAnalysis' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["398"],"React Hook useEffect has missing dependencies: 'props' and 'redraw'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["399"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["400"],["401"],"React Hook useEffect has missing dependencies: 'graph_layout' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["402"],"React Hook useEffect has a missing dependency: 'props.graphObject'. Either include it or remove the dependency array.",["403"],["404"],"'Select' is defined but never used.",["396"],["397"],"'DeleteFilled' is defined but never used.","'Row' is defined but never used.",["396"],["397"],"'chartOrientation' is assigned a value but never used.","'chartOrientationHandler' is assigned a value but never used.","'Button' is defined but never used.","'LoadingOutlined' is defined but never used.","'filterUnique' is defined but never used.","'_' is assigned a value but never used.",["405"],["406"],["407"],"'reloadChartHandler' is assigned a value but never used.","'GraphEdgeList' is defined but never used.","'filterInverseSymEdges' is defined but never used.","'Divider' is defined but never used.","'Paragraph' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.metadata'. Either include it or remove the dependency array.",["408"],"'Col' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'Panel' is assigned a value but never used.","'d3Selection' is defined but never used.","'d3Fetches' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"411","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"430","text":"431"},"Update the dependencies array to be: [isUserReloadSession, props, redraw]",{"range":"432","text":"433"},"Update the dependencies array to be: [graph_isUserDownloading, props]",{"range":"434","text":"435"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"436","text":"437"},"Update the dependencies array to be: [graph_isUserRelayout, graph_layout, props]",{"range":"438","text":"439"},"Update the dependencies array to be: [graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",{"range":"440","text":"441"},"Update the dependencies array to be: [graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",{"range":"442","text":"443"},"Update the dependencies array to be: [draw, isUserDrawChart, props]",{"range":"444","text":"445"},{"range":"446","text":"433"},"Update the dependencies array to be: [snpDistExportFormat, isUserExportSnpDist, props]",{"range":"447","text":"448"},"Update the dependencies array to be: [props.metadata, props.selectedNode]",{"range":"449","text":"450"},[4084,4104],"[draw, graph_isUserReDraw, props]",[4438,4459],"[isUserReloadSession, props, redraw]",[4742,4767],"[graph_isUserDownloading, props]",[5792,5837],"[graph_clusterMethod, graph_isUserClustering, props]",[6315,6337],"[graph_isUserRelayout, graph_layout, props]",[7330,7373],"[graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",[8319,8369],"[graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",[2628,2645],"[draw, isUserDrawChart, props]",[2854,2875],[3590,3632],"[snpDistExportFormat, isUserExportSnpDist, props]",[2144,2164],"[props.metadata, props.selectedNode]"]