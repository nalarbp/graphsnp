[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/main_matrix.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/comp_matrixViewer.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"34","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"35","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"36","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"37","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"38","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"39","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"40","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/phyloTimeTreeReducer.js":"41","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js":"42","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js":"43","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_phylotimetreeLoader.js":"44","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js":"45","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js":"46","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js":"47","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js":"48"},{"size":663,"mtime":1610195666935,"results":"49","hashOfConfig":"50"},{"size":1034,"mtime":1610950598064,"results":"51","hashOfConfig":"50"},{"size":362,"mtime":1610086392986,"results":"52","hashOfConfig":"50"},{"size":477,"mtime":1610107486220,"results":"53","hashOfConfig":"50"},{"size":717,"mtime":1610950774877,"results":"54","hashOfConfig":"50"},{"size":88,"mtime":1610155012196,"results":"55","hashOfConfig":"50"},{"size":1643,"mtime":1611896068534,"results":"56","hashOfConfig":"50"},{"size":933,"mtime":1611895657890,"results":"57","hashOfConfig":"50"},{"size":6223,"mtime":1612023452428,"results":"58","hashOfConfig":"50"},{"size":8233,"mtime":1612009314007,"results":"59","hashOfConfig":"50"},{"size":2628,"mtime":1610950731083,"results":"60","hashOfConfig":"50"},{"size":493,"mtime":1611897451728,"results":"61","hashOfConfig":"50"},{"size":159,"mtime":1611887099249,"results":"62","hashOfConfig":"50"},{"size":1343,"mtime":1611824451451,"results":"63","hashOfConfig":"50"},{"size":378,"mtime":1610108902860,"results":"64","hashOfConfig":"50"},{"size":584,"mtime":1610154547016,"results":"65","hashOfConfig":"50"},{"size":3111,"mtime":1611821695710,"results":"66","hashOfConfig":"50"},{"size":1709,"mtime":1611908219174,"results":"67","hashOfConfig":"50"},{"size":1250,"mtime":1611887060020,"results":"68","hashOfConfig":"50"},{"size":401,"mtime":1610683140985,"results":"69","hashOfConfig":"50"},{"size":695,"mtime":1611798893993,"results":"70","hashOfConfig":"50"},{"size":1058,"mtime":1611010611871,"results":"71","hashOfConfig":"50"},{"size":2025,"mtime":1612017821006,"results":"72","hashOfConfig":"50"},{"size":747,"mtime":1610950423257,"results":"73","hashOfConfig":"50"},{"size":605,"mtime":1611803437017,"results":"74","hashOfConfig":"50"},{"size":452,"mtime":1611822450355,"results":"75","hashOfConfig":"50"},{"size":383,"mtime":1611039003510,"results":"76","hashOfConfig":"50"},{"size":156,"mtime":1611039074948,"results":"77","hashOfConfig":"50"},{"size":1764,"mtime":1612010836604,"results":"78","hashOfConfig":"50"},{"size":3050,"mtime":1612009209303,"results":"79","hashOfConfig":"50"},{"size":390,"mtime":1611802301584,"results":"80","hashOfConfig":"50"},{"size":938,"mtime":1612013887881,"results":"81","hashOfConfig":"50"},{"size":391,"mtime":1611809625614,"results":"82","hashOfConfig":"50"},{"size":2952,"mtime":1612014278138,"results":"83","hashOfConfig":"50"},{"size":4174,"mtime":1612021742057,"results":"84","hashOfConfig":"50"},{"size":499,"mtime":1612021206837,"results":"85","hashOfConfig":"50"},{"size":396,"mtime":1611822589287,"results":"86","hashOfConfig":"50"},{"size":379,"mtime":1611887208678,"results":"87","hashOfConfig":"50"},{"size":220,"mtime":1611889589251,"results":"88","hashOfConfig":"50"},{"size":382,"mtime":1611895924238,"results":"89","hashOfConfig":"50"},{"size":398,"mtime":1611896115200,"results":"90","hashOfConfig":"50"},{"size":4779,"mtime":1612018822714,"results":"91","hashOfConfig":"50"},{"size":2581,"mtime":1612018594380,"results":"92","hashOfConfig":"50"},{"size":4790,"mtime":1612018387993,"results":"93","hashOfConfig":"50"},{"size":3105,"mtime":1611908366563,"results":"94","hashOfConfig":"50"},{"size":1084,"mtime":1611972093603,"results":"95","hashOfConfig":"50"},{"size":1548,"mtime":1612014276860,"results":"96","hashOfConfig":"50"},{"size":990,"mtime":1612023049857,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"13s4y1q",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["203","204"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["205","206"],"/*\n- Comp init => render => all useEffect\n- loading wont work using states, use indicator on draw button instead\n- All useEffect called when first loaded (eg: from Home to graphSNP page)\n- certain useEffect called when any deppendent useEffect affected\n*/\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { Col, Empty, message } from \"antd\";\nimport { createGraphObject } from \"../utils/create_graphObject\";\nimport { createCytoscapeData } from \"../utils/create_cyData\";\nimport { findClusters } from \"../utils//find_clusters\";\nimport cytoscape from \"cytoscape\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { createColorLUT, getColorByColorIndex } from \"../utils/utils\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport {\n  hmmMatrixToStore,\n  graphObjectToStore,\n  graphClusterToStore,\n} from \"../action/graphMatrixActions\";\nimport {\n  changeIsUserReDrawSetting,\n  changeIsUserClusteringSetting,\n} from \"../action/graphSettingsActions\";\n\nconst _ = require(\"lodash\");\n\nconst GraphContainer = (props) => {\n  //state\n  const [graphIsAvailable, setGraphIsAvailable] = useState(false);\n  const [processingGraph, setProcessingGraph] = useState(false);\n\n  //Settings\n  const graph_method = props.graphSettings.method;\n  const graph_layout = props.graphSettings.layout;\n  const graph_isUserReDraw = props.graphSettings.isUserReDraw;\n  const graph_edgeFilterCutoff = props.graphSettings.edgeFilterCutoff;\n  const graph_clusterMethod = props.graphSettings.clusterMethod;\n  const graph_isUserClustering = props.graphSettings.isUserClustering;\n  const graph_colorNodeBy = props.graphSettings.colorNodedBy;\n  //const graph_exportFormat = props.graphSettings.exportFormat;\n  //const graph_isUserDownloading = props.graphSettings.isUserDownloading;\n\n  //Internal setting\n  const cy_layout = { name: graph_layout, animate: false, fit: true };\n  const cytoscapeRef = useRef(null);\n\n  useEffect(() => {\n    if (graph_isUserReDraw) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        draw();\n        setGraphIsAvailable(true);\n        setProcessingGraph(false);\n        props.changeIsUserReDrawSetting(false);\n      }, 100);\n    }\n  }, [graph_isUserReDraw]);\n\n  useEffect(() => {\n    if (graph_isUserClustering && props.graphObject) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        //call clustering\n        let clusters = findClusters(props.graphObject, graph_clusterMethod);\n        setProcessingGraph(false);\n        message.success(\n          `Found ${clusters.group.length} clusters in the graph`,\n          2\n        );\n        //update colorLUT by new clusters color\n        let colorLUT_byCluster = createColorLUT(clusters.members, \"clusterID\");\n        let newColorLUT = _.cloneDeep(props.colorLUT);\n        if (newColorLUT) {\n          let updated_newColorLUT = {\n            ...newColorLUT,\n            clusterID: colorLUT_byCluster,\n          };\n          newColorLUT = updated_newColorLUT;\n        } else {\n          newColorLUT = { clusterID: colorLUT_byCluster };\n        }\n        props.colorLUTtoStore(newColorLUT);\n\n        props.graphClusterToStore(clusters);\n        props.changeIsUserClusteringSetting(false);\n      }, 100);\n    }\n  }, [graph_clusterMethod, graph_isUserClustering]);\n\n  useEffect(() => {\n    if (graph_layout && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      let layout = { name: graph_layout, animate: false, fit: true };\n      cy.layout(layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_layout]);\n\n  useEffect(() => {\n    if (graph_colorNodeBy && props.colorLUT && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      //console.log(graph_colorNodeBy, props.colorLUT);\n      cy.style()\n        .selector(\"node\")\n        .style({\n          \"background-color\": function (d) {\n            let isolate_name = d.data(\"id\");\n            let col = getColorByColorIndex(\n              isolate_name,\n              graph_colorNodeBy,\n              props.colorLUT\n            );\n            //console.log(props.colorLUT[graph_colorNodeBy]);\n            return col;\n          },\n        })\n        .update();\n\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_colorNodeBy, props.colorLUT]);\n\n  //DRAW\n  function draw() {\n    //check hamming distance ? if not create one, send to store at the end.\n    const hammingMatrix = !props.hammMatrix\n      ? new HammingMatrix(props.sequence).getHammingMatrix()\n      : props.hammMatrix;\n\n    //Look at param (method, seq, ), generate graph object: util functions\n    //graphObject: {type:'mcg', mapData: edgeList object}\n    const graphObject = createGraphObject(\n      hammingMatrix,\n      graph_method,\n      graph_edgeFilterCutoff,\n      props.metadata,\n      props.phyloTimeTree\n    );\n\n    //generate cytoscape data\n    //graphObject = [{data:{id:id, nodeType:'singleton', data:[]}}, { data: {source: s, target: t, weight: w} } ]\n    const cytoscapeData = createCytoscapeData(graphObject);\n\n    //Load and view cytoscape\n    if (cytoscapeData) {\n      const cy = cytoscape({\n        elements: cytoscapeData,\n        container: document.getElementById(\"graph-cont-cytoscape-canvas\"),\n        pannable: true,\n        selected: true,\n        boxSelectionEnabled: false,\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              label: \"data(id)\",\n              \"border-width\": 3,\n              \"border-style\": \"solid\",\n              \"border-color\": \"black\",\n              \"background-color\": \"lightgray\",\n            },\n          },\n          {\n            selector: \"edge\",\n            style: {\n              label: \"data(weight)\",\n              \"font-size\": \"8px\",\n              \"text-background-color\": \"#F5E372\",\n              color: \"black\",\n              width: 3,\n              \"target-arrow-color\": \"black\",\n              \"target-arrow-shape\": (e) => {\n                return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n              },\n              \"curve-style\": \"bezier\",\n            },\n          },\n          {\n            selector: \":selected\",\n            style: {\n              \"border-width\": \"5\",\n              \"border-color\": \"red\",\n              \"border-style\": \"dashed\",\n              padding: \"8px\",\n            },\n          },\n        ],\n      });\n      cy.layout(cy_layout).run();\n      //save current Ref\n      cytoscapeRef.current = cy;\n\n      //==== SEND TO STORE ====\n      if (props.hammMatrix) {\n        props.hmmMatrixToStore(hammingMatrix);\n      }\n      props.graphObjectToStore(graphObject);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Col span={24} style={{ position: \"relative\" }}>\n        <div\n          id=\"graph-cont-is-empty\"\n          style={{ display: graphIsAvailable ? \"none\" : \"block\" }}\n        >\n          <Empty\n            description={\"No previous graph found: click draw to create one\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div\n          id=\"graph-cont-is-processing\"\n          style={{ display: processingGraph ? \"block\" : \"none\" }}\n        >\n          <p>\n            <span>\n              <LoadingOutlined\n                style={{\n                  fontSize: 18,\n                }}\n                spin\n              />\n            </span>{\" \"}\n            Processing ...\n          </p>\n        </div>\n      </Col>\n      <div id=\"graph-cont-cytoscape-canvas\"></div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    phyloTimeTree: state.phyloTimeTree,\n    sequence: state.sequence,\n    graphObject: state.graphObject,\n    hammMatrix: state.hammMatrix,\n    graphSettings: state.graphSettings,\n    colorLUT: state.colorLUT,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeIsUserClusteringSetting,\n      changeIsUserReDrawSetting,\n      hmmMatrixToStore,\n      graphObjectToStore,\n      graphClusterToStore,\n      colorLUTtoStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphContainer);\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/main_matrix.js",["207","208","209"],"import React from \"react\";\nimport { Row, Col, Modal, Spin } from \"antd\";\nimport \"./style_matrix.css\";\nimport { connect } from \"react-redux\";\n\n//import MatrixViewer from \"./comp_matrixViewer\";\n\nconst GraphMatrix = (props) => {\n  return (\n    <React.Fragment>\n      <Row></Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    graphMatrix: state.graphMatrix,\n  };\n}\n\nexport default connect(mapStateToProps)(GraphMatrix);\n\n/*\n<Col xs={24}>\n          {props.graphMatrix.data &&\n            props.graphMatrix.data.cells &&\n            props.graphMatrix.data.headers && (\n              <MatrixViewer graphMatrix={props.graphMatrix} />\n            )}\n        </Col>\n\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/comp_matrixViewer.js",[],["210","211"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/phyloTimeTreeReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js",["212","213","214"],"import React from \"react\";\nimport { Upload, Button, message, List } from \"antd\";\nimport { StopOutlined, CheckCircleFilled } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  sequenceToStore,\n  metadataToStore,\n  phyloTimeTreeToStore,\n  isinputLoadingToStore,\n} from \"../action/inputActions\";\n\nconst fastaToJson = require(\"bio-parsers\").fastaToJson;\nconst { Dragger } = Upload;\n\nconst InputLoader = (props) => {\n  //console.log(\"Input Loader - init\");\n\n  async function readFastaToJSON(fastaString) {\n    if (props.sequence === null) {\n      //console.log(\"async\");\n      const sequenceJSON = await fastaToJson(fastaString);\n      const snpsSequence = [];\n      if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n        //console.log(sequenceJSON);\n        //check all error message, alert, and no seq to store\n        let isolateName = {};\n        let seqLen = [];\n        let noErr = true;\n        for (let index = 0; index < sequenceJSON.length; index++) {\n          let messages = sequenceJSON[index].messages;\n          let parsedSequence = sequenceJSON[index].parsedSequence;\n          let success = sequenceJSON[index].success;\n          //tracking size\n          if (seqLen.indexOf(parsedSequence.size) === -1) {\n            seqLen.push(parsedSequence.size);\n          }\n          //check success parsing\n          if (!success) {\n            noErr = false;\n            alert(\"Parsing error:\", parsedSequence.name);\n            break;\n          }\n          //check err messages\n          if (messages.length > 0) {\n            noErr = false;\n            alert(messages[0]);\n            break;\n          }\n          //check sequence length\n          if (seqLen.length > 1) {\n            noErr = false;\n            alert(\"Size error: Alignment required sequence with same length\");\n            break;\n          }\n          //check duplicated isolate\n          if (!isolateName[parsedSequence.name]) {\n            isolateName[parsedSequence.name] = true;\n          } else {\n            noErr = false;\n            alert(\"Sequence error: Duplicated sequence\");\n            break;\n          }\n          //making snpsSequence\n          if (noErr) {\n            snpsSequence.push({\n              id: parsedSequence.name,\n              size: parsedSequence.size,\n              sequence: parsedSequence.sequence.toLowerCase(),\n            });\n          }\n        }\n\n        if (noErr) {\n          //load to store\n          props.sequenceToStore(snpsSequence);\n          //props.isinputLoadingToStore(false);\n          //display success message\n          message.success(\"The sequences have been loaded\", 1);\n        }\n      } else {\n        alert(\"Error: Required at least 2 sequences\");\n      }\n    } else {\n      alert(\"Sequences have been loaded. Refresh to re-load a new one\");\n    }\n  }\n\n  const beforeUploadHandler = (file) => {\n    if (file) {\n      let inputType = \"seq\";\n\n      //check extension\n      //check content\n\n      switch (inputType) {\n        case \"seq\":\n          const reader = new FileReader();\n          reader.readAsText(file);\n          props.isinputLoadingToStore(true);\n          reader.onloadend = function (evt) {\n            const dataText = evt.target.result;\n            readFastaToJSON(dataText);\n            props.isinputLoadingToStore(false);\n          };\n          break;\n\n        default:\n          message.error(\"Invalid input file\", 0.5);\n          break;\n      }\n    }\n    return false; //to avoid upload action (we parse and load it to store instead)\n  };\n\n  const getIconStatus = function () {\n    if (props.sequence) {\n      return <CheckCircleFilled style={{ fontSize: \"14pt\" }} />;\n    } else {\n      return <StopOutlined />;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Dragger\n        accept={\".fa, .fasta, .fna, .mfa\"}\n        showUploadList={false}\n        style={{\n          height: \"500px\",\n          backgroundColor: \"white\",\n        }}\n        name=\"file\"\n        multiple={false}\n        action=\"dummy-post\"\n        beforeUpload={beforeUploadHandler}\n      >\n        <div id=\"input-loader-snps\">\n          <Button id=\"input-loader-button-snps\" shape={\"round\"} size={\"large\"}>\n            {getIconStatus()} SNPs\n          </Button>\n        </div>\n      </Dragger>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    sequence: state.sequence,\n    phyloTimeTree: state.phyloTimeTree,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      sequenceToStore,\n      isinputLoadingToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputLoader);\n\n/*\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js",["215"],"import React from \"react\";\nimport { Upload, Button, message, List } from \"antd\";\nimport { StopOutlined, CheckOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { metadataToStore, isinputLoadingToStore } from \"../action/inputActions\";\nimport { getMetadataInput } from \"./util_inputLoaders\";\nconst { Dragger } = Upload;\n\nconst MetadataInputLoader = (props) => {\n  //console.log(\"Input Loader - init\");\n  const beforeUploadHandler = (file) => {\n    if (file) {\n      let inputType = \"metadata\";\n      //check extension\n      //check content\n      switch (inputType) {\n        case \"metadata\":\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          props.isinputLoadingToStore(true);\n          reader.onloadend = function (evt) {\n            const dataUrl = evt.target.result;\n            getMetadataInput(\n              dataUrl,\n              props.metadataToStore,\n              props.colorLUTtoStore,\n              props.isinputLoadingToStore\n            );\n          };\n          break;\n\n        default:\n          message.error(\"Invalid input file\", 0.5);\n          break;\n      }\n    }\n    return false; //to avoid upload action (we parse and load it to store instead)\n  };\n\n  const getIconStatus = function () {\n    if (props.sequence) {\n      return <CheckOutlined style={{ color: \"#52c41a\" }} />;\n    } else {\n      return <StopOutlined />;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Dragger\n        accept={\".csv\"}\n        showUploadList={false}\n        style={{\n          height: \"500px\",\n          backgroundColor: \"white\",\n        }}\n        name=\"file\"\n        multiple={false}\n        action=\"dummy-post\"\n        beforeUpload={beforeUploadHandler}\n      >\n        <div id=\"input-loader-metadata\">\n          <Button\n            id=\"input-loader-button-metadata\"\n            shape={\"round\"}\n            size={\"large\"}\n          >\n            {getIconStatus()} Metadata\n          </Button>\n        </div>\n      </Dragger>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      metadataToStore,\n      colorLUTtoStore,\n      isinputLoadingToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MetadataInputLoader);\n\n/*\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_phylotimetreeLoader.js",["216"],"import React from \"react\";\nimport { Upload, Button, message, List } from \"antd\";\nimport { StopOutlined, CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { metadataToStore, isinputLoadingToStore } from \"../action/inputActions\";\n\nconst fastaToJson = require(\"bio-parsers\").fastaToJson;\nconst { Dragger } = Upload;\n\nconst PhyloTimeTreeInputLoader = (props) => {\n  //console.log(\"Input Loader - init\");\n\n  async function readFastaToJSON(fastaString) {\n    if (props.sequence === null) {\n      //console.log(\"async\");\n      const sequenceJSON = await fastaToJson(fastaString);\n      const snpsSequence = [];\n      if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n        //console.log(sequenceJSON);\n        //check all error message, alert, and no seq to store\n        let isolateName = {};\n        let seqLen = [];\n        let noErr = true;\n        for (let index = 0; index < sequenceJSON.length; index++) {\n          let messages = sequenceJSON[index].messages;\n          let parsedSequence = sequenceJSON[index].parsedSequence;\n          let success = sequenceJSON[index].success;\n          //tracking size\n          if (seqLen.indexOf(parsedSequence.size) === -1) {\n            seqLen.push(parsedSequence.size);\n          }\n          //check success parsing\n          if (!success) {\n            noErr = false;\n            alert(\"Parsing error:\", parsedSequence.name);\n            break;\n          }\n          //check err messages\n          if (messages.length > 0) {\n            noErr = false;\n            alert(messages[0]);\n            break;\n          }\n          //check sequence length\n          if (seqLen.length > 1) {\n            noErr = false;\n            alert(\"Size error: Alignment required sequence with same length\");\n            break;\n          }\n          //check duplicated isolate\n          if (!isolateName[parsedSequence.name]) {\n            isolateName[parsedSequence.name] = true;\n          } else {\n            noErr = false;\n            alert(\"Sequence error: Duplicated sequence\");\n            break;\n          }\n          //making snpsSequence\n          if (noErr) {\n            snpsSequence.push({\n              id: parsedSequence.name,\n              size: parsedSequence.size,\n              sequence: parsedSequence.sequence.toLowerCase(),\n            });\n          }\n        }\n\n        if (noErr) {\n          //load to store\n          props.sequenceToStore(snpsSequence);\n          //props.isinputLoadingToStore(false);\n          //display success message\n          message.success(\"The sequences have been loaded\", 2);\n        }\n      } else {\n        alert(\"Error: Required at least 2 sequences\");\n      }\n    } else {\n      alert(\"Sequences have been loaded. Refresh to re-load a new one\");\n    }\n  }\n\n  const beforeUploadHandler = (file) => {\n    if (file) {\n      let inputType = \"phyloTimeTree\";\n\n      //check extension\n      //check content\n\n      switch (inputType) {\n        case \"phyloTimeTree\":\n          const reader = new FileReader();\n          reader.readAsText(file);\n          props.isinputLoadingToStore(true);\n          reader.onloadend = function (evt) {\n            const dataText = evt.target.result;\n            readFastaToJSON(dataText);\n            props.isinputLoadingToStore(false);\n          };\n          break;\n\n        default:\n          message.error(\"Invalid input file\", 0.5);\n          break;\n      }\n    }\n    return false; //to avoid upload action (we parse and load it to store instead)\n  };\n\n  const getIconStatus = function () {\n    if (props.sequence) {\n      return <CheckCircleTwoTone twoToneColor=\"#52c41a\" />;\n    } else {\n      return <StopOutlined />;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Dragger\n        accept={\".csv\"}\n        showUploadList={false}\n        style={{\n          height: \"500px\",\n          backgroundColor: \"white\",\n        }}\n        name=\"file\"\n        multiple={false}\n        action=\"dummy-post\"\n        beforeUpload={beforeUploadHandler}\n      >\n        <div id=\"input-loader-phyloTimeTree\">\n          <Button\n            id=\"input-loader-button-phyloTimeTree\"\n            shape={\"round\"}\n            size={\"large\"}\n          >\n            {getIconStatus()} Time Tree\n          </Button>\n        </div>\n      </Dragger>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      metadataToStore,\n      isinputLoadingToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PhyloTimeTreeInputLoader);\n\n/*\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js",["217","218"],"function GraphEdgeList(graphAdjacencyMap) {\n  //instance of edge list that take an adjacency map object\n  this.adjMap = graphAdjacencyMap;\n}\n\nGraphEdgeList.prototype.nodes = function () {\n  return graphAdjacencyMap.keys();\n};\n\nGraphEdgeList.prototype.edges = function () {\n  let edgeList = [];\n  this.adjMap.forEach((val, key) => {\n    val.forEach((c) => {\n      edgeList.push({ source: key, target: c.target, value: c.value });\n    });\n  });\n  return edgeList;\n};\n\nGraphEdgeList.prototype.symetricEdges = function () {\n  let symEdges = this.edges();\n  symEdges = symEdges.filter(\n    (thing, index, self) =>\n      index ===\n      self.findIndex(\n        (t) =>\n          t.source === thing.target &&\n          t.target === thing.source &&\n          t.value === thing.value\n      )\n  );\n  return symEdges;\n};\n\nGraphEdgeList.prototype.cutSymeticEdges = function (cutOff) {\n  let cutSymEdges = this.symetricEdges();\n  if (cutOff && cutOff > 0) {\n    cutSymEdges = edgeList.filter((e) => {\n      return e.val < cutOff;\n    });\n  }\n  return cutSymEdges;\n};\n\nexport default GraphEdgeList;\n",["219","220"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js",[],{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":61,"column":6,"nodeType":"227","endLine":61,"endColumn":26,"suggestions":"228"},{"ruleId":"225","severity":1,"message":"229","line":92,"column":6,"nodeType":"227","endLine":92,"endColumn":51,"suggestions":"230"},{"ruleId":"231","severity":1,"message":"232","line":2,"column":15,"nodeType":"233","messageId":"234","endLine":2,"endColumn":18},{"ruleId":"231","severity":1,"message":"235","line":2,"column":20,"nodeType":"233","messageId":"234","endLine":2,"endColumn":25},{"ruleId":"231","severity":1,"message":"236","line":2,"column":27,"nodeType":"233","messageId":"234","endLine":2,"endColumn":31},{"ruleId":"221","replacedBy":"237"},{"ruleId":"223","replacedBy":"238"},{"ruleId":"231","severity":1,"message":"239","line":2,"column":35,"nodeType":"233","messageId":"234","endLine":2,"endColumn":39},{"ruleId":"231","severity":1,"message":"240","line":8,"column":3,"nodeType":"233","messageId":"234","endLine":8,"endColumn":18},{"ruleId":"231","severity":1,"message":"241","line":9,"column":3,"nodeType":"233","messageId":"234","endLine":9,"endColumn":23},{"ruleId":"231","severity":1,"message":"239","line":2,"column":35,"nodeType":"233","messageId":"234","endLine":2,"endColumn":39},{"ruleId":"231","severity":1,"message":"239","line":2,"column":35,"nodeType":"233","messageId":"234","endLine":2,"endColumn":39},{"ruleId":"242","severity":2,"message":"243","line":7,"column":10,"nodeType":"233","messageId":"244","endLine":7,"endColumn":27},{"ruleId":"242","severity":2,"message":"245","line":37,"column":17,"nodeType":"233","messageId":"244","endLine":37,"endColumn":25},{"ruleId":"221","replacedBy":"246"},{"ruleId":"223","replacedBy":"247"},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["250"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["251"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Spin' is defined but never used.",["248"],["249"],"'List' is defined but never used.","'metadataToStore' is defined but never used.","'phyloTimeTreeToStore' is defined but never used.","no-undef","'graphAdjacencyMap' is not defined.","undef","'edgeList' is not defined.",["248"],["249"],"no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"256","text":"257"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"258","text":"259"},[2326,2346],"[draw, graph_isUserReDraw, props]",[3371,3416],"[graph_clusterMethod, graph_isUserClustering, props]"]