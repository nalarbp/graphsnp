[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"34","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"35","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"36","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"37","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"38","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js":"39","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js":"40","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js":"41","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js":"42","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js":"43","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js":"44","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js":"45","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js":"46","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js":"47","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js":"48","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js":"49","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js":"50","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js":"51","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js":"52","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js":"53","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js":"54","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js":"55","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js":"56","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js":"57","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js":"58","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js":"59","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js":"60","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js":"61","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js":"62","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js":"63","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js":"64","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js":"65","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js":"66","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js":"67","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js":"68","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js":"69","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js":"70","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js":"71","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js":"72","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_intra_inter.js":"73","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/distanceMatrix_prop.js":"74","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mscg.js":"75","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/img/circle.js":"76","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack_ori.js":"77","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/projectsReducer.js":"78"},{"size":663,"mtime":1610195666935,"results":"79","hashOfConfig":"80"},{"size":1045,"mtime":1612155926082,"results":"81","hashOfConfig":"80"},{"size":362,"mtime":1610086392986,"results":"82","hashOfConfig":"80"},{"size":477,"mtime":1610107486220,"results":"83","hashOfConfig":"80"},{"size":646,"mtime":1644817317751,"results":"84","hashOfConfig":"80"},{"size":88,"mtime":1610155012196,"results":"85","hashOfConfig":"80"},{"size":3171,"mtime":1644836368451,"results":"86","hashOfConfig":"80"},{"size":1169,"mtime":1632196418176,"results":"87","hashOfConfig":"80"},{"size":29208,"mtime":1644837261169,"results":"88","hashOfConfig":"80"},{"size":20998,"mtime":1644836775086,"results":"89","hashOfConfig":"80"},{"size":2634,"mtime":1633421033449,"results":"90","hashOfConfig":"80"},{"size":725,"mtime":1644300780253,"results":"91","hashOfConfig":"80"},{"size":159,"mtime":1611887099249,"results":"92","hashOfConfig":"80"},{"size":2898,"mtime":1644835462965,"results":"93","hashOfConfig":"80"},{"size":378,"mtime":1610108902860,"results":"94","hashOfConfig":"80"},{"size":584,"mtime":1610154547016,"results":"95","hashOfConfig":"80"},{"size":6013,"mtime":1644835424975,"results":"96","hashOfConfig":"80"},{"size":7639,"mtime":1644390241449,"results":"97","hashOfConfig":"80"},{"size":3691,"mtime":1644835443733,"results":"98","hashOfConfig":"80"},{"size":401,"mtime":1610683140985,"results":"99","hashOfConfig":"80"},{"size":3162,"mtime":1633422848658,"results":"100","hashOfConfig":"80"},{"size":970,"mtime":1628782168193,"results":"101","hashOfConfig":"80"},{"size":1461,"mtime":1633655887396,"results":"102","hashOfConfig":"80"},{"size":452,"mtime":1611822450355,"results":"103","hashOfConfig":"80"},{"size":383,"mtime":1611039003510,"results":"104","hashOfConfig":"105"},{"size":156,"mtime":1611039074948,"results":"106","hashOfConfig":"105"},{"size":2068,"mtime":1634260809010,"results":"107","hashOfConfig":"80"},{"size":3248,"mtime":1633593375075,"results":"108","hashOfConfig":"80"},{"size":390,"mtime":1611802301584,"results":"109","hashOfConfig":"80"},{"size":2478,"mtime":1637596105639,"results":"110","hashOfConfig":"80"},{"size":391,"mtime":1611809625614,"results":"111","hashOfConfig":"80"},{"size":2742,"mtime":1629170912428,"results":"112","hashOfConfig":"80"},{"size":4437,"mtime":1634890099735,"results":"113","hashOfConfig":"80"},{"size":618,"mtime":1637596264645,"results":"114","hashOfConfig":"80"},{"size":396,"mtime":1611822589287,"results":"115","hashOfConfig":"80"},{"size":379,"mtime":1611887208678,"results":"116","hashOfConfig":"80"},{"size":220,"mtime":1611889589251,"results":"117","hashOfConfig":"80"},{"size":379,"mtime":1612088497120,"results":"118","hashOfConfig":"80"},{"size":7345,"mtime":1644311573078,"results":"119","hashOfConfig":"80"},{"size":3827,"mtime":1628837361638,"results":"120","hashOfConfig":"80"},{"size":13510,"mtime":1644829152846,"results":"121","hashOfConfig":"80"},{"size":1759,"mtime":1628134710228,"results":"122","hashOfConfig":"80"},{"size":975,"mtime":1628743494809,"results":"123","hashOfConfig":"80"},{"size":1301,"mtime":1633424001414,"results":"124","hashOfConfig":"80"},{"size":408,"mtime":1612088419622,"results":"125","hashOfConfig":"80"},{"size":250,"mtime":1612088403076,"results":"126","hashOfConfig":"80"},{"size":2295,"mtime":1628744407732,"results":"127","hashOfConfig":"80"},{"size":487,"mtime":1612141196612,"results":"128","hashOfConfig":"105"},{"size":10290,"mtime":1633422887270,"results":"129","hashOfConfig":"80"},{"size":9067,"mtime":1632464703215,"results":"130","hashOfConfig":"80"},{"size":3147,"mtime":1628649252294,"results":"131","hashOfConfig":"80"},{"size":1376,"mtime":1631258070585,"results":"132","hashOfConfig":"80"},{"size":1437,"mtime":1628649292116,"results":"133","hashOfConfig":"80"},{"size":698,"mtime":1612251042608,"results":"134","hashOfConfig":"105"},{"size":1945,"mtime":1631767380230,"results":"135","hashOfConfig":"80"},{"size":3595,"mtime":1628837390281,"results":"136","hashOfConfig":"105"},{"size":405,"mtime":1613173279348,"results":"137","hashOfConfig":"80"},{"size":1413,"mtime":1613285314789,"results":"138","hashOfConfig":"80"},{"size":561,"mtime":1613264520935,"results":"139","hashOfConfig":"105"},{"size":7607,"mtime":1628825042519,"results":"140","hashOfConfig":"80"},{"size":7049,"mtime":1632464914269,"results":"141","hashOfConfig":"80"},{"size":7568,"mtime":1634191091922,"results":"142","hashOfConfig":"80"},{"size":2418,"mtime":1629158334353,"results":"143","hashOfConfig":"80"},{"size":1365,"mtime":1632465004183,"results":"144","hashOfConfig":"80"},{"size":2869,"mtime":1629158168156,"results":"145","hashOfConfig":"80"},{"size":404,"mtime":1628788106330,"results":"146","hashOfConfig":"80"},{"size":4003,"mtime":1644313942392,"results":"147","hashOfConfig":"80"},{"size":3814,"mtime":1644819251217,"results":"148","hashOfConfig":"80"},{"size":1585,"mtime":1628873754821,"results":"149","hashOfConfig":"105"},{"size":395,"mtime":1628876227672,"results":"150","hashOfConfig":"80"},{"size":415,"mtime":1629784335300,"results":"151","hashOfConfig":"80"},{"size":190,"mtime":1629784386865,"results":"152","hashOfConfig":"80"},{"size":11596,"mtime":1630909800157,"results":"153","hashOfConfig":"105"},{"size":3110,"mtime":1644829288930,"results":"154","hashOfConfig":"80"},{"size":4987,"mtime":1644836909668,"results":"155","hashOfConfig":"80"},{"size":571,"mtime":1633671995231,"results":"156","hashOfConfig":"80"},{"size":7505,"mtime":1634189095172,"results":"157","hashOfConfig":"105"},{"size":386,"mtime":1644300732018,"results":"158","hashOfConfig":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"10exqss",{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"161"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"161"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"161"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},"13s4y1q",{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"161"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"161"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"161"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"161"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"161"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"161"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"161"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"161"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"321"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"161"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["333","334"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",["335","336"],"import React from \"react\";\nimport {\n  Button,\n  Row,\n  Col,\n  Select,\n  InputNumber,\n  Checkbox,\n  Divider,\n  Tooltip,\n  Modal,\n  Spin,\n  Slider,\n} from \"antd\";\nimport {\n  QuestionCircleOutlined,\n  LoadingOutlined,\n  ReloadOutlined,\n} from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport * as constant from \"../utils/constants\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  createClusterCSVFile,\n  createDOTGraph,\n} from \"../utils/create_exportFile\";\nimport {\n  selectDemoDataToStore,\n  sequenceToStore,\n  projectJSONToStore,\n  metadataToStore,\n  patientMovementToStore,\n  isinputLoadingToStore,\n} from \"../action/inputActions\";\nimport { hmmMatrixToStore } from \"../action/graphMatrixActions\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { categoricalMapToStore } from \"../action/categoricalMapActions\";\nimport {\n  loadProjectJSON,\n  snpsLoader,\n  getMetadataInput,\n  getMatrixInput,\n  loadSNPsequence,\n  getPatientMovementInput,\n} from \"../page_home/util_inputLoaders\";\n\nimport {\n  changeMethodSetting,\n  changeLayoutSetting,\n  changeIsUserReDrawSetting,\n  changeEdgeFilterCutoffSetting,\n  changeClusterMethodSetting,\n  changeIsUserClusteringSetting,\n  changeExportFormatSetting,\n  changeIsUserDownloadingSetting,\n  changeColorNodeSetting,\n  changeIsEdgeScaledSetting,\n  changeEdgeScaleFactorSetting,\n  changeIsHideEdgesByCutoff,\n  changeEdgesHideCutoff,\n  changeTransIcludeLocLevel,\n  changeTypeOfAnalysisSetting,\n  changeIsUserFilterEdgesSetting,\n  changeIsUserRelayoutSetting,\n  changeSelectedNode,\n  changeNodeIsLabelShown,\n  changeEdgeLabelSizeSetting,\n} from \"../action/graphSettingsActions\";\nimport isShowingLoadingModalToStore from \"../action/isShowingLoadingModalActions\";\n\nconst { Option } = Select;\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 34 }} spin />;\n\nconst SiderMenu = (props) => {\n  //GLOBAL VAR\n  //STATES\n\n  //SETTINGS\n  const graph_method = props.graphSettings.method;\n  const graph_layout = props.graphSettings.layout;\n  const graph_isUserReDraw = props.graphSettings.isUserReDraw;\n  const graph_isUserFilterEdges = props.graphSettings.isUserFilteringEdge;\n  const graph_edgeFilterCutoff = props.graphSettings.edgeFilterCutoff;\n  const graph_clusterMethod = props.graphSettings.clusterMethod;\n  const graph_isUserClustering = props.graphSettings.isUserClustering;\n  const graph_isEdgeScaled = props.graphSettings.isEdgeScaled;\n  const graph_edgeScaleFactor = props.graphSettings.edgeScaleFactor;\n  const graph_isEdgesHideByCutoff = props.graphSettings.isHideEdgesByCutoff;\n  const graph_edgesHideCutoff = props.graphSettings.hiddenEdgesCutoff;\n  const graph_colorNodeBy = props.graphSettings.colorNodedBy;\n  const graph_exportFormat = props.graphSettings.exportFormat;\n  const trans_locLevel = props.graphSettings.transIncludeLocLevel;\n  const graph_typeOfAnalysis = props.graphSettings.typeOfAnalysis;\n  const graph_isUserRelayout = props.graphSettings.isUserRelayout;\n  const graph_node_isLabelShown = props.graphSettings.node_isLabelShown;\n  const graph_edge_labelSize = props.graphSettings.edge_labelSize;\n  const selectedDemoData = props.selectDemoData;\n  let graph_nodeID_options = [];\n  let project_options = [];\n\n  //get nodeIDs from hamming matrix\n  if (props.hammMatrix) {\n    props.hammMatrix.forEach((v, k) => {\n      graph_nodeID_options.push(<Option key={k}>{k}</Option>);\n    });\n  }\n\n  //get preloaded project dataset for options\n  //List projects and create as options\n  if (props.projectJSON === null) {\n    loadProjectJSON(constant.PROJECTS_JSON_URL, props.projectJSONToStore);\n  }\n  if (props.projectJSON) {\n    props.projectJSON.forEach((v, k) => {\n      project_options.push(\n        <Option key={k} value={k}>\n          {v.name}\n        </Option>\n      );\n    });\n  }\n\n  //HANDLERS\n  const changeTypeOfAnalysisHandler = (val) => {\n    if (val === \"clustering\") {\n      props.changeMethodSetting(\"cathai\");\n    } else {\n      props.changeMethodSetting(\"seqtrack\");\n    }\n    props.changeTypeOfAnalysisSetting(val);\n  };\n\n  const changeMethodHandler = (val) => {\n    if (val === \"mscg\") {\n      props.changeLayoutSetting(\"cose-bilkent\");\n    } else {\n      props.changeLayoutSetting(\"cose\");\n    }\n    props.changeMethodSetting(val);\n  };\n\n  const changeLayoutHandler = (val) => {\n    if (graph_method === \"mscg\") {\n      props.changeLayoutSetting(\"cose-bilkent\");\n    }\n    props.changeLayoutSetting(val);\n  };\n\n  const reloadLayoutHandler = () => {\n    if (!graph_isUserRelayout) {\n      props.isShowingLoadingModalToStore(true);\n      props.changeIsUserRelayoutSetting(true);\n    }\n  };\n\n  const drawingHandler = () => {\n    if (!graph_isUserReDraw) {\n      props.isShowingLoadingModalToStore(true);\n      props.changeIsUserReDrawSetting(true);\n    }\n  };\n\n  const isUserFilterEdgesdHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeIsUserFilterEdgesSetting(isChecked);\n  };\n\n  const edgeCutoffHandler = (val) => {\n    if (val > 0) {\n      props.changeEdgeFilterCutoffSetting(val);\n    }\n  };\n\n  const changeClusterMethodHandler = (val) => {\n    props.changeClusterMethodSetting(val);\n  };\n\n  const clusteringHandler = () => {\n    if (!graph_isUserClustering) {\n      props.changeIsUserClusteringSetting(true);\n    }\n  };\n\n  const changeColorNodeHandler = (val) => {\n    props.changeColorNodeSetting(val);\n  };\n\n  const changeExportFormatHandler = (val) => {\n    props.changeExportFormatSetting(val);\n  };\n\n  const isEdgeScaledHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeIsEdgeScaledSetting(isChecked);\n  };\n\n  const edgeScaleFactorHandler = (val) => {\n    if (val > 0) {\n      props.changeEdgeScaleFactorSetting(val);\n    }\n  };\n\n  const isEdgeHideByCutoffHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeIsHideEdgesByCutoff(isChecked);\n  };\n\n  const edgesHideCutoffMinHandler = (val) => {\n    if (val >= 0) {\n      let newEdgeCutoff = { min: val, max: graph_edgesHideCutoff.max };\n      props.changeEdgesHideCutoff(newEdgeCutoff);\n    }\n  };\n\n  const edgesHideCutoffMaxHandler = (val) => {\n    if (val > 0) {\n      let newEdgeCutoff = { min: graph_edgesHideCutoff.min, max: val };\n      props.changeEdgesHideCutoff(newEdgeCutoff);\n    }\n  };\n\n  const changeTransLocLevelHandler = (val) => {\n    props.changeTransIcludeLocLevel(val);\n  };\n\n  const selectNodeIDsHandler = (val) => {\n    props.changeSelectedNode(val);\n  };\n  const edge_labelSizeHandler = (val) => {\n    props.changeEdgeLabelSizeSetting(val);\n  };\n\n  const isNodeLabelShownHandler = (e) => {\n    let isChecked = e.target.checked;\n    props.changeNodeIsLabelShown(isChecked);\n  };\n\n  const exportingHandler = () => {\n    switch (graph_exportFormat) {\n      case \"clusterID\":\n        if (props.graphClusters) {\n          createClusterCSVFile(props.graphClusters.members);\n        } else {\n          alert(\"No file: Need to initiate detect cluster first \");\n        }\n        break;\n      case \"svg\":\n        props.changeIsUserDownloadingSetting(true);\n        break;\n      case \"dot\":\n        createDOTGraph(props.graphObject);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const selectDemoDataHandler = (val) => {\n    // case for each demo data\n    if (props.projectJSON && val) {\n      //clean all states\n      props.sequenceToStore(null);\n      props.hmmMatrixToStore(null);\n      props.metadataToStore(null);\n      props.colorLUTtoStore(null);\n      props.categoricalMapToStore(null);\n      props.patientMovementToStore(null);\n\n      //load a new one\n      let projectData = props.projectJSON.get(val);\n\n      //meta\n      if (projectData.metadata) {\n        getMetadataInput(\n          projectData.metadata,\n          props.metadataToStore,\n          props.colorLUTtoStore,\n          props.categoricalMapToStore,\n          props.isinputLoadingToStore\n        );\n      }\n\n      //if snps alignment\n      if (projectData.matrixOrAlignment === \"alignment\") {\n        if (projectData.snpDistance) {\n          loadSNPsequence(\n            //need to do this because different parsing with drag and drop one\n            projectData.snpDistance,\n            props.sequenceToStore,\n            props.hmmMatrixToStore,\n            props.isinputLoadingToStore,\n            snpsLoader\n          );\n        }\n      } else if (projectData.matrixOrAlignment === \"matrix\") {\n        if (projectData.snpDistance) {\n          getMatrixInput(\n            projectData.snpDistance,\n            props.hmmMatrixToStore,\n            props.isinputLoadingToStore\n          );\n        }\n      }\n\n      props.selectDemoDataToStore(val);\n    } else {\n      props.selectDemoDataToStore(null);\n    }\n  };\n\n  //input list data\n\n  const getColorOption = function (header, i) {\n    return (\n      <Option key={i} disabled={false} value={header}>\n        {header}\n      </Option>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Row gutter={[8, 8]}>\n        <Col xs={24} id=\"modal-content\">\n          <Modal\n            visible={props.isShowingLoadingModal}\n            closable={false}\n            centered={true}\n            width={0}\n            footer={null}\n            bodyStyle={{\n              textAlign: \"center\",\n              padding: \"0px\",\n            }}\n          >\n            <Spin\n              indicator={loadingIcon}\n              style={{ color: \"white\" }}\n              tip=\"Preparing Graph\"\n              size=\"large\"\n            />\n          </Modal>\n        </Col>\n        <Col span={24}>\n          <h5>Preloaded dataset</h5>\n          <Select\n            value={selectedDemoData}\n            style={{ width: \"100%\", textOverflow: \"ellipsis\" }}\n            onChange={selectDemoDataHandler}\n          >\n            <Option value={null}>Select dataset</Option>\n            {project_options}\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <h5>Graph settings</h5>\n          <p>\n            Type of analysis{\" \"}\n            <span>\n              <Tooltip\n                title=\"Analysis to be performed. [1]Clustering: construct an undirected graph and detect putative cluster(s). [2]Transmission: construct a directed graph to show the putative transmission flow\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            disabled={props.hammMatrix ? false : true}\n            value={graph_typeOfAnalysis}\n            style={{ width: \"100%\" }}\n            onChange={changeTypeOfAnalysisHandler}\n          >\n            <Option\n              disabled={props.hammMatrix ? false : true}\n              value=\"clustering\"\n            >\n              {\" \"}\n              Clustering{\" \"}\n            </Option>\n            <Option\n              disabled={props.hammMatrix && props.metadata ? false : true}\n              value=\"transmission\"\n            >\n              Transmission\n            </Option>\n          </Select>\n        </Col>\n\n        {graph_typeOfAnalysis === \"clustering\" && (\n          <Col span={24}>\n            <p>\n              Method{\" \"}\n              <span>\n                <Tooltip\n                  title=\"Method to construct clustering graph. \n                  [1] CATHAI: given the SNP cut-off, create networks of pairwise SNP-distances between samples (Forde et al. 2021)\"\n                  placement=\"rightTop\"\n                >\n                  <QuestionCircleOutlined style={{ color: \"red\" }} />\n                </Tooltip>\n              </span>\n            </p>\n            <Select\n              disabled={props.hammMatrix && graph_typeOfAnalysis ? false : true}\n              value={graph_method}\n              style={{ width: \"100%\" }}\n              onChange={changeMethodHandler}\n            >\n              <Option value=\"cathai\">CATHAI</Option>\n              <Option\n                value=\"mscg\"\n                disabled={graph_isUserFilterEdges ? false : true}\n              >\n                MST Single-linkage Cluster\n              </Option>\n            </Select>\n          </Col>\n        )}\n\n        {graph_typeOfAnalysis === \"transmission\" && (\n          <Col span={24}>\n            <p>\n              Method{\" \"}\n              <span>\n                <Tooltip\n                  title=\"Method to construct transmission graph. \n                  [1]SeqTrack: construct a parsimonous transmission tree based on SNP distances and sampling dates (Jombart et al. 2014). \n                  [2]SNPs and patient stay: construct a directed graph where edges were weighted by sum of SNPs distance weight and patient stays\"\n                  placement=\"rightTop\"\n                >\n                  <QuestionCircleOutlined style={{ color: \"red\" }} />\n                </Tooltip>\n              </span>\n            </p>\n            <Select\n              disabled={graph_typeOfAnalysis ? false : true}\n              value={graph_method}\n              style={{ width: \"100%\" }}\n              onChange={changeMethodHandler}\n            >\n              <Option\n                disabled={props.hammMatrix && props.metadata ? false : true}\n                value=\"seqtrack\"\n              >\n                SeqTrack\n              </Option>\n            </Select>\n          </Col>\n        )}\n\n        <Col span={16}>\n          <p>\n            Layout{\" \"}\n            <span>\n              <Tooltip\n                title=\"Layout to display the graph.\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            disabled={props.hammMatrix ? false : true}\n            value={graph_layout}\n            style={{ width: \"100%\" }}\n            onChange={changeLayoutHandler}\n          >\n            <Option value=\"cose\"> CoSE</Option>\n            <Option value=\"spread\">Spread</Option>\n            <Option value=\"fcose\">fCoSE</Option>\n            <Option value=\"cose-bilkent\">CoSE Bilkent (Compound)</Option>\n            <Option value=\"dagre\">Dagre</Option>\n          </Select>\n        </Col>\n        <Col span={8}>\n          <p>\n            Refresh{\" \"}\n            <span>\n              <Tooltip\n                title=\"Apply selected layout to current graph.\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Button\n            disabled={props.graphObject ? false : true}\n            onClick={reloadLayoutHandler}\n            type=\"primary\"\n          >\n            <ReloadOutlined />\n          </Button>\n        </Col>\n\n        <Col span={24}>\n          <Checkbox\n            style={{ fontSize: \"10px\" }}\n            onChange={isUserFilterEdgesdHandler}\n            checked={graph_isUserFilterEdges}\n            disabled={\n              props.hammMatrix && graph_typeOfAnalysis === \"clustering\"\n                ? false\n                : true\n            }\n          >\n            Apply SNPs cutoff{\" \"}\n            <span>\n              <Tooltip\n                title=\"Apply a cutoff number to limit the maximum pairwise SNPs distance to be displayed.\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </Checkbox>\n        </Col>\n\n        <Col span={24}>\n          <p>\n            Cutoff number{\" \"}\n            <span>\n              <Tooltip\n                title=\"Maximum pairwise SNPs distance to be included in graph \n                  (e.g. 25 SNPs cutoff will include edges with 0 to 25 SNPs).\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <InputNumber\n            min={0}\n            disabled={\n              graph_isUserFilterEdges &&\n              props.hammMatrix &&\n              graph_typeOfAnalysis === \"clustering\"\n                ? false\n                : true\n            }\n            step={1}\n            value={graph_edgeFilterCutoff}\n            onChange={edgeCutoffHandler}\n            style={{ marginBottom: \"5px\" }}\n          />\n        </Col>\n\n        {graph_method === \"hierSnpsMetaStayOverlap\" && (\n          <Col span={24}>\n            <p>\n              Filter weighted edges\n              <span>\n                <Tooltip\n                  title=\"Filter edges based on its weight. \n                The weight is a combination score computed from pairwise SNP distances and stay overlap in hierarhical order.\n                The weight assignation are: \n                #1 (all SNP distances), \n                #2 (#1+SNP distances less and equal to cutoff),\n                #3 (#2+They had overlap stay at hospital level),\n                #4 (#3+They had overlap stay at ward level),\n                #5 (#4+They had overlap stay at bay level), and\n                #6 (#5+They had overlap stay at bed level).\n                So an edge with weight of #6 represents the highest score for a possible transmission\n                based on their SNPs distance and stay overlap in bed level.\n                *Stay overlap is considered in 7 days range (REF)\"\n                  placement=\"rightTop\"\n                >\n                  <QuestionCircleOutlined style={{ color: \"red\" }} />\n                </Tooltip>\n              </span>\n            </p>\n            <Select\n              disabled={\n                graph_method === \"hierSnpsMetaStayOverlap\" ? false : true\n              }\n              value={trans_locLevel}\n              style={{ width: \"100%\" }}\n              onChange={changeTransLocLevelHandler}\n            >\n              <Option value={1}>SNPs</Option>\n              <Option value={2}>Hospital</Option>\n              <Option value={3}>Ward</Option>\n              <Option value={4}>Bay</Option>\n              <Option value={5}>Bed</Option>\n            </Select>\n          </Col>\n        )}\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammMatrix ? false : true}\n            onClick={drawingHandler}\n            type=\"primary\"\n          >\n            Create graph\n          </Button>\n        </Col>\n\n        {graph_typeOfAnalysis === \"clustering\" && props.graphObject && (\n          <Divider style={{ margin: \"10px 0px 0px 0px\" }} />\n        )}\n\n        {graph_typeOfAnalysis === \"clustering\" && props.graphObject && (\n          <Col span={24}>\n            <h5>Clustering settings</h5>\n            <p>\n              Method{\" \"}\n              <span>\n                <Tooltip\n                  title=\"Method to detect cluster in the constructed graph.\n                  [1]Connected components: using Breadth-first search algorithm (Zhou and Hansen,2006) to find cluster (all connected nodes)\n                  [2]Louvain: using Louvain algoritm (Subelj and Bajec, 2011) to find the cluster(s) \"\n                  placement=\"rightTop\"\n                >\n                  <QuestionCircleOutlined style={{ color: \"red\" }} />\n                </Tooltip>\n              </span>\n            </p>\n            <Select\n              disabled={props.graphObject ? false : true}\n              value={graph_clusterMethod}\n              style={{ width: \"100%\" }}\n              onChange={changeClusterMethodHandler}\n            >\n              <Option value=\"Connected Components\">Connected Components</Option>\n            </Select>\n          </Col>\n        )}\n\n        {graph_typeOfAnalysis === \"clustering\" && props.graphObject && (\n          <Col span={24}>\n            <Button\n              type=\"primary\"\n              disabled={props.graphObject ? false : true}\n              onClick={clusteringHandler}\n            >\n              Detect clusters\n            </Button>\n          </Col>\n        )}\n\n        <Divider style={{ margin: \"10px 0px 0px 0px\" }} />\n\n        <h5>Node settings</h5>\n        <Col span={24}>\n          <p>\n            Node color{\" \"}\n            <span>\n              <Tooltip\n                title=\"Color nodes by the selected column in metadata or by the clustering result.\n                User can also specify the color manually\n                (e.g. To specify color on column 'patient_group', add new column named 'patient_group:color' in metadata).\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            disabled={props.graphObject ? false : true}\n            value={graph_colorNodeBy}\n            style={{ width: \"100%\" }}\n            onChange={changeColorNodeHandler}\n          >\n            {\" \"}\n            {props.colorLUT && Object.keys(props.colorLUT)\n              ? Object.keys(props.colorLUT).map((k, i) => {\n                  return getColorOption(k, i);\n                })\n              : [\"na\"].map((l, j) => {\n                  return getColorOption(l, j);\n                })}\n          </Select>\n        </Col>\n        <Col span={24}>\n          <p>\n            Select node(s){\" \"}\n            <span>\n              <Tooltip\n                title=\"Select one or more node IDs to highlight the node(s) on the graph\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Select ID(s)\"\n            onChange={selectNodeIDsHandler}\n            value={props.selectedNode}\n          >\n            {graph_nodeID_options}\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <Checkbox\n            style={{ fontSize: \"10px\" }}\n            onChange={isNodeLabelShownHandler}\n            checked={graph_node_isLabelShown}\n            disabled={props.graphObject ? false : true}\n          >\n            Show node label{\" \"}\n            <span>\n              <Tooltip title=\"Show or hide node's label.\" placement=\"rightTop\">\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </Checkbox>\n        </Col>\n\n        <h5>Edge settings</h5>\n        <Col span={24}>\n          <p>\n            Edge label size{\" \"}\n            <span>\n              <Tooltip title=\"Change edge label size\" placement=\"rightTop\">\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Slider\n            value={props.graphSettings.edge_labelSize}\n            min={0}\n            max={100}\n            onChange={edge_labelSizeHandler}\n            disabled={props.graphObject ? false : true}\n          />\n        </Col>\n\n        <Col span={24}>\n          <Checkbox\n            style={{ fontSize: \"10px\" }}\n            onChange={isEdgeScaledHandler}\n            checked={graph_isEdgeScaled}\n            disabled={props.graphObject ? false : true}\n          >\n            Scale edge to weight{\" \"}\n            <span>\n              <Tooltip\n                title=\"Change the thickness of the edge accordin to its weight.\n                  (e.g. the higher the transmission score the thicker the line).\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </Checkbox>\n        </Col>\n        <Col span={24}>\n          <p>\n            Scaling factor{\" \"}\n            <span>\n              <Tooltip\n                title=\"Multiply the thickness of the edge with the scaling factor (positive number greater than zero)\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <InputNumber\n            min={0.00001}\n            disabled={graph_isEdgeScaled && props.graphObject ? false : true}\n            step={0.1}\n            value={graph_edgeScaleFactor}\n            onChange={edgeScaleFactorHandler}\n          />\n        </Col>\n\n        <Col span={24}>\n          <Checkbox\n            style={{ fontSize: \"10px\" }}\n            onChange={isEdgeHideByCutoffHandler}\n            checked={graph_isEdgesHideByCutoff}\n            disabled={props.graphObject ? false : true}\n          >\n            Show partial edges{\" \"}\n            <span>\n              <Tooltip\n                title=\"Only show edges which have weight within the specified range (min to max)\n                (Note: It doesn't remove the edges but only hide it to the background)\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </Checkbox>\n        </Col>\n\n        <Col span={11}>\n          <p>Minimum</p>\n          <InputNumber\n            min={0}\n            disabled={\n              graph_isEdgesHideByCutoff && props.graphObject ? false : true\n            }\n            step={0.1}\n            value={graph_edgesHideCutoff.min}\n            onChange={edgesHideCutoffMinHandler}\n          />\n        </Col>\n\n        <Col span={11}>\n          <p>Maximum</p>\n          <InputNumber\n            min={0}\n            disabled={\n              graph_isEdgesHideByCutoff && props.graphObject ? false : true\n            }\n            step={0.1}\n            value={graph_edgesHideCutoff.max}\n            onChange={edgesHideCutoffMaxHandler}\n          />\n        </Col>\n\n        <Col span={24}>\n          <h5>Download settings</h5>\n          <p>\n            Type{\" \"}\n            <span>\n              <Tooltip\n                title=\"Type of file to be downloaded: \n                [1]Graph image (SVG)\n                [2]Graph object file (DOT format: suitable for visualization with HAIviz)\n                [3]Clustering result (CSV).\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            value={graph_exportFormat}\n            style={{ width: \"100%\" }}\n            onChange={changeExportFormatHandler}\n            disabled={props.graphObject || props.graphClusters ? false : true}\n          >\n            <Option disabled={props.graphObject ? false : true} value=\"svg\">\n              Graph image (SVG)\n            </Option>\n            <Option disabled={props.graphObject ? false : true} value=\"dot\">\n              Graph file (DOT)\n            </Option>\n            <Option\n              disabled={props.graphClusters ? false : true}\n              value=\"clusterID\"\n            >\n              Clustering result (CSV)\n            </Option>\n          </Select>\n        </Col>\n        <Col span={24}>\n          <Button\n            disabled={props.graphClusters || props.graphObject ? false : true}\n            onClick={exportingHandler}\n            type=\"primary\"\n          >\n            Download\n          </Button>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    patientMovement: state.patientMovement,\n    sequence: state.sequence,\n    hammMatrix: state.hammMatrix,\n    graphSettings: state.graphSettings,\n    graphObject: state.graphObject,\n    graphClusters: state.graphClusters,\n    colorLUT: state.colorLUT,\n    isShowingLoadingModal: state.isShowingLoadingModal,\n    selectedNode: state.selectedNode,\n    selectDemoData: state.selectDemoData,\n    projectJSON: state.projectJSON,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeMethodSetting,\n      changeLayoutSetting,\n      changeIsUserReDrawSetting,\n      changeEdgeFilterCutoffSetting,\n      changeClusterMethodSetting,\n      changeIsUserClusteringSetting,\n      changeIsEdgeScaledSetting,\n      changeEdgeScaleFactorSetting,\n      changeColorNodeSetting,\n      changeExportFormatSetting,\n      changeIsUserDownloadingSetting,\n      changeIsHideEdgesByCutoff,\n      changeEdgesHideCutoff,\n      changeTransIcludeLocLevel,\n      changeTypeOfAnalysisSetting,\n      changeIsUserFilterEdgesSetting,\n      changeIsUserRelayoutSetting,\n      changeEdgeLabelSizeSetting,\n      changeNodeIsLabelShown,\n      isShowingLoadingModalToStore,\n      changeSelectedNode,\n      projectJSONToStore,\n      selectDemoDataToStore,\n      sequenceToStore,\n      metadataToStore,\n      patientMovementToStore,\n      isinputLoadingToStore,\n      hmmMatrixToStore,\n      colorLUTtoStore,\n      categoricalMapToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SiderMenu);\n\n/*\n<Option disabled={props.hammMatrix && props.metadata ? false : true} value=\"hierSnpsMetaStayOverlap\">\n                SNPs and patient stay\n              </Option>\n\n                            <Option\n                disabled={props.hammMatrix && props.metadata ? false : true}\n                value=\"cge\"\n              >\n                CATHAI + metadata\n              </Option>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["337","338","339","340","341","342","343","344","345","346","347","348"],"/*\n- Comp init => render => all useEffect\n- loading wont work using states, use indicator on draw button instead\n- All useEffect called when first loaded (eg: from Home to graphSNP page)\n- certain useEffect called when any deppendent useEffect affected\n*/\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { Col, Empty, Button, message } from \"antd\";\nimport { createGraphObject } from \"../utils/create_graphObject\";\nimport { createCytoscapeData } from \"../utils/create_cyData\";\nimport { createClusterCSVFile } from \"../utils/create_exportFile\";\nimport { cricle_svgUrl } from \"../img/circle.js\";\nimport { findClusters } from \"../utils//find_clusters\";\nimport cytoscape from \"cytoscape\";\nimport cy_svg from \"cytoscape-svg\";\nimport { LoadingOutlined, ReloadOutlined } from \"@ant-design/icons\";\nimport {\n  createColorLUT,\n  getColorByColorIndex,\n  getEdgeAndArrowWidth,\n  downloadFileAsText,\n} from \"../utils/utils\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport {\n  hmmMatrixToStore,\n  graphObjectToStore,\n  graphClusterToStore,\n} from \"../action/graphMatrixActions\";\nimport {\n  changeIsUserReDrawSetting,\n  changeIsUserClusteringSetting,\n  changeIsUserDownloadingSetting,\n  changeChartSessionSetting,\n  changeIsUserLoadSessionSetting,\n  changeSelectedNode,\n  changeIsUserRelayoutSetting,\n} from \"../action/graphSettingsActions\";\nimport isShowingLoadingModalToStore from \"../action/isShowingLoadingModalActions\";\nimport coseBilkent from \"cytoscape-cose-bilkent\";\n\nconst _ = require(\"lodash\");\nconst fcose = require(\"cytoscape-fcose\");\nconst spread = require(\"cytoscape-spread\");\nconst dagre = require(\"cytoscape-dagre\");\n\ncytoscape.use(coseBilkent); // register extension\ncytoscape.use(fcose); // register extension\ncytoscape.use(spread); // register extension\ncytoscape.use(cy_svg); // register extension\ncytoscape.use(dagre); // register extension\n\nconst GraphContainer = (props) => {\n  //state\n  const [graphIsAvailable, setGraphIsAvailable] = useState(false);\n  const [processingGraph, setProcessingGraph] = useState(false);\n\n  //Settings\n  const graph_typeOfAnalysis = props.graphSettings.typeOfAnalysis;\n  const graph_method = props.graphSettings.method;\n  const graph_layout = props.graphSettings.layout;\n  const graph_isUserReDraw = props.graphSettings.isUserReDraw;\n  const graph_isUserFilterEdges = props.graphSettings.isUserFilteringEdge;\n  const graph_edgeFilterCutoff = graph_isUserFilterEdges\n    ? props.graphSettings.edgeFilterCutoff\n    : null;\n  const graph_clusterMethod = props.graphSettings.clusterMethod;\n  const graph_isUserClustering = props.graphSettings.isUserClustering;\n  const graph_isEdgesHideByCutoff = props.graphSettings.isHideEdgesByCutoff;\n  const graph_edgesHideCutoff = props.graphSettings.hiddenEdgesCutoff;\n  const graph_colorNodeBy = props.graphSettings.colorNodedBy;\n  const graph_isEdgeScaled = props.graphSettings.isEdgeScaled;\n  const graph_edgeScaleFactor = props.graphSettings.edgeScaleFactor;\n  const graph_isUserDownloading = props.graphSettings.isUserDownloading;\n  const trans_locLevel = props.graphSettings.transIncludeLocLevel;\n  const graph_isUserRelayout = props.graphSettings.isUserRelayout;\n  const graph_node_isLabelShown = props.graphSettings.node_isLabelShown;\n  const graph_edge_labelSize = props.graphSettings.edge_labelSize;\n\n  //Internal setting\n  const cy_layout = { name: graph_layout, animate: false, fit: true };\n  const cytoscapeRef = useRef(null);\n  const prevSessionData = props.graphSettings.chartSession;\n  const isUserReloadSession = props.graphSettings.isUserReloadSession;\n\n  //Cytoscape default settings\n  const node_size = 6;\n  const node_size_margin = 1;\n  const node_size_sel = 8;\n  const node_label_size = \"6px\";\n\n  //Automatic reloading if previous graph session data is a available\n\n  useEffect(() => {\n    if (graph_isUserReDraw) {\n      //console.log(\"1. START: user click draw ##\", +new Date());\n      //setProcessingGraph(true); // set time out to delay drawing and let processing graph state run\n\n      setTimeout(function () {\n        //console.log(\"2. setTimeout start and draw start ##\", +new Date());\n        draw();\n        //console.log(\"8. Draw end in setTimeout ##\", +new Date());\n        setGraphIsAvailable(true);\n        //setProcessingGraph(false);\n        props.changeIsUserReDrawSetting(false);\n        props.isShowingLoadingModalToStore(false);\n        //console.log(\"9. SetTimeout end ##\", +new Date());\n      }, 100);\n    }\n  }, [graph_isUserReDraw]);\n\n  useEffect(() => {\n    if (isUserReloadSession) {\n      //setProcessingGraph(true);\n      setTimeout(() => {\n        redraw();\n        setGraphIsAvailable(true);\n        //setProcessingGraph(false);\n        props.changeIsUserLoadSessionSetting(false);\n        props.isShowingLoadingModalToStore(false);\n      }, 100);\n    }\n  }, [isUserReloadSession]);\n\n  useEffect(() => {\n    if (graph_isUserDownloading) {\n      let cy = cytoscapeRef.current;\n      let svgContent = cy.svg({ scale: 1, full: true });\n      downloadFileAsText(\"GraphSNP-cytoscape-svg.svg\", svgContent);\n      props.changeIsUserDownloadingSetting(false);\n    }\n  }, [graph_isUserDownloading]);\n\n  useEffect(() => {\n    if (graph_isUserClustering && props.graphObject) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        //call clustering\n        let clusters = findClusters(props.graphObject, graph_clusterMethod);\n        //console.log(props.graphObject);\n        setProcessingGraph(false);\n        message.success(\n          `Found ${clusters.group.length} clusters in the graph`,\n          2\n        );\n        //update colorLUT by new clusters color\n        let colorLUT_byCluster = createColorLUT(clusters.members, \"clusterID\");\n        let newColorLUT = _.cloneDeep(props.colorLUT);\n        if (newColorLUT) {\n          let updated_newColorLUT = {\n            ...newColorLUT,\n            clusterID: colorLUT_byCluster,\n          };\n          newColorLUT = updated_newColorLUT;\n        } else {\n          newColorLUT = { clusterID: colorLUT_byCluster };\n        }\n        props.colorLUTtoStore(newColorLUT);\n\n        props.graphClusterToStore(clusters);\n        props.changeIsUserClusteringSetting(false);\n      }, 100);\n    }\n  }, [graph_clusterMethod, graph_isUserClustering]);\n\n  useEffect(() => {\n    if (graph_isUserRelayout && cytoscapeRef.current) {\n      setTimeout(() => {\n        let cy = cytoscapeRef.current;\n        let layout = {\n          name: graph_layout,\n          animate: false,\n          fit: true,\n          prelayout: false,\n        };\n        cy.layout(layout).run();\n        cytoscapeRef.current = cy;\n        props.isShowingLoadingModalToStore(false);\n        props.changeIsUserRelayoutSetting(false);\n      }, 100);\n    }\n  }, [graph_isUserRelayout]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgeScaled) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"edge\"\n              );\n            },\n            \"arrow-scale\": function (e) {\n              return getEdgeAndArrowWidth(\n                graph_isEdgeScaled,\n                e.data(\"weight\"),\n                graph_edgeScaleFactor,\n                \"arrow\"\n              );\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            width: 3,\n            \"arrow-scale\": 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n    }\n  }, [graph_isEdgeScaled, graph_edgeScaleFactor]);\n\n  useEffect(() => {\n    if (props.graphObject && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_isEdgesHideByCutoff) {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: function (o) {\n              let edgeWeight = o.data(\"weight\");\n              if (graph_isEdgesHideByCutoff) {\n                let res =\n                  edgeWeight < graph_edgesHideCutoff.min ||\n                  edgeWeight > graph_edgesHideCutoff.max\n                    ? 0\n                    : 1;\n                return res;\n              } else {\n                return 1;\n              }\n            },\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      } else {\n        cy.style()\n          .selector(\"edge\")\n          .style({\n            opacity: 1,\n          })\n          .update();\n        cytoscapeRef.current = cy;\n      }\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_isEdgesHideByCutoff, graph_edgesHideCutoff]);\n\n  useEffect(() => {\n    if (graph_colorNodeBy && props.colorLUT && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"node\")\n        .style({\n          \"background-color\": function (d) {\n            let isolate_name = d.data(\"id\");\n            let col = getColorByColorIndex(\n              isolate_name,\n              graph_colorNodeBy,\n              props.colorLUT\n            );\n            return col;\n          },\n        })\n        .update();\n\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_colorNodeBy, props.colorLUT]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (graph_node_isLabelShown) {\n        cy.style()\n          .selector(\"node\")\n          .style({ \"font-size\": node_label_size })\n          .update();\n      } else {\n        cy.style().selector(\"node\").style({ \"font-size\": \"0px\" }).update();\n      }\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_node_isLabelShown]);\n\n  useEffect(() => {\n    if (cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      cy.style()\n        .selector(\"edge\")\n        .style({ \"font-size\": String(graph_edge_labelSize) + \"px\" })\n        .update();\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_edge_labelSize]);\n\n  useEffect(() => {\n    if (props.selectedNode && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      if (props.selectedNode.length >= 1) {\n        props.selectedNode.forEach((n) => {\n          cy.filter(`node[id = \"${n}\"]`).select();\n        });\n      } else {\n        cy.filter(\"node\").unselect();\n      }\n\n      cytoscapeRef.current = cy;\n    }\n  }, [props.selectedNode]);\n\n  const reloadChartHandler = (val) => {\n    if (!isUserReloadSession) {\n      props.isShowingLoadingModalToStore(true);\n      props.changeIsUserLoadSessionSetting(true);\n    }\n  };\n\n  //DRAW\n  function draw() {\n    //console.log(\"drawww\", props.selectedNode);\n    //console.log(\"3. Start drawing, creating hammingMatrix ##\", +new Date());\n    //check hamming distance ? if not create one, send to store at the end.\n    const hammingMatrix = !props.hammMatrix\n      ? new HammingMatrix(props.sequence).getHammingMatrix()\n      : props.hammMatrix;\n\n    const seq_len = props.sequence ? props.sequence[0].size : null;\n\n    //Look at param (method, seq, ), generate graph object: util functions\n    //graphObject: {type:'mcg', mapData: edgeList object}\n    //console.log(\"4. Creating graph object ##\", +new Date());\n\n    const graphObject = createGraphObject(\n      hammingMatrix,\n      graph_method,\n      graph_edgeFilterCutoff,\n      props.categoricalMap,\n      props.patientMovement,\n      props.metadata,\n      trans_locLevel,\n      seq_len\n    );\n\n    //generate cytoscape data\n    if (graphObject && graphObject.nodes && graphObject.edges) {\n      //cytoscapeData = [{data:{id:id, nodeType:'singleton', data:[]}}, { data: {source: s, target: t, weight: w} } ]\n      //console.log(\"5. Creating cytoscape data ##\", +new Date());\n      const cytoscapeData = createCytoscapeData(graphObject);\n\n      //Load and view cytoscape\n      if (cytoscapeData) {\n        //console.log(\"6. Cytoscape data mapping ##\", +new Date());\n        if (prevSessionData) {\n          let cy = prevSessionData;\n          cy.unmount();\n        }\n\n        const cy = cytoscape({\n          elements: cytoscapeData,\n          container: document.getElementById(\"graph-cont-cytoscape-canvas\"),\n          pannable: true,\n          selected: true,\n          boxSelectionEnabled: false,\n          style: [\n            {\n              selector: \"node\",\n              style: {\n                shape: graph_method === \"mscg\" ? \"round-rectangle\" : \"circle\",\n                width: function (d) {\n                  let nodeData = d.data(\"data\");\n                  if (nodeData && nodeData.size) {\n                    return (node_size + node_size_margin) * nodeData.size;\n                  } else {\n                    return node_size;\n                  }\n                },\n                height: function (d) {\n                  let nodeData = d.data(\"data\");\n                  if (nodeData && nodeData.size) {\n                    return (node_size + node_size_margin) * nodeData.size;\n                  } else {\n                    return node_size;\n                  }\n                },\n                label: \"data(id)\",\n                \"text-wrap\": \"none\",\n                \"text-valign\": function (d) {\n                  let nodeData = d.data(\"data\");\n                  if (nodeData && nodeData.size) {\n                    return \"center\";\n                  } else {\n                    return \"top\";\n                  }\n                },\n                \"font-size\": node_label_size,\n                \"border-width\": 1,\n                \"border-style\": \"solid\",\n                \"border-color\": \"black\",\n                \"background-color\": function (d) {\n                  if (graph_colorNodeBy && props.colorLUT) {\n                    let isolate_name = d.data(\"id\");\n                    let col = getColorByColorIndex(\n                      isolate_name,\n                      graph_colorNodeBy,\n                      props.colorLUT\n                    );\n                    return col;\n                  } else {\n                    return \"lightgray\";\n                  }\n                },\n              },\n            },\n            {\n              selector: \":parent\",\n              shape: \"round-rectangle\",\n              style: {\n                \"background-image\": \"none\",\n                \"padding-top\": \"5px\",\n                \"background-position-x\": \"0\",\n                \"background-position-y\": \"0\",\n                \"background-width\": \"100%\",\n                \"background-height\": \"100%\",\n                \"background-fit\": \"contain\",\n                \"background-opacity\": \"0\",\n                \"border-width\": \"1\",\n                \"text-valign\": \"top\",\n                \"text-halign\": \"center\",\n              },\n            },\n            {\n              selector: \"edge\",\n              style: {\n                opacity: function (o) {\n                  let edgeWeight = o.data(\"weight\");\n                  //console.log(edgeWeight);\n                  if (graph_isEdgesHideByCutoff) {\n                    let res =\n                      edgeWeight < graph_edgesHideCutoff.min ||\n                      edgeWeight > graph_edgesHideCutoff.max\n                        ? 0\n                        : 1;\n                    return res;\n                  } else {\n                    return 1;\n                  }\n                },\n                label: \"data(weight)\",\n                \"font-size\": String(graph_edge_labelSize) + \"px\",\n                \"text-background-color\": \"#F5E372\",\n                color: \"red\",\n                width: function (e) {\n                  return getEdgeAndArrowWidth(\n                    graph_isEdgeScaled,\n                    e.data(\"weight\"),\n                    graph_edgeScaleFactor,\n                    \"edge\"\n                  );\n                },\n                \"target-arrow-color\": \"black\",\n                \"target-arrow-shape\": (e) => {\n                  return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n                },\n                \"curve-style\": \"bezier\",\n                \"arrow-scale\": function (e) {\n                  return getEdgeAndArrowWidth(\n                    graph_isEdgeScaled,\n                    e.data(\"weight\"),\n                    graph_edgeScaleFactor,\n                    \"arrow\"\n                  );\n                },\n              },\n            },\n            {\n              selector: \":selected\",\n              style: {\n                \"border-width\": 2,\n                \"border-color\": \"red\",\n                \"border-style\": \"double\",\n              },\n            },\n          ],\n        });\n\n        if (graph_layout === \"spread\") {\n          let diverted_layout = {\n            name: \"cose\",\n            animate: false,\n            fit: true,\n            prelayout: false,\n          };\n\n          cy.layout(diverted_layout).run();\n        } else {\n          //console.log(\"7. Cytoscape running with layout ##\", +new Date());\n          cy.layout(cy_layout).run();\n        }\n        //node event click listener\n        cy.selectionType(\"single\");\n        cy.nodes().bind(\"tap\", function (evt) {\n          let nodeData = evt.target.data(\"data\");\n          let nodeId =\n            nodeData && nodeData.size\n              ? nodeData.contents\n              : [evt.target.data(\"id\")]; //always return arr\n          let prev_selected_nodes = cy\n            .elements(\"node:selected\")\n            .map((d) => (d ? d.id() : null)); // always return empty arr or with id(s)\n          //let current_selected_nodes = prev_selected_nodes.concat(nodeId);\n          props.changeSelectedNode(nodeId);\n        });\n        //click on background listener\n        cy.on(\"tap\", function (evt) {\n          if (evt.target === cy) {\n            props.changeSelectedNode([]);\n          }\n        });\n        //cy.layout(cy_layout).run();\n        //save current Ref\n        //save current Ref\n        cytoscapeRef.current = cy;\n\n        //==== SEND TO STORE ====\n        if (props.hammMatrix) {\n          props.hmmMatrixToStore(hammingMatrix);\n        }\n        props.graphObjectToStore(graphObject);\n        props.changeChartSessionSetting(cy);\n      }\n    }\n  }\n  function redraw() {\n    let cy = prevSessionData;\n    cy.unmount();\n    cy.mount(document.getElementById(\"graph-cont-cytoscape-canvas\"));\n    cytoscapeRef.current = cy;\n  }\n\n  return (\n    <React.Fragment>\n      <Col span={24} style={{ position: \"relative\" }}>\n        <div\n          id=\"graph-cont-is-empty\"\n          style={{ display: graphIsAvailable ? \"none\" : \"block\" }}\n        >\n          <Empty\n            description={\n              prevSessionData ? \"Reload previous graph\" : \"No graph. Create one\"\n            }\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          >\n            {prevSessionData && (\n              <Button onClick={reloadChartHandler} type=\"primary\">\n                <ReloadOutlined />\n              </Button>\n            )}\n          </Empty>\n        </div>\n        <div\n          id=\"graph-cont-is-processing\"\n          style={{ display: processingGraph ? \"block\" : \"none\" }}\n        >\n          <p\n            style={{\n              textAlign: \"right\",\n            }}\n          >\n            <span>\n              <LoadingOutlined\n                style={{\n                  fontSize: 18,\n                }}\n                spin\n              />\n            </span>{\" \"}\n            Creating graph ...\n          </p>\n        </div>\n      </Col>\n      <div id=\"graph-cont-cytoscape-canvas\"></div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    patientMovement: state.patientMovement,\n    sequence: state.sequence,\n    graphObject: state.graphObject,\n    hammMatrix: state.hammMatrix,\n    graphSettings: state.graphSettings,\n    colorLUT: state.colorLUT,\n    graphClusters: state.graphClusters,\n    categoricalMap: state.categoricalMap,\n    selectedNode: state.selectedNode,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeIsUserClusteringSetting,\n      changeIsUserReDrawSetting,\n      hmmMatrixToStore,\n      graphObjectToStore,\n      graphClusterToStore,\n      colorLUTtoStore,\n      changeIsUserDownloadingSetting,\n      changeChartSessionSetting,\n      changeIsUserLoadSessionSetting,\n      changeSelectedNode,\n      isShowingLoadingModalToStore,\n      changeIsUserRelayoutSetting,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphContainer);\n/*\nlabel: function (d) {\n                  let nodeData = d.data(\"data\");\n                  if (nodeData && nodeData.size) {\n                    let textLabel = nodeData.contents.join(\"\\n\");\n                    return textLabel;\n                  } else {\n                    return d.data(\"id\");\n                  }\n                },\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",["349"],"import React from \"react\";\nimport { Row, Col, Modal, Spin, Select } from \"antd\";\nimport \"./style_home.css\";\nimport { connect } from \"react-redux\";\n//import { Link, NavLink } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { changeNavLocation } from \"../action/navigationActions\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport SNPsLoader from \"./comp_snpsLoader\";\n//import TitleHeader from \"./comp_titleHeader\";\nimport MetadataLoader from \"./comp_metadataLoader\";\n//import PatientMovementLoader from \"./comp_patientMovementLoader\";\nimport SelectDemoData from \"./comp_selectDemoData\";\nimport FooterComponent from \"./comp_footer\";\nimport Particles from \"react-particles-js\";\nimport { vh } from \"../utils/utils\";\n\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 34 }} spin />;\nconst getParticleHeight = String(vh(100) - 380) + \"px\";\nconst particleParams = {\n  fpsLimit: 24,\n  particles: {\n    number: { value: 25 },\n    size: { value: 4 },\n    links: {\n      enable: true,\n      distance: 75,\n    },\n    move: {\n      enable: true,\n      speed: 2,\n      outModes: {\n        default: \"bounce\",\n      },\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\",\n      },\n    },\n  },\n};\n\nconst Home = (props) => {\n  //console.log(\"Home\");\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xs={24} id=\"header-content\">\n          <Modal\n            visible={props.isInputLoading}\n            closable={false}\n            centered={true}\n            width={0}\n            footer={null}\n            bodyStyle={{\n              textAlign: \"center\",\n              padding: \"0px\",\n            }}\n          >\n            <Spin\n              indicator={loadingIcon}\n              style={{ color: \"white\" }}\n              tip=\"Preparing Data\"\n              size=\"large\"\n            />\n          </Modal>\n        </Col>\n      </Row>\n      <Row id=\"input-wrapper\">\n        <Particles\n          params={particleParams}\n          height={getParticleHeight}\n          style={{ position: \"absolute\", height: \"200px\" }}\n        />\n        <Col xs={24} sm={12}>\n          <SNPsLoader />\n        </Col>\n        <Col xs={24} sm={12}>\n          <MetadataLoader />\n        </Col>\n      </Row>\n      <Row id=\"demo-selection\">\n        <SelectDemoData />\n      </Row>\n      <FooterComponent />\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isInputLoading: state.isInputLoading,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeNavLocation,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n/*\n//Home called when navigating\n//Called when input is loaded (cause it subsribed to the store, so when the connected state change it will be re-called)\n\n<Col xs={24}>\n          <TitleHeader />\n        </Col>\n        <Col xs={24} style={{ padding: \"5px 0 0 5px\" }}>\n          <h5>\n            Click the input button or drag and drop input file(s) to start\n          </h5>\n        </Col>\n        <Col xs={24} sm={8}>\n          <PatientMovementLoader />\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],["350","351"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js",["352"],"import { csv } from \"d3-fetch\";\nimport { utcParse } from \"d3-time-format\";\nimport Moment from \"moment\";\nimport { message } from \"antd\";\nimport { extendMoment } from \"moment-range\";\nimport * as util from \"../utils/utils\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport DistanceMatrix from \"../model/distanceMatrix_prop.js\";\n\nconst _ = require(\"lodash\");\nconst moment = extendMoment(Moment);\nconst fastaToJson = require(\"bio-parsers\").fastaToJson;\n\nexport const isoDateParser = utcParse(\"%Y-%m-%d\");\n//========================== SNPS ============================\nexport async function snpsLoader(\n  fastaString,\n  propsSequenceToStore,\n  propsHmmMatrixToStore,\n  propsIsinputLoadingToStore\n) {\n  //console.log(\"async\");\n  const sequenceJSON = await fastaToJson(fastaString);\n  const snpsSequence = [];\n  if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n    //console.log(sequenceJSON);\n    //check all error message, alert, and no seq to store\n    let isolateName = {};\n    let seqLen = [];\n    let noErr = true;\n    for (let index = 0; index < sequenceJSON.length; index++) {\n      let messages = sequenceJSON[index].messages;\n      let parsedSequence = sequenceJSON[index].parsedSequence;\n      let success = sequenceJSON[index].success;\n      //tracking size\n      if (seqLen.indexOf(parsedSequence.size) === -1) {\n        seqLen.push(parsedSequence.size);\n      }\n      //check success parsing\n      if (!success) {\n        noErr = false;\n        alert(\"Parsing error:\", parsedSequence.name);\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n      //check err messages\n      if (messages.length > 0) {\n        noErr = false;\n        alert(messages[0]);\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n      //check sequence length\n      if (seqLen.length > 1) {\n        noErr = false;\n        alert(\"Size error: Alignment required sequences with same length\");\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n      //check duplicated isolate\n      if (!isolateName[parsedSequence.name]) {\n        isolateName[parsedSequence.name] = true;\n      } else {\n        noErr = false;\n        alert(\"Sequence error: Duplicated sequence\");\n        propsIsinputLoadingToStore(false);\n        break;\n      }\n      //making snpsSequence\n      if (noErr) {\n        snpsSequence.push({\n          id: parsedSequence.name,\n          size: parsedSequence.size,\n          sequence: parsedSequence.sequence.toLowerCase(),\n        });\n      }\n    }\n\n    if (noErr) {\n      //display success message\n      message.success(\n        \"The sequences have been loaded, now building distance matrix ..\",\n        1\n      );\n      setTimeout(() => {\n        const hammingMatrix = new HammingMatrix(\n          snpsSequence\n        ).getHammingMatrix();\n        message.success(\"Pair-wise SNP distance matrix has been created\", 1);\n        propsSequenceToStore(snpsSequence);\n        propsHmmMatrixToStore(hammingMatrix);\n        propsIsinputLoadingToStore(false);\n      }, 100);\n\n      //load to store\n    }\n  } else {\n    alert(\"Error: Check the SNP alignment input requirements\");\n    propsIsinputLoadingToStore(false);\n  }\n}\n\n//======================= DIST-MATRIX ========================\nexport async function getMatrixInput(fileURL, matrixToStore, setisLoading) {\n  let data_promise_super_raw = await csv(fileURL).then(function (result) {\n    return result;\n  });\n\n  const headers = data_promise_super_raw.columns;\n  const diag_name = headers[0];\n\n  if (diag_name) {\n    let rowNames = [diag_name];\n    let data_promise_raw = [];\n\n    data_promise_super_raw.forEach((d) => {\n      let newD = {};\n      headers.forEach((h) => {\n        let valInt = h === diag_name ? String(d[h]) : parseFloat(d[h]);\n        let keyString = String(h);\n        newD[keyString] = valInt;\n      });\n      data_promise_raw.push(newD);\n      rowNames.push(d[diag_name]);\n    });\n\n    //check colNames (header) and rowNames should be identical\n\n    let areColRowNamesIdentical =\n      headers.length === rowNames.length\n        ? headers.every((val, idx) => val === rowNames[idx])\n        : false;\n\n    if (areColRowNamesIdentical) {\n      setTimeout(() => {\n        const inputMatrix = new DistanceMatrix(\n          data_promise_raw,\n          headers\n        ).createMatrix();\n        message.success(\"Pairwise distance matrix has been created\", 1);\n\n        matrixToStore(inputMatrix);\n        setisLoading(false);\n      }, 100);\n    } else {\n      alert(\"Invalid CSV matrix: not symetrical\");\n      setisLoading(false);\n    }\n  } else {\n    alert(\"First column in CSV matrix must be empty string\");\n    setisLoading(false);\n  }\n}\n//========================== METADATA ============================\nexport async function getMetadataInput(\n  fileURL,\n  metadataToStore,\n  colorLUTtoStore,\n  categoricalMapToStore,\n  setisLoading\n) {\n  let data_promise_raw = await csv(fileURL).then(function (result) {\n    return result;\n  });\n  const validHeaders = [\"sample_id\"];\n  const inputHeaders = Object.keys(data_promise_raw[0]);\n  let header_is_valid = true;\n  validHeaders.forEach((item) => {\n    if (inputHeaders.indexOf(item) === -1) {\n      header_is_valid = false;\n    }\n  });\n\n  if (!header_is_valid) {\n    alert(\"Error: Metadata requires sample_id column\");\n    setisLoading(false);\n    return;\n  }\n  //header transformation\n  //\n\n  // no duplicate in isolate name\n  const sample_id = _.countBy(data_promise_raw, \"sample_id\");\n  const duplicatedRecords = Object.keys(sample_id)\n    .map((key) => {\n      return { name: key, count: sample_id[key] };\n    })\n    .filter((d) => d.count > 1);\n\n  if (duplicatedRecords.length > 0) {\n    alert(\"Error: Duplicated id(s)\" + `${JSON.stringify(duplicatedRecords)}`);\n    setisLoading(false);\n    return;\n  }\n\n  // no empty record in sample_id\n  const sample_id_empty = sample_id[\"\"] ? true : false;\n\n  if (sample_id_empty) {\n    alert(\"Error: Empty id(s)\");\n    setisLoading(false);\n    return;\n  }\n\n  // check if its contain dates (collection day)\n  if (Object.keys(data_promise_raw[0]).indexOf(\"CollectionDay\") !== -1) {\n    // no empty record or invalid format in collection date\n    let isolate_start_datevalid = false;\n    data_promise_raw.forEach(function (d) {\n      d.sample_id = d.sample_id.replace(/\\s*$/, \"\");\n      d.collectionDay =\n        d.CollectionDay && parseInt(d.CollectionDay.replace(/\\s*$/, \"\"))\n          ? parseInt(d.CollectionDay.replace(/\\s*$/, \"\"))\n          : null;\n      if (!d.collectionDay) {\n        isolate_start_datevalid = true;\n      }\n    });\n\n    if (isolate_start_datevalid) {\n      alert(\"Invalid CollectionDay \");\n      setisLoading(false);\n      return;\n    }\n  }\n\n  //Get other available metadata for color\n  let headers_for_categoricalMap = [];\n  let headers_userColorLUT = [];\n\n  inputHeaders.forEach((h) => {\n    let splittedHeader = h.split(\":\");\n    let isHeaderForColor =\n      splittedHeader.length > 1 && splittedHeader[1] === \"color\" ? true : false;\n    if (isHeaderForColor) {\n      headers_userColorLUT.push(splittedHeader[0]);\n    } else {\n      if (h !== \"sample_id\") {\n        headers_for_categoricalMap.push(h);\n      }\n    }\n  });\n\n  // let headers_for_categoricalMap = inputHeaders.filter((d) => {\n  //   //filter out headers that have\n  //   return d !== \"sample_id\";\n  // });\n\n  let colorLUTstore = {};\n  let categorical_Map = new Map();\n  let excludedCategory = [\n    \"0\",\n    0,\n    \"null\",\n    \"na\",\n    \"#N/A\",\n    \"NA\",\n    \"\",\n    \"excluded\",\n    \"nil\",\n  ];\n  headers_for_categoricalMap.forEach((d) => {\n    const columnHeader = d;\n    let row_group = [];\n    let cells = [];\n    data_promise_raw.forEach((d) => {\n      let cell = {}; //{sample: taxaA, header1: valueOfHeader1}\n      cell[\"sample\"] = d.sample_id;\n      cell[columnHeader] = d[columnHeader];\n      cells.push(cell);\n      row_group.push(d[columnHeader]);\n    });\n\n    row_group.filter(util.filterUnique); //categorical: e.g vanA, vanB\n\n    //create categorical map\n    //extract category on a row\n    row_group.forEach((g) => {\n      //{vanA: [taxaA, taxaB]}\n      let gList = cells\n        .filter((c) => {\n          return c[columnHeader] === g;\n        })\n        .map((d) => d.sample);\n\n      if (excludedCategory.indexOf(g) === -1) {\n        let categoricalID = columnHeader.concat(\"-\", g);\n        categorical_Map.set(categoricalID, gList);\n      }\n    });\n    //create color LUT\n    //check is there any header:color or not, if exist use this to create colorLUT, otherwise create new one\n    let colorLUT = null;\n    let isHeaderHasColor = headers_userColorLUT.indexOf(d) > -1 ? true : false;\n    if (isHeaderHasColor) {\n      //get column header:color\n      let headerWithColor = d.concat(\":color\");\n      colorLUT = util.colorLUTFromUser(headerWithColor, data_promise_raw);\n    } else {\n      colorLUT = util.createColorLUT(cells, columnHeader);\n    }\n\n    colorLUTstore[columnHeader] = colorLUT;\n  });\n\n  //Convert metadata into Map\n  let metadata_Map = new Map();\n  data_promise_raw.forEach((d) => {\n    metadata_Map.set(d.sample_id, d);\n  });\n\n  //Create categorical Map object from metadata\n  //{groupLocA: [taxa1, taxa2, ...], groupLocB: [taxa4, taxa6]}\n  //for each column, get the categorical\n\n  //console.log(colorLUTstore);\n\n  //When all pass validation test, send to store\n  metadataToStore(metadata_Map);\n  colorLUTtoStore(colorLUTstore);\n  categoricalMapToStore(categorical_Map);\n  setisLoading(false);\n}\n\n//========================== Patient Movement ============================\nexport async function getPatientMovementInput(\n  fileURL,\n  patientMovementToStore,\n  setisLoading\n) {\n  let data_promise_raw = await csv(fileURL).then(function (result) {\n    return result;\n  });\n  const validHeaders = [\n    \"patient_id\",\n    \"start_date\",\n    \"end_date\",\n    \"hospital_id\",\n    \"ward_id\",\n    \"bay_id\",\n    \"bed_id\",\n  ];\n\n  const nullRecords = [\n    \"null\",\n    \"\",\n    \" \",\n    \"na\",\n    \"NA\",\n    \"N/A\",\n    \"#N/A\",\n    \"NULL\",\n    \"Null\",\n  ];\n  const inputHeaders = Object.keys(data_promise_raw[0]);\n  let header_is_valid = true;\n  validHeaders.forEach((item) => {\n    if (inputHeaders.indexOf(item) === -1) {\n      header_is_valid = false;\n    }\n  });\n\n  if (!header_is_valid) {\n    alert(\"Invalid headers: One or more required headers was not found\");\n    setisLoading(false);\n    return;\n  }\n\n  // no empty record or invalid format in date in and out\n  let date_invalid = false;\n  data_promise_raw.forEach(function (d) {\n    d.patient_id = d.patient_id.replace(/\\s*$/, \"\");\n    d.start_date = d.start_date.replace(/\\s*$/, \"\");\n    d.end_date = d.end_date.replace(/\\s*$/, \"\");\n    d.hospital_id =\n      nullRecords.indexOf(d.hospital_id) !== -1 //when id = NA and in consist of nullRecords null, tidak -1 artinya ada di null\n        ? null\n        : d.hospital_id.replace(/\\s*$/, \"\");\n    d.ward_id =\n      nullRecords.indexOf(d.ward_id) !== -1\n        ? null\n        : d.ward_id.replace(/\\s*$/, \"\");\n    d.bay_id =\n      nullRecords.indexOf(d.bay_id) !== -1\n        ? null\n        : d.bay_id.replace(/\\s*$/, \"\");\n    d.bed_id =\n      nullRecords.indexOf(d.bed_id) !== -1\n        ? null\n        : d.bed_id.replace(/\\s*$/, \"\");\n\n    if (moment(d.start_date) && moment(d.end_date)) {\n      d.start_date = moment(d.start_date);\n      d.end_date = moment(d.end_date);\n    } else {\n      date_invalid = true;\n    }\n  });\n\n  if (date_invalid) {\n    alert(\n      \"Invalid data: wrong date format in column start_date and or end_date\"\n    );\n    setisLoading(false);\n    return;\n  }\n\n  //Start creating Patient stays Map:\n  //key is pid, value is pid and StayList instance pid => pid: pat_id, stays: stayList\n\n  let patientStaysMap = new Map();\n\n  const patList = data_promise_raw\n    .map((d) => d.patient_id)\n    .filter(util.filterUnique);\n\n  patList.forEach((p) => {\n    let stays = [];\n    let patStays = data_promise_raw.filter((d) => {\n      return d.patient_id === p;\n    });\n    patStays.forEach((s) => {\n      let stay = {\n        pid: p,\n        start_date: s.start_date,\n        end_date: s.end_date,\n        hospital_id: s.hospital_id,\n        ward_id: s.ward_id,\n        bay_id: s.bay_id,\n        bed_id: s.bed_id,\n      };\n      stays.push(stay);\n    });\n    patientStaysMap.set(p, stays);\n  });\n\n  //When all pass validation test, send to store\n  patientMovementToStore(patientStaysMap);\n  setisLoading(false);\n}\n\n//========================= PROJECT JSON ============================\nexport async function loadProjectJSON(project_json_url, projectJSONToStore) {\n  let response = await fetch(project_json_url);\n  let dataInBlob = await response.blob();\n  const reader = new FileReader();\n  reader.readAsText(dataInBlob);\n  reader.onloadend = function (evt) {\n    const dataJSON = JSON.parse(evt.target.result);\n    const projects = new Map();\n    dataJSON.projects.forEach((p) => {\n      projects.set(p.id, p);\n    });\n\n    projectJSONToStore(projects);\n  };\n}\n\n//====================== SNPS read from disk ==========\nexport async function loadSNPsequence(\n  fileURL,\n  propsSequenceToStore,\n  propsHmmMatrixToStore,\n  propsIsinputLoadingToStore,\n  snpsLoader\n) {\n  let response = await fetch(fileURL);\n\n  propsIsinputLoadingToStore(true);\n  let dataInBlob = await response.blob();\n  const reader = new FileReader();\n  reader.readAsText(dataInBlob);\n  reader.onloadend = function (evt) {\n    const dataText = evt.target.result;\n    snpsLoader(\n      dataText,\n      propsSequenceToStore,\n      propsHmmMatrixToStore,\n      propsIsinputLoadingToStore\n    );\n  };\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/graphEdgeList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cathai.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_louvain.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/categoricalMapReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/categoricalMapActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_cge.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_titleHeader.js",["353"],"import { Row, Col } from \"antd\";\nimport React from \"react\";\nimport \"./style_home.css\";\nconst TitleHeaderComponent = (props) => {\n  return (\n    <React.Fragment>\n      <Col sm={16} id=\"title-header-component\">\n        <p>\n          GraphSNP: Graph-based outbreak cluster and transmission detection and\n          visualization using single-nucleotide polymorphism (SNP) in web\n          browser\n        </p>\n      </Col>\n    </React.Fragment>\n  );\n};\n\nexport default TitleHeaderComponent;\n",["354","355"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_settings.js",["356","357"],"import React from \"react\";\nimport { Button, Row, Col, Select, Divider, Tooltip, Modal, Spin } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { QuestionCircleOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport {\n  dist_changeDataToDisplay,\n  dist_changeDataColumn,\n  dist_changeDataColumnLevel,\n  dist_changeChartOrientation,\n  dist_changeExportFormat,\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n} from \"../action/snpdistSettingsActions\";\n\nimport { filterUnique } from \"../utils/utils\";\n\nconst { Option } = Select;\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 34 }} spin />;\n\nconst SNPdistSettings = (props) => {\n  //GLOBAL\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //STATES\n\n  //SETTINGS\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const chartOrientation = props.snpDistSettings.chartOrientation;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n\n  //HANDLERS\n  const dataToDisplayHandler = (val) => {\n    props.dist_changeDataToDisplay(val);\n  };\n\n  const dataColumnHandler = (val) => {\n    props.dist_changeDataColumn(val);\n  };\n\n  const dataColumnLevelHandler = (val) => {\n    props.dist_changeDataColumnLevel(val);\n  };\n\n  const chartOrientationHandler = (val) => {\n    props.dist_changeChartOrientation(val);\n  };\n\n  const drawChartHandler = (val) => {\n    if (!isUserDrawChart) {\n      props.dist_changeIsUserDraw(true);\n    }\n  };\n\n  const exportFormatHandler = (val) => {\n    props.dist_changeExportFormat(val);\n  };\n\n  const exportChartHandler = (val) => {\n    console.log(\"downlaod handlers\");\n    if (!isUserExportSnpDist) {\n      props.dist_changeIsUserExport(true);\n    }\n  };\n  const getMetadataColumn = function (header, i) {\n    const excluded_headers = [\"sample_date\", \"patient_id\"];\n    if (excluded_headers.indexOf(header) === -1) {\n      return (\n        <Option key={i} disabled={false} value={header}>\n          {header}\n        </Option>\n      );\n    }\n  };\n\n  const getMetadataColumnLevels_arr = function (metadata_arr, dataColumn) {\n    if (metadata_arr && dataColumn) {\n      let dataColumnLevels_arr = metadata_arr\n        .map((d) => d[dataColumn])\n        .filter(filterUnique);\n\n      if (\n        Array.isArray(dataColumnLevels_arr) &&\n        dataColumnLevels_arr.length > 0\n      ) {\n        dataColumnLevels_arr.unshift(\"INTER-Group\");\n        dataColumnLevels_arr.unshift(\"INTRA-Group\");\n        return dataColumnLevels_arr;\n      } else {\n        return [\"#na_exluded!\"];\n      }\n    } else {\n      return [\"#na_exluded!\"];\n    }\n  };\n\n  const getMetadataColumnLevel = function (level, idx) {\n    const excluded_headers = [\"#na_exluded!\"];\n    if (excluded_headers.indexOf(level) === -1) {\n      return (\n        <Option key={idx} disabled={false} value={level}>\n          {level}\n        </Option>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xs={24} id=\"header-content\">\n          <Modal\n            visible={props.isShowingLoadingModal}\n            closable={false}\n            centered={true}\n            width={0}\n            footer={null}\n            bodyStyle={{\n              textAlign: \"center\",\n              padding: \"0px\",\n            }}\n          >\n            <Spin\n              indicator={loadingIcon}\n              style={{ color: \"white\" }}\n              tip=\"Preparing Chart\"\n              size=\"large\"\n            />\n          </Modal>\n        </Col>\n      </Row>\n      <Row gutter={[8, 8]}>\n        <Col span={24}>\n          <h5>Visualization settings</h5>\n          <p>\n            Select samples{\" \"}\n            <span>\n              <Tooltip\n                title=\"Select group of sample for bar chart visualization.\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            value={dataToDisplay}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={dataToDisplayHandler}\n          >\n            <Option value=\"all\">All samples</Option>\n            <Option\n              disabled={props.metadata ? false : true}\n              value=\"per-category\"\n            >\n              Specific group (metadata)\n            </Option>\n          </Select>\n        </Col>\n\n        {dataToDisplay === \"per-category\" &&\n          props.hammingMatrix &&\n          props.metadata && (\n            <Col span={24}>\n              <p>\n                Select metadata column{\" \"}\n                <span>\n                  <Tooltip\n                    title=\"Column in metadata which group of sample to be displayed\"\n                    placement=\"rightTop\"\n                  >\n                    <QuestionCircleOutlined style={{ color: \"red\" }} />\n                  </Tooltip>\n                </span>\n              </p>\n              <Select\n                value={dataColumn}\n                style={{ width: \"100%\" }}\n                disabled={\n                  dataToDisplay === \"per-category\" &&\n                  props.hammingMatrix &&\n                  props.metadata\n                    ? false\n                    : true\n                }\n                onChange={dataColumnHandler}\n              >\n                {props.colorLUT && Object.keys(props.colorLUT)\n                  ? Object.keys(props.colorLUT).map((k, i) => {\n                      return getMetadataColumn(k, i);\n                    })\n                  : [\"na\"].map((l, j) => {\n                      return (\n                        <Option key={j} disabled={false} value={l}>\n                          {l}\n                        </Option>\n                      );\n                    })}\n              </Select>\n            </Col>\n          )}\n\n        {dataToDisplay === \"per-category\" &&\n          dataColumn &&\n          props.metadata &&\n          metadata_arr && (\n            <Col span={24}>\n              <p>\n                Select group{\" \"}\n                <span>\n                  <Tooltip\n                    title=\"Categorical group from the selected metadata column\"\n                    placement=\"rightTop\"\n                  >\n                    <QuestionCircleOutlined style={{ color: \"red\" }} />\n                  </Tooltip>\n                </span>\n              </p>\n              <Select\n                value={dataColumnLevel}\n                style={{ width: \"100%\" }}\n                disabled={\n                  dataToDisplay !== \"all\" &&\n                  dataColumn &&\n                  props.metadata &&\n                  metadata_arr\n                    ? false\n                    : true\n                }\n                onChange={dataColumnLevelHandler}\n              >\n                {dataColumn && metadata_arr\n                  ? getMetadataColumnLevels_arr(metadata_arr, dataColumn).map(\n                      (e, x) => {\n                        return getMetadataColumnLevel(e, x);\n                      }\n                    )\n                  : [\"na\"].map((l, j) => {\n                      return (\n                        <Option key={j} disabled={false} value={l}>\n                          {l}\n                        </Option>\n                      );\n                    })}\n              </Select>\n            </Col>\n          )}\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammingMatrix ? false : true}\n            onClick={drawChartHandler}\n            type=\"primary\"\n          >\n            Create Bar chart\n          </Button>\n        </Col>\n\n        <Divider style={{ margin: \"10px 0px 0px 0px\" }} />\n\n        <Col span={24}>\n          <h5>Download settings</h5>\n          <p>\n            Type{\" \"}\n            <span>\n              <Tooltip\n                title=\"Type of file to be downloaded: Table of pairwise SNP distances (CSV) or Displayed bar chart (SVG)\"\n                placement=\"rightTop\"\n              >\n                <QuestionCircleOutlined style={{ color: \"red\" }} />\n              </Tooltip>\n            </span>\n          </p>\n          <Select\n            disabled={props.hammingMatrix ? false : true}\n            value={snpDistExportFormat}\n            onChange={exportFormatHandler}\n            style={{ width: \"100%\" }}\n          >\n            <Option\n              disabled={props.hammingMatrix ? false : true}\n              value=\"symSnpDist\"\n            >\n              Table of pairwise SNP distances (CSV)\n            </Option>\n            <Option value=\"barChartSvg\">Bar chart (SVG)</Option>\n          </Select>\n        </Col>\n\n        <Col span={24}>\n          <Button\n            disabled={props.hammingMatrix ? false : true}\n            onClick={exportChartHandler}\n            type=\"primary\"\n          >\n            Download\n          </Button>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    colorLUT: state.colorLUT,\n    metadata: state.metadata,\n    isShowingLoadingModal: state.isShowingLoadingModal,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeDataToDisplay,\n      dist_changeDataColumn,\n      dist_changeDataColumnLevel,\n      dist_changeChartOrientation,\n      dist_changeExportFormat,\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistSettings);\n\n/*\n<Col span={24}>\n          <p>Chart(s) orientation</p>\n          <Select\n            value={chartOrientation}\n            style={{ width: \"100%\" }}\n            disabled={props.hammingMatrix ? false : true}\n            onChange={chartOrientationHandler}\n          >\n            <Option value=\"horizontal\">Horizontal</Option>\n            <Option value=\"vertical\">Vertical</Option>\n          </Select>\n        </Col>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/comp_snpDist_viewer.js",["358","359","360","361","362","363","364","365"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Row, Col, Empty, Button } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport \"./style_snpDist.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  dist_changeIsUserDraw,\n  dist_changeIsUserExport,\n  dist_changeIsUserLoadSession,\n  dist_changeChartSession,\n} from \"../action/snpdistSettingsActions\";\nimport isShowingLoadingModalToStore from \"../action/isShowingLoadingModalActions.js\";\nimport * as d3Select from \"d3-selection\";\n//import useResizeObserver from \"../hooks/hook_resizeObserver\"; //Broken\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport { vh, vw, downloadSVG, filterUnique } from \"../utils/utils\";\nimport { createBarPlot_all, createChart } from \"./chart_barplot_all\";\nimport { createSNPdistCSVFile } from \"../utils/create_exportFile\";\n\nconst _ = require(\"lodash\");\n\nconst SNPdistViewer = (props) => {\n  //Ref\n  const chartContainerRef = useRef();\n  const snpdistSVGRef = useRef();\n\n  //Drawing constructor\n  const dim_w = vw(100) - 200 - 20; //200 is sider width, 20 is just a nice margin\n  const dim_h = vh(100) - 120 - 20;\n  const margin = { top: 20, right: 20, bottom: 40, left: 60 };\n  const chartArea_width = dim_w - margin.left - margin.right;\n  const chartArea_height = dim_h - margin.top - margin.bottom;\n\n  //States\n  //state\n  const [chartIsDisplayed, setChartIsDisplayed] = useState(false);\n\n  const metadata_arr = props.metadata\n    ? Array.from(props.metadata.values())\n    : null;\n\n  //Settings\n  const dataToDisplay = props.snpDistSettings.dataToDisplay;\n  const dataColumn = props.snpDistSettings.dataColumn;\n  const dataColumnLevel = props.snpDistSettings.dataColumnLevel;\n  const snpDistExportFormat = props.snpDistSettings.snpDistExportFormat;\n  const isUserDrawChart = props.snpDistSettings.isUserDrawChart;\n  const isUserExportSnpDist = props.snpDistSettings.isUserExportSnpDist;\n  const prevSessionData = props.snpDistSettings.chartSession;\n  const isUserReloadSession = props.snpDistSettings.isUserReloadSession;\n\n  //Automatic reload if we have previous session\n  if (prevSessionData) {\n    //check the method dataColumnLevel: intra_inter_group\n    setTimeout(() => {\n      redraw();\n      setChartIsDisplayed(true);\n    }, 10);\n  }\n\n  //UseEffect\n  useEffect(() => {\n    if (isUserDrawChart) {\n      props.isShowingLoadingModalToStore(true);\n      setTimeout(() => {\n        draw();\n        setChartIsDisplayed(true);\n        props.dist_changeIsUserDraw(false);\n        props.isShowingLoadingModalToStore(false);\n      }, 10);\n    }\n  }, [isUserDrawChart]);\n\n  useEffect(() => {\n    if (isUserReloadSession) {\n      setTimeout(() => {\n        redraw();\n        setChartIsDisplayed(true);\n        props.dist_changeIsUserLoadSession(false);\n      }, 10);\n    }\n  }, [isUserReloadSession]);\n\n  useEffect(() => {\n    if (isUserExportSnpDist) {\n      switch (snpDistExportFormat) {\n        case \"symSnpDist\":\n          //prepare data\n          let edgeList = [];\n          let nodeList = [];\n          props.hammingMatrix.forEach((v, k) => {\n            nodeList.push(k);\n            edgeList = edgeList.concat(v);\n          });\n          let snp_dist = new GraphEdgeList(\n            nodeList,\n            edgeList\n          ).getSymetricEdges().edges;\n          createSNPdistCSVFile(snp_dist);\n          props.dist_changeIsUserExport(false);\n          break;\n\n        case \"barChartSvg\":\n          downloadSVG(\"snpdist-chart-svg\");\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [snpDistExportFormat, isUserExportSnpDist]);\n\n  //Functions\n  const reloadChartHandler = (val) => {\n    if (!isUserReloadSession) {\n      props.dist_changeIsUserLoadSession(true);\n    }\n  };\n\n  function getIsolatesByDataColumnAndLevel(meta_arr, dataCol, dataColLevel) {\n    let filteredRec = meta_arr.filter((rec) => {\n      if (rec[dataCol] === dataColLevel) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    let res = filteredRec.map((d) => d.sample_id);\n    return res;\n  }\n\n  //DRAWING\n  function draw() {\n    // console.log(\"draw\", +new Date());\n    //clean previous drawing artifacts\n    d3Select.select(\"#snpdist_svgGroup\").remove();\n\n    //prepare data\n    let edgeList = [];\n    let nodeList = [];\n\n    // console.log(\"edgeList_construction\", +new Date());\n\n    props.hammingMatrix.forEach((v, k) => {\n      nodeList.push(k);\n      edgeList = edgeList.concat(v);\n    });\n\n    // console.log(\"chart_data_construction\", +new Date());\n    let chart_data = new GraphEdgeList(nodeList, edgeList).getSymetricEdges()\n      .edges;\n\n    if (dataToDisplay === \"all\") {\n      // console.log(\"data_list_construction\", +new Date());\n      let data_list = chart_data.map((d) => d.value);\n\n      const svg = d3Select.select(snpdistSVGRef.current);\n      createBarPlot_all(\n        \"All samples\",\n        null,\n        svg,\n        data_list,\n        chartArea_width,\n        chartArea_height,\n        margin,\n        props.dist_changeChartSession\n      );\n    } else {\n      let filtered_chart_data = null;\n      // When column level is artificially intra or inter group\n      if (\n        dataColumnLevel === \"INTRA-Group\" ||\n        dataColumnLevel === \"INTER-Group\"\n      ) {\n        let nonGroup_ColLevel = [\n          null,\n          \"NA\",\n          \"N/A\",\n          \"#N/A\",\n          \"#NA\",\n          \"\",\n          false,\n          \"false\",\n          \"nil\",\n          \"null\",\n          undefined,\n        ];\n\n        let groupLUT = new Map();\n        metadata_arr.forEach((d) => {\n          if (nonGroup_ColLevel.indexOf(d[dataColumn]) === -1) {\n            //console.log(d[dataColumn]);\n            groupLUT.set(d.sample_id, d[dataColumn]);\n          }\n        });\n        //When intra\n        if (dataColumnLevel === \"INTRA-Group\") {\n          filtered_chart_data = chart_data.filter((d) => {\n            if (groupLUT.get(d.source) === groupLUT.get(d.target)) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n        //When inter\n        else {\n          filtered_chart_data = chart_data.filter((d) => {\n            if (groupLUT.get(d.source) !== groupLUT.get(d.target)) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      } else {\n        // When colum level is the actual level\n        let includedIsolates = getIsolatesByDataColumnAndLevel(\n          metadata_arr,\n          dataColumn,\n          dataColumnLevel\n        );\n\n        filtered_chart_data = chart_data.filter((d) => {\n          if (\n            includedIsolates.indexOf(d.source) !== -1 &&\n            includedIsolates.indexOf(d.target) !== -1\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      }\n\n      let data_list = filtered_chart_data\n        ? filtered_chart_data.map((d) => d.value)\n        : [];\n      const svg = d3Select.select(snpdistSVGRef.current);\n      createBarPlot_all(\n        dataColumn,\n        dataColumnLevel,\n        svg,\n        data_list,\n        chartArea_width,\n        chartArea_height,\n        margin,\n        props.dist_changeChartSession\n      );\n    }\n\n    //set svg attributes\n\n    // if (dataToDisplay === \"all\") {\n    //   // draw a violin + jitter + boxplot for all, color coded by selected column\n    // } else {\n    //   //draw charts based on factors from the column\n    // }\n  }\n\n  //RE-DRAWING\n  function redraw() {\n    //clean previous drawing artifacts\n    d3Select.select(\"#snpdist_svgGroup\").remove();\n    const svg = d3Select.select(snpdistSVGRef.current);\n    createChart(svg, prevSessionData);\n  }\n\n  return (\n    <Row>\n      <Col span={24}>\n        <div id=\"snpdist-cont-is-empty\" style={{ display: \"block\" }}>\n          <Empty\n            style={{ display: chartIsDisplayed ? \"none\" : \"block\" }}\n            description={\n              prevSessionData\n                ? \"Reload previous chart\"\n                : \"No chart, create one \"\n            }\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          ></Empty>\n        </div>\n      </Col>\n      <Col ref={chartContainerRef} sm={24}>\n        <div\n          id=\"snpdist-chart-container\"\n          style={{ height: \"100%\", width: \"100%\" }}\n        >\n          <svg id=\"snpdist-chart-svg\" ref={snpdistSVGRef}></svg>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    snpDistSettings: state.snpDistSettings,\n    hammingMatrix: state.hammMatrix,\n    metadata: state.metadata,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      dist_changeIsUserDraw,\n      dist_changeIsUserExport,\n      dist_changeChartSession,\n      dist_changeIsUserLoadSession,\n      isShowingLoadingModalToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SNPdistViewer);\n\n/*\n<Button onClick={reloadChartHandler} type=\"primary\">\n              Reload\n            </Button>\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/snpDistSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/main_snpDist.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/snpdistSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/hooks/hook_resizeObserver.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_exportFile.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_patientMovementLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/patientMovementReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stayList_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/stay_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_smso.js",["366","367"],"//========================================== SMSO ================================================\n/*\nCreate a directed graph object that edges represent transmissions\nDirected edges was created only if pair-wise of isolates has transmission signal\nTransmission signal were if transmission score >= 1, created by check patient stay overlap hiearchiely\n\n*/\n\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport StayList from \"../model/stayList_prop\";\nimport {\n  getHighestLocation,\n  filterInverseSymEdges,\n  getOverlapLocationLevel,\n} from \"../utils/utils\";\n\nconst moment = extendMoment(Moment);\nconst _ = require(\"lodash\");\n\nexport function createSMSO(\n  rawMatrix,\n  edgeCutoff,\n  rawPatientMovementData,\n  metadata,\n  trans_locLevel\n) {\n  //Assumed the input is true\n  //Take an adjacency matrix of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge <= cut-off\n  let mat = _.cloneDeep(rawMatrix);\n  let patientMovementData = _.cloneDeep(rawPatientMovementData);\n  let edgeList = [];\n  let nodeList = [];\n  mat.forEach((val, key) => {\n    nodeList.push(key);\n    let sortedRow = val;\n\n    //Filter by cut-off\n    if (edgeCutoff !== null && edgeCutoff > 0) {\n      sortedRow = sortedRow.filter((e) => {\n        return e.value <= edgeCutoff;\n      });\n    }\n\n    //merge\n    edgeList = edgeList.concat(sortedRow);\n  });\n\n  //Asses transmission signal on each edge\n  let directedEdges = [];\n  let undirectedEdges = [];\n  if (edgeList.length > 0) {\n    for (let i = 0; i < edgeList.length; i++) {\n      let e = edgeList[i];\n      //get pid\n      let p1_id = metadata.get(e.source).patient_id;\n      let p2_id = metadata.get(e.target).patient_id;\n\n      let p1_sampleDate = moment(metadata.get(e.source).sample_date);\n      let p2_sampleDate = moment(metadata.get(e.target).sample_date);\n\n      //get the stays\n      let p1_stays = patientMovementData.get(p1_id)\n        ? new StayList(patientMovementData.get(p1_id))\n        : null;\n\n      let p2_stays = patientMovementData.get(p2_id)\n        ? new StayList(patientMovementData.get(p2_id))\n        : null;\n\n      //console.log(p1_id, p1_stays_obj instanceof StayList);\n      //console.log(p1_id, p1_stays_obj);\n\n      //if we have stays data for both isolates, do, else return 0 and break\n      //console.log(p1_id, p1_stays);\n      if (\n        p1_stays instanceof StayList &&\n        p2_stays instanceof StayList &&\n        Array.isArray(p1_stays.stays) &&\n        Array.isArray(p2_stays.stays) &&\n        p1_stays.stays.length > 0 &&\n        p2_stays.stays.length > 0\n      ) {\n        //which location level do these patients shared? hospital=1? ward=2? bay=3? bed=4?\n        //console.log(p1_stays_obj);\n        //console.log(p1_stays_obj.getLocationLevel());\n        let p1_locLevel = p1_stays.getLocationLevel();\n        let p2_locLevel = p2_stays.getLocationLevel();\n        let common_locLevel = Math.min(p1_locLevel, p2_locLevel)\n          ? Math.min(p1_locLevel, p2_locLevel)\n          : null;\n\n        //console.log(common_locLevel, p1_locLevel, p2_locLevel);\n\n        //if they dont shared any location, not even hospital, return e as undirected with score = 1 (genomic only)\n        if (!common_locLevel) {\n          e[\"dir\"] = \"none\";\n          e.value = 1;\n          undirectedEdges.push(e);\n        } else {\n          //if they share location, at least hospital\n          //check whether that had any overlap admission\n          let p1_rangeOfStay = p1_stays.getRangeOfStays();\n          let p2_rangeOfStay = p2_stays.getRangeOfStays();\n\n          let p1_range = moment.range(\n            p1_rangeOfStay.start_date.startOf(\"day\"),\n            p1_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let p2_range = moment.range(\n            p2_rangeOfStay.start_date.startOf(\"day\"),\n            p2_rangeOfStay.end_date.endOf(\"day\")\n          );\n          let is_p1_p2_overlap = p1_range.overlaps(p2_range);\n          if (is_p1_p2_overlap) {\n            //they do have overlap\n            //compare the highest common level of location (common_locLevel) for both patients\n\n            if (p2_sampleDate.isAfter(p1_sampleDate, \"day\")) {\n              let transmissionScore = calculateTransScore(\n                p1_id,\n                p2_id,\n                p1_stays,\n                p2_stays,\n                common_locLevel\n              );\n              e[\"dir\"] = \"forward\";\n              e.value = 1 + transmissionScore;\n              directedEdges.push(e);\n            } else {\n              e[\"dir\"] = \"none\";\n              e.value = 1;\n              undirectedEdges.push(e);\n            }\n          } else {\n            //they dont have any overlap\n            e[\"dir\"] = \"none\";\n            e.value = 1;\n            undirectedEdges.push(e);\n          }\n        }\n      } else {\n        e[\"dir\"] = \"none\";\n        e.value = 1;\n        undirectedEdges.push(e);\n      }\n    }\n  }\n\n  //let clean_undirectedEdges = filterInverseSymEdges(undirectedEdges);\n  //merge edges\n\n  directedEdges = directedEdges.filter((e) => {\n    return e.value >= trans_locLevel;\n  });\n\n  //SCORING: 1: snps only, 2: snps+hospital, 3: snps+ ward, 4: snps+bay, 5: snps+bed\n\n  //return nodes and edges with direction property\n  //[edgeList[0]]\n\n  return { nodes: nodeList, edges: directedEdges };\n}\n\nfunction calculateTransScore(p1, p2, p1_stays, p2_stays, common_locLevel) {\n  let scoreOverlap = 0;\n\n  //filter stays to only to the level of both patients shared location\n  let p1_stays_common = p1_stays.stays.filter((s) => {\n    return getHighestLocation(s) === common_locLevel;\n  });\n  let p2_stays_common = p2_stays.stays.filter((st) => {\n    return getHighestLocation(st) === common_locLevel;\n  });\n\n  //console.log(p1_stays_common, p2_stays_common);\n\n  //at the level of\n\n  //compared each stays, get the least common location level, save to store, if we found bigger score, update\n  for (let i = 0; i < p1_stays_common.length; i++) {\n    let p1_stay = p1_stays_common[i];\n    let p1_stay_range = moment.range(\n      p1_stay.start_date.startOf(\"day\"),\n      p1_stay.end_date.endOf(\"day\")\n    );\n\n    for (let j = 0; j < p2_stays_common.length; j++) {\n      let p2_stay = p2_stays_common[j];\n      let p2_stay_range = moment.range(\n        p2_stay.start_date.startOf(\"day\"),\n        p2_stay.end_date.endOf(\"day\")\n      );\n\n      let is_stays_overlap = p1_stay_range.overlaps(p2_stay_range);\n\n      if (is_stays_overlap) {\n        let overlapDur = p1_stay_range.intersect(p2_stay_range).diff(\"days\");\n\n        if (overlapDur <= 7) {\n          //need to find, at which location level they were overlap\n          //check the deepest one\n\n          let loc_comm_score = getOverlapLocationLevel(p1_stay, p2_stay);\n\n          if (p1 === \"P-13\" && p2 === \"P-18\") {\n            //console.log(\"???\", is_stays_overlap);\n            //console.log(\"+++\", overlapDur, \"days\");\n            // console.log(loc_comm_score);\n            // console.log(\n            //   \"p1\",\n            //   p1_stay.hospital_id,\n            //   p1_stay.ward_id,\n            //   p1_stay.bay_id,\n            //   p1_stay.bed_id\n            // );\n            // console.log(\n            //   \"p2\",\n            //   p2_stay.hospital_id,\n            //   p2_stay.ward_id,\n            //   p2_stay.bay_id,\n            //   p2_stay.bed_id\n            // );\n          }\n          if (loc_comm_score > scoreOverlap) {\n            scoreOverlap = loc_comm_score;\n          }\n        }\n      }\n    }\n  }\n  return scoreOverlap;\n  //SCORING: 1: hospital, 2: ward, 3: bay, 4: bed\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_all.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack.js",["368","369"],"//========================================== SeqTrack ================================================\n/* Adapted from SeqTrack algorithm implemented in:\n- paper\n*/\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\n\nconst _ = require(\"lodash\");\nconst moment = extendMoment(Moment);\nvar dbinom = require(\"@stdlib/stats-base-dists-binomial-pmf\");\n\nexport function createSeqTrack(\n  rawMatrix,\n  metadataMap,\n  snpSeq_len,\n  mut_rate = null\n) {\n  let hammingDistMat = _.cloneDeep(rawMatrix);\n  //make list of case id and metadata based on SNP alignment\n  //error check\n  let paramsError = false;\n  let cases = []; //list of case object [ {id: caseID, date: caseDate}, ...  ]\n  let missingMeta = [];\n\n  hammingDistMat.forEach((val, key) => {\n    let caseID = key;\n    let meta = metadataMap.get(key);\n    let colDay = meta && meta.collectionDay ? meta.collectionDay : null;\n    if (meta && colDay) {\n      cases.push({ id: caseID, day: colDay });\n    } else {\n      paramsError = true;\n      missingMeta.push(caseID);\n    }\n  });\n\n  //check that all id in alignment have metadata (we only collectionDay)\n  if (paramsError) {\n    alert(\"No collection day data for id(s): \", missingMeta.join(\", \"));\n  }\n\n  //Fun 4: Running selAmongAncestors\n  function selAmongAncestors(\n    aCase,\n    ancesWithLowestSNPdist,\n    snpLen = snpSeq_len,\n    mu = mut_rate,\n    metadata = metadataMap\n  ) {\n    //if proximity matrix is available do here:\n    //but not now, because we dont have one in graphsnp\n\n    if (ancesWithLowestSNPdist.length > 1) {\n      let ancesWithLowestSNPdist_wDay = ancesWithLowestSNPdist\n        .map((d) => {\n          d[\"day\"] = metadata.get(d.id).collectionDay;\n          return d;\n        })\n        .sort((a, b) => a.day > b.day);\n\n      // if mutation rate not available, choose the oldest one\n\n      if (!mut_rate || !snpLen) {\n        let oldestAnces = ancesWithLowestSNPdist_wDay[0];\n        return { ances: oldestAnces.id, snpDist: oldestAnces.snpDist };\n      } else {\n        console.log(\"with mutation\");\n        let case_day = aCase.day;\n        let ancesWithLowestSNPdist_wDayDiff = ancesWithLowestSNPdist_wDay.map(\n          (a) => {\n            let timeDiff = Math.abs(case_day - a.day);\n            let prob = dbinom(a.snpDist, timeDiff * snpLen, mu);\n            a[\"dayDiff\"] = timeDiff;\n            a[\"probability\"] = prob;\n            return a;\n          }\n        );\n        let sorted_ancesWithLowestSNPdist_wDayDiff =\n          ancesWithLowestSNPdist_wDayDiff.sort(\n            (a, b) => a.probability < b.probability\n          );\n        let mostProbableAnces = sorted_ancesWithLowestSNPdist_wDayDiff[0];\n        // improvement: if there are two equaly most probable ances, return all.\n        return {\n          ances: mostProbableAnces.id,\n          snpDist: mostProbableAnces.snpDist,\n        };\n      }\n    }\n  }\n\n  //Fun 3: Get snp distances between case to its ances candidates, then select the lowest\n  function compareAncesSNPdist(aCase, ancesCanditates, hammingDistMat) {\n    let snpDistAnces = [];\n    for (let i = 0; i < ancesCanditates.length; i++) {\n      const ancesCandId = ancesCanditates[i].id;\n      // edgesOfAnces is a list of object paired (both dir)\n      let edgesOfAnces = hammingDistMat.get(ancesCandId).filter((d) => {\n        if (d.target === aCase.id) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      snpDistAnces.push({ id: ancesCandId, snpDist: edgesOfAnces[0].value });\n    }\n\n    snpDistAnces.sort((a, b) => a.snpDist - b.snpDist);\n    // console.log(\"snpDistAnces\", snpDistAnces);\n    //which ances has the lowest SNP dist?\n    let lowestSNPdistAnces = snpDistAnces.filter((e) => {\n      if (e.snpDist === snpDistAnces[0].snpDist) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    // console.log(\"lowestSNPdistAnces\", lowestSNPdistAnces);\n    return lowestSNPdistAnces;\n  }\n\n  //Fun 2: Running and calling selAmongAncestors\n  function findAncestor(aCase, cases, hammingDistMat) {\n    //Search and return 1 best ancestor for a caseID, from the list of available cases\n    //+based on case's collection day, and (if available) mutation rate and haplo length\n    //+(length of snp sites)\n    let bestAncestor = { ances: null, snpDist: null };\n    //1. Find ancestor candidates: other case(s) which collected before this caseId\n    let candid = cases.filter((c) => {\n      if (c.day < aCase.day) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    //2. Check whether this case have ancestor(s) or not. If no its the index case (ancestor = 'NA')\n    //+ if has multiple canditates, run selAmongAncestors to choose 1 most likely candidate\n\n    // if it is index case, set ances to NA, return bestAnces\n    if (candid.length === 0) {\n      bestAncestor.ances = \"NA\";\n      bestAncestor.snpDist = \"NA\";\n      // console.log(\"index case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // if it is the second case (only have 1 candidate). set ances to identified ances, return bestAnces\n    else if (candid.length === 1) {\n      bestAncestor.ances = candid[0].id;\n      let candidHamDist = hammingDistMat.get(candid[0].id).filter((d) => {\n        let cond = d.target === aCase.id ? true : false;\n        return cond;\n      });\n      bestAncestor.snpDist = candidHamDist[0].value;\n      // console.log(\"second case:\", bestAncestor);\n      return bestAncestor; // fun stop here\n    }\n\n    // for any other cases (multiple candidates were found)\n    else {\n      //filter candidates based on their snp distance, get candidate(s) with the least snpDist\n      let ancesWithLowestSNPdist = compareAncesSNPdist(\n        aCase,\n        candid,\n        hammingDistMat\n      ); //return a list of ances(s) [{}, {}]\n\n      //check if ancesWithLowestSNPdist is more than 1\n      if (ancesWithLowestSNPdist.length > 1) {\n        let selectedAnces = selAmongAncestors(aCase, ancesWithLowestSNPdist);\n        bestAncestor.ances = selectedAnces.ances;\n        bestAncestor.snpDist = selectedAnces.snpDist;\n        return bestAncestor;\n      } else {\n        //ancesWithLowestSNPdist is a list of one object [{ances: 'ancesID', snpDist: number}]\n        bestAncestor.ances = ancesWithLowestSNPdist[0].id;\n        bestAncestor.snpDist = ancesWithLowestSNPdist[0].snpDist;\n        return bestAncestor;\n      }\n    }\n  }\n\n  // PERFORM THIS FUN IF ALL REQUIREMENTS ARE MET\n  if (!paramsError) {\n    //initial result\n    let res = new Map();\n    for (let index = 0; index < cases.length; index++) {\n      const thisCase = cases[index];\n      // thisCase = aCase = {id: xxx, day: yyy}\n      //Fun 1: calling findAncestor function\n      let ancestor = findAncestor(thisCase, cases, hammingDistMat); //must return one best ancestor object for this caseId {ances: sample_id, snpDist= null}\n      //set the ancestor of this case to the result map\n      res.set(thisCase.id, ancestor);\n    }\n\n    //create a final graph object from the res map object\n    let final_graph = { nodes: [], edges: [] };\n    res.forEach((v, k) => {\n      final_graph.nodes.push(k);\n      if (v.ances !== \"NA\") {\n        final_graph.edges.push({\n          source: v.ances,\n          target: k,\n          value: v.snpDist,\n          dir: \"forward\",\n        });\n      }\n    });\n    //final_graph.nodes.push(\"NA\");\n\n    //return final graph\n\n    return final_graph;\n  } else {\n    let final_graph = { nodes: null, edges: null };\n    return final_graph;\n  }\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_about.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_inputFiles.js",["370","371"],"import React from \"react\";\nimport { Typography, Divider, Button } from \"antd\";\nimport * as constant from \"../utils/constants\";\nimport \"./style_documentation.css\";\n\nconst { Title, Paragraph, Text } = Typography;\n\nconst InputFiles = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"graphsnp-docs-content\">\n        <Title level={2} underline>\n          {\" \"}\n          Input file(s){\" \"}\n        </Title>\n        <Title level={3}>A multi-fasta SNPs alignment</Title>\n        <Text>\n          SNPs alignment file must contain at least two equally length of\n          fasta-formatted non-gap nucleotide sequences.\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.snps}>\n          Download SNPs example file\n        </Button>\n        <br />\n        <br />\n\n        <Title level={3}>Metadata table</Title>\n        <Text>\n          Metadata table must contain at least three non-empty columns:\n          sampleID, sampleDate, and sampleSource. Sample identifier must be\n          identical on both metadata and SNPs alignment.\n        </Text>\n        <br />\n        <br />\n        <Button type={\"primary\"} href={constant.TEMPLATE.metadata}>\n          Download metadata example file\n        </Button>\n        <br />\n        <br />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default InputFiles;\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/comp_extra.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectDemoDataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_selectDemoData.js",["372"],"import React from \"react\";\nimport { Col, Select } from \"antd\";\nimport { connect } from \"react-redux\";\nimport * as constant from \"../utils/constants\";\nimport { hmmMatrixToStore } from \"../action/graphMatrixActions\";\n\nimport { bindActionCreators } from \"redux\";\nimport {\n  selectDemoDataToStore,\n  sequenceToStore,\n  projectJSONToStore,\n  metadataToStore,\n  patientMovementToStore,\n  isinputLoadingToStore,\n} from \"../action/inputActions\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { categoricalMapToStore } from \"../action/categoricalMapActions\";\nimport {\n  loadProjectJSON,\n  snpsLoader,\n  getMetadataInput,\n  getMatrixInput,\n  loadSNPsequence,\n  getPatientMovementInput,\n} from \"./util_inputLoaders\";\n\nconst { Option } = Select;\n\n//LOADER FUNCTION: ASSUME ALL DEMO FILE IS PASS ACTUAL INPUT LOADER\n\nconst SelectDemoData = (props) => {\n  let project_options = [];\n\n  //RETRIEVE PROJECTS.JSON\n  if (props.projectJSON === null) {\n    loadProjectJSON(constant.PROJECTS_JSON_URL, props.projectJSONToStore);\n  }\n\n  //List projects and create as options\n  if (props.projectJSON) {\n    props.projectJSON.forEach((v, k) => {\n      project_options.push(\n        <Option key={k} value={k}>\n          {v.name}\n        </Option>\n      );\n    });\n  }\n\n  const selectedDemoData = props.selectDemoData;\n\n  //functions\n\n  //handlers\n  const selectDemoDataHandler = (val) => {\n    // case for each demo data\n    if (props.projectJSON && val) {\n      //clean all states\n      props.sequenceToStore(null);\n      props.hmmMatrixToStore(null);\n      props.metadataToStore(null);\n      props.colorLUTtoStore(null);\n      props.categoricalMapToStore(null);\n      props.patientMovementToStore(null);\n\n      //load a new one\n      let projectData = props.projectJSON.get(val);\n\n      //meta\n      if (projectData.metadata) {\n        getMetadataInput(\n          projectData.metadata,\n          props.metadataToStore,\n          props.colorLUTtoStore,\n          props.categoricalMapToStore,\n          props.isinputLoadingToStore\n        );\n      }\n\n      //if snps alignment\n      if (projectData.matrixOrAlignment === \"alignment\") {\n        if (projectData.snpDistance) {\n          loadSNPsequence(\n            //need to do this because different parsing with drag and drop one\n            projectData.snpDistance,\n            props.sequenceToStore,\n            props.hmmMatrixToStore,\n            props.isinputLoadingToStore,\n            snpsLoader\n          );\n        }\n      } else if (projectData.matrixOrAlignment === \"matrix\") {\n        if (projectData.snpDistance) {\n          getMatrixInput(\n            projectData.snpDistance,\n            props.hmmMatrixToStore,\n            props.isinputLoadingToStore\n          );\n        }\n      }\n\n      //stay timeline\n      // if (fileURL.stayTimeline) {\n      //   getPatientMovementInput(\n      //     fileURL.stayTimeline,\n      //     props.patientMovementToStore,\n      //     props.isinputLoadingToStore\n      //   );\n      // }\n\n      props.selectDemoDataToStore(val);\n    } else {\n      props.selectDemoDataToStore(null);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Col xs={24}>\n        <Select value={selectedDemoData} onChange={selectDemoDataHandler}>\n          <Option value={null}>Preloaded dataset</Option>\n          {project_options}\n        </Select>\n      </Col>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    projectJSON: state.projectJSON,\n    selectDemoData: state.selectDemoData,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      projectJSONToStore,\n      selectDemoDataToStore,\n      sequenceToStore,\n      metadataToStore,\n      patientMovementToStore,\n      isinputLoadingToStore,\n      hmmMatrixToStore,\n      colorLUTtoStore,\n      categoricalMapToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectDemoData);\n\n/*\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_metadataBox.js",["373","374"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Collapse, Table } from \"antd\";\nimport { TableOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { changeSelectedNode } from \"../action/graphSettingsActions\";\n\nconst { Panel } = Collapse;\nconst moment = extendMoment(Moment);\nconst MetadataBox = (props) => {\n  //STATES\n  const [dataTable, setdataTable] = useState({\n    columns: null,\n    cells: null,\n  });\n\n  //USEEFFECTS\n  useEffect(() => {\n    if (props.metadata) {\n      //console.log(props.selectedNode);\n      if (props.selectedNode.length >= 1) {\n        //console.log(props.selectedNode);\n        let selectedNodeList = [];\n        props.selectedNode.forEach((n) => {\n          if (props.metadata.get(n)) {\n            selectedNodeList.push(props.metadata.get(n));\n          }\n        });\n\n        if (selectedNodeList.length >= 1) {\n          let columns = [];\n          Object.keys(selectedNodeList[0]).forEach((d, idx) => {\n            columns.push({\n              title: d,\n              dataIndex: d,\n              key: d + idx.toString(),\n            });\n          });\n\n          selectedNodeList.forEach((d, idx) => {\n            d[\"key\"] = idx;\n          });\n          //console.log(columns, dataSource);\n\n          //clear up columns\n          let columns_filtered = columns.filter((c) => {\n            console.log(c.dataIndex);\n            if (c.dataIndex.includes(\":color\") || c.dataIndex.includes(\"key\")) {\n              return false;\n            } else {\n              return true;\n            }\n          });\n\n          setdataTable({\n            columns: columns_filtered,\n            cells: selectedNodeList,\n          });\n        } else {\n          setdataTable({\n            columns: null,\n            cells: null,\n          });\n        }\n      } else {\n        setdataTable({\n          columns: null,\n          cells: null,\n        });\n      }\n    }\n  }, [props.selectedNode]);\n\n  return (\n    <React.Fragment>\n      <div id=\"metadata-box\">\n        {props.metadata && props.graphObject && (\n          <Row style={{ paddingBottom: \"0px\" }}>\n            <Col span={24}>\n              <Collapse accordion bordered={false} expandIconPosition=\"left\">\n                <Panel\n                  style={{\n                    marginBottom: \"0px\",\n                    textAlign: \"left\",\n                    overflowY: \"auto\",\n                  }}\n                  header={\n                    <p style={{ marginBottom: \"0px\" }}>\n                      <TableOutlined /> Selected node metadata\n                    </p>\n                  }\n                  key=\"1\"\n                >\n                  {props.selectedNode &&\n                    props.graphObject &&\n                    dataTable.columns && (\n                      <Table\n                        size=\"small\"\n                        pagination={false}\n                        style={{ width: \"100%\" }}\n                        dataSource={dataTable.cells}\n                        columns={dataTable.columns}\n                      />\n                    )}\n\n                  {!props.selectedNode && <p>No selected node</p>}\n                </Panel>\n              </Collapse>\n            </Col>\n          </Row>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    colorLUT: state.colorLUT,\n    selectedNode: state.selectedNode,\n    graphObject: state.graphObject,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeSelectedNode,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MetadataBox);\n\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_tableViewer.js",["375","376","377","378"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/selectedNodeReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isShowingLoadingModalReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/isShowingLoadingModalActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_snpDistance/chart_barplot_intra_inter.js",["379","380"],"import * as d3Scale from \"d3-scale\";\nimport * as d3Array from \"d3-array\";\nimport * as d3Axis from \"d3-axis\";\nimport * as d3Selection from \"d3-selection\";\nimport * as d3Fetches from \"d3-fetch\";\n\nimport { getBarChartTickValues } from \"../utils/utils\";\n\nexport function createBar_intraInter(\n  svg,\n  chart_data_intra,\n  chart_data_inter,\n  w_all,\n  h_all,\n  margin,\n  chartSessionToStore\n) {\n  //GENERAL\n  const margin_stats = 30;\n  const margin_intra_inter = 30;\n  const cont_bar_w = w_all;\n  const cont_bar_h = h_all / 2 - margin_stats * 2;\n  svg\n    .attr(\"width\", w_all + margin.left + margin.right)\n    .attr(\"height\", h_all + margin.top + margin.bottom);\n\n  //DATA: INTRA-TOP\n  let data_len_intra = chart_data_intra.length;\n  let data_min_intra = parseFloat(d3Array.min(chart_data_intra)).toFixed(0);\n  let data_max_intra = parseFloat(d3Array.max(chart_data_intra)).toFixed(0);\n  let data_q1_intra = parseFloat(\n    d3Array.quantile(chart_data_intra, 0.25)\n  ).toFixed(1);\n  let data_q3_intra = parseFloat(\n    d3Array.quantile(chart_data_intra, 0.75)\n  ).toFixed(1);\n  let data_median_intra = parseFloat(d3Array.median(chart_data_intra)).toFixed(\n    1\n  );\n  let data_mean_intra = parseFloat(d3Array.mean(chart_data_intra)).toFixed(1);\n\n  //prepare data\n  const barMap_intra = d3Array.rollup(\n    chart_data_intra,\n    (v) => v.length,\n    (d) => d\n  );\n  const barData_intra = Array.from(barMap_intra.entries()); //[{0: isKey, 1: isValue}]\n  const barSNP_dist_intra = Array.from(barMap_intra.keys());\n  const barSNP_freq_intra = Array.from(barMap_intra.values());\n\n  //DATA: INTER-BOTTOM\n  let data_len_inter = chart_data_inter.length;\n  let data_min_inter = parseFloat(d3Array.min(chart_data_inter)).toFixed(0);\n  let data_max_inter = parseFloat(d3Array.max(chart_data_inter)).toFixed(0);\n  let data_q1_inter = parseFloat(\n    d3Array.quantile(chart_data_inter, 0.25)\n  ).toFixed(1);\n  let data_q3_inter = parseFloat(\n    d3Array.quantile(chart_data_inter, 0.75)\n  ).toFixed(1);\n  let data_median_inter = parseFloat(d3Array.median(chart_data_inter)).toFixed(\n    1\n  );\n  let data_mean_inter = parseFloat(d3Array.mean(chart_data_inter)).toFixed(1);\n\n  //prepare data\n  const barMap_inter = d3Array.rollup(\n    chart_data_inter,\n    (v) => v.length,\n    (d) => d\n  );\n  const barData_inter = Array.from(barMap_inter.entries()); //[{0: isKey, 1: isValue}]\n  const barSNP_dist_inter = Array.from(barMap_inter.keys());\n  const barSNP_freq_inter = Array.from(barMap_inter.values());\n\n  //DRAWING: INTRA-TOP\n  //scales\n  const bar_linear_scale_v_intra = d3Scale.scaleLinear().range([cont_bar_h, 0]);\n  const bar_band_scale_h_intra = d3Scale.scaleBand().range([0, cont_bar_w]);\n  const bar_bandWidth_intra =\n    cont_bar_w / (d3Array.range(0, d3Array.max(barSNP_dist_intra)).length + 1);\n\n  //create scale\n  let bar_linear_scale_x_intra = bar_linear_scale_v_intra;\n  bar_linear_scale_x_intra.domain([0, d3Array.max(barSNP_freq_intra)]);\n\n  let bar_band_scale_y_intra = bar_band_scale_h_intra;\n  bar_band_scale_y_intra.domain(\n    d3Array.range(0, d3Array.max(barSNP_dist_intra) + 1)\n  );\n\n  // create axis\n  //axis\n  const bar_axis_x_intra = d3Axis.axisLeft().scale(bar_linear_scale_x_intra);\n  const bar_axis_y_intra = d3Axis\n    .axisBottom()\n    .scale(bar_band_scale_y_intra)\n    .tickValues(getBarChartTickValues(bar_band_scale_y_intra.domain()));\n\n  //DRAWING\n  //make group root of svg for transformation purpose\n  let svgGroup = svg.append(\"g\").attr(\"id\", \"snpdist_svgGroup\");\n\n  let svgGroup_intra = svgGroup\n    .append(\"g\")\n    .attr(\"id\", \"snpdist_svgGroup_intra\")\n    .attr(\n      \"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")scale(1)\"\n    );\n\n  //stats text\n  let stats_text_intra = [\n    \"INTRA-Group pairwise distances (n:\",\n    data_len_intra,\n    \"), Min: \",\n    data_min_intra,\n    \", Q1:\",\n    data_q1_intra,\n    \", Median:\",\n    data_median_intra,\n    \", Mean:\",\n    data_mean_intra,\n    \", Q3:\",\n    data_q3_intra,\n    \", Max:\",\n    data_max_intra,\n  ].join(\"\");\n\n  let barchart_stats_g_intra = svgGroup_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-stats-g-intra\");\n  barchart_stats_g_intra\n    .append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"y\", margin_stats / 2)\n    .text(stats_text_intra);\n\n  let barchart_g_intra = svgGroup_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-g-intra\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + margin_stats + \")scale(1)\");\n\n  //h axis\n  barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-y-intra\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + cont_bar_h + \")scale(1)\")\n    .call(bar_axis_y_intra);\n\n  //h axis label group\n  let h_axis_label_g_intra = barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"h-axis-label-g-intra\")\n    .attr(\n      \"transform\",\n      \"translate(\" + cont_bar_w / 2 + \",\" + cont_bar_h + \")scale(1)\"\n    );\n\n  //h axis label\n  h_axis_label_g_intra\n    .append(\"text\")\n    .attr(\"id\", \"h-axis-label-intra\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Pairwise SNP distance\");\n\n  //v axis\n  barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-x-intra\")\n    .attr(\"transform\", \"translate(\" + -5 + \",\" + 0 + \")scale(1)\")\n    .call(bar_axis_x_intra);\n\n  //v axis label group\n  let v_axis_label_g_intra = barchart_g_intra\n    .append(\"g\")\n    .attr(\"id\", \"v-axis-label-g-intra\")\n    .attr(\n      \"transform\",\n      \"translate(\" + -5 + \",\" + cont_bar_h / 2 + \")scale(1) rotate(-90)\"\n    );\n\n  //v axis label\n  v_axis_label_g_intra\n    .append(\"text\")\n    .attr(\"id\", \"v-axis-label-intra\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Frequency\");\n\n  //bar chart\n  let bar_g_intra = barchart_g_intra.append(\"g\").attr(\"id\", \"bar-group-intra\");\n  bar_g_intra\n    .selectAll(\".barchart-bar-intra\")\n    .data(barData_intra)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"barchart-bar-intra\")\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"fill\", \"gray\")\n    .attr(\"x\", function (d) {\n      let res = bar_band_scale_y_intra(d[0]);\n      return res;\n    })\n    .attr(\"y\", function (d) {\n      let res = bar_linear_scale_x_intra(d[1]);\n      return res;\n    })\n    .attr(\"width\", function (d) {\n      let res = bar_bandWidth_intra;\n      return res;\n    })\n    .attr(\"height\", function (d) {\n      let res = Math.abs(\n        bar_linear_scale_x_intra(d[1]) - bar_linear_scale_x_intra(0)\n      );\n      return res;\n    });\n\n  //DRAWING: INTRA-TOP\n  //scales\n  const bar_linear_scale_v_inter = d3Scale.scaleLinear().range([cont_bar_h, 0]);\n  const bar_band_scale_h_inter = d3Scale.scaleBand().range([0, cont_bar_w]);\n  const bar_bandWidth_inter =\n    cont_bar_w / (d3Array.range(0, d3Array.max(barSNP_dist_inter)).length + 1);\n\n  //create scale\n  let bar_linear_scale_x_inter = bar_linear_scale_v_inter;\n  bar_linear_scale_x_inter.domain([0, d3Array.max(barSNP_freq_inter)]);\n\n  let bar_band_scale_y_inter = bar_band_scale_h_inter;\n  bar_band_scale_y_inter.domain(\n    d3Array.range(0, d3Array.max(barSNP_dist_inter) + 1)\n  );\n\n  // create axis function\n  const bar_axis_x_inter = d3Axis.axisLeft().scale(bar_linear_scale_x_inter);\n  const bar_axis_y_inter = d3Axis\n    .axisBottom()\n    .scale(bar_band_scale_y_inter)\n    .tickValues(getBarChartTickValues(bar_band_scale_y_inter.domain()));\n\n  //DRAWING\n  //make group root of svg for transformation purpose\n  let translate_y_pos =\n    cont_bar_h + margin_stats * 2 + margin.top + margin_intra_inter;\n\n  let svgGroup_inter = svgGroup\n    .append(\"g\")\n    .attr(\"id\", \"snpdist_svgGroup_inter\")\n    .attr(\n      \"transform\",\n      \"translate(\" + margin.left + \",\" + translate_y_pos + \")scale(1)\"\n    );\n\n  //stats text\n  let stats_text_inter = [\n    \"INTER-Group pairwise distances (n:\",\n    data_len_inter,\n    \"), Min: \",\n    data_min_inter,\n    \", Q1:\",\n    data_q1_inter,\n    \", Median:\",\n    data_median_inter,\n    \", Mean:\",\n    data_mean_inter,\n    \", Q3:\",\n    data_q3_inter,\n    \", Max:\",\n    data_max_inter,\n  ].join(\"\");\n\n  let barchart_stats_g_inter = svgGroup_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-stats-g-inter\");\n\n  barchart_stats_g_inter\n    .append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"y\", margin_stats / 2)\n    .text(stats_text_inter);\n\n  let barchart_g_inter = svgGroup_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-g-inter\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + margin_stats + \")scale(1)\");\n\n  //h axis\n  barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-y-inter\")\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + cont_bar_h + \")scale(1)\")\n    .call(bar_axis_y_inter);\n\n  //h axis label group\n  let h_axis_label_g_inter = barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"h-axis-label-g-inter\")\n    .attr(\n      \"transform\",\n      \"translate(\" + cont_bar_w / 2 + \",\" + cont_bar_h + \")scale(1)\"\n    );\n\n  //h axis label\n  h_axis_label_g_inter\n    .append(\"text\")\n    .attr(\"id\", \"h-axis-label-inter\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Pairwise SNP distance\");\n\n  //v axis\n  barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"barchart-axis-x-inter\")\n    .attr(\"transform\", \"translate(\" + -5 + \",\" + 0 + \")scale(1)\")\n    .call(bar_axis_x_inter);\n\n  //v axis label group\n  let v_axis_label_g_inter = barchart_g_inter\n    .append(\"g\")\n    .attr(\"id\", \"v-axis-label-g-inter\")\n    .attr(\n      \"transform\",\n      \"translate(\" + -5 + \",\" + cont_bar_h / 2 + \")scale(1) rotate(-90)\"\n    );\n\n  //v axis label\n  v_axis_label_g_inter\n    .append(\"text\")\n    .attr(\"id\", \"v-axis-label-inter\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -35)\n    .style(\"font-size\", \"8pt\")\n    .text(\"Frquency\");\n\n  //bar chart\n  let bar_g_inter = barchart_g_inter.append(\"g\").attr(\"id\", \"bar-group-inter\");\n  bar_g_inter\n    .selectAll(\".barchart-bar-inter\")\n    .data(barData_inter)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"barchart-bar-inter\")\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"fill\", \"gray\")\n    .attr(\"x\", function (d) {\n      let res = bar_band_scale_y_inter(d[0]);\n      return res;\n    })\n    .attr(\"y\", function (d) {\n      let res = bar_linear_scale_x_inter(d[1]);\n      return res;\n    })\n    .attr(\"width\", function (d) {\n      let res = bar_bandWidth_inter;\n      return res;\n    })\n    .attr(\"height\", function (d) {\n      let res = Math.abs(\n        bar_linear_scale_x_inter(d[1]) - bar_linear_scale_x_inter(0)\n      );\n      return res;\n    });\n  //end inter\n\n  //console.log(\"finish\", +new Date());\n  //save this session to store\n  // let svgGroup_node = svgGroup.node();\n  // console.log(svgGroup_node);\n  // let thisSessionData = {\n  //   type: \"intra-inter-group\",\n  //   svgGroup_node,\n  //   w: w_all,\n  //   h: h_all,\n  //   margin,\n  // };\n  // chartSessionToStore(thisSessionData);\n}\n\nexport function recreateBar_intraInter(svg, prevSessionData) {\n  console.log(svg, prevSessionData);\n  svg\n    .attr(\n      \"width\",\n      prevSessionData.w +\n        prevSessionData.margin.left +\n        prevSessionData.margin.right\n    )\n    .attr(\n      \"height\",\n      prevSessionData.h +\n        prevSessionData.margin.top +\n        prevSessionData.margin.bottom\n    );\n  svg.append(prevSessionData.svgGroup_node.node());\n  //make group root of svg for transformation purpose\n  // let svgGroup_node = d3Selection\n  //   .select(prevSessionData.svgGroup_root)\n  //   .select(\"#snpdist_svgGroup\")\n  //   .node();\n  // console.log(svgGroup_node);\n}\n",["381","382"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/distanceMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mscg.js",["383"],"//========================================== Minimum Spanning Cut-Off Graph ================================================\nimport GraphEdgeList from \"../model/graphEdgeList_prop\";\nimport { findConnectedComponents } from \"./cluster_fcc\";\nimport { min } from \"d3-array\";\nconst kruskalMST = require(\"kruskal-mst\");\nconst _ = require(\"lodash\");\nexport function createMSCG(rawMatrix, edgeCutoff) {\n  //Assumed the input is true\n  //Take an adjacency Map of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge that have minimum value among other pair-wise sibling edges (format adjacency list)\n  let mat = _.cloneDeep(rawMatrix);\n\n  let minDistLut = new Map();\n  let nodeList_CATHAI = [];\n  let edgeList_CATHAI = [];\n\n  mat.forEach((val, key) => {\n    //1. create LUT containing all key and their minimum dist ======\n\n    //2. perform CATHAI  ======\n    //+save nodes\n    nodeList_CATHAI.push(key);\n    //+remove edges below the cut-off\n    if (edgeCutoff !== null && edgeCutoff > 0) {\n      let filteredVal = val.filter((e) => {\n        return e.value <= edgeCutoff;\n      });\n      //+merge them\n      edgeList_CATHAI = edgeList_CATHAI.concat(filteredVal);\n    }\n  });\n\n  //remove inverse duplicates edges\n  let graphEdgeList = new GraphEdgeList(\n    nodeList_CATHAI,\n    edgeList_CATHAI\n  ).getSymetricEdges();\n  let graphObject_simplified = {\n    nodes: graphEdgeList.nodes,\n    edges: graphEdgeList.edges,\n  };\n\n  //3. perform FCC\n  let fcc_clusters = findConnectedComponents(graphObject_simplified);\n\n  //4. build the MSCG\n  let nodelist_MSCG = [];\n  let edgelist_MSCG = [];\n  let singletons = fcc_clusters.members.filter((d) => {\n    if (d.clusterID === \"na\") {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  //+create relationship between identified clusters and other singleton\n  if (fcc_clusters.group.length > 0) {\n    for (let i = 0; i < fcc_clusters.group.length; i++) {\n      let sourceClusterID = \"Group \" + (i + 1);\n\n      let sourceClusterMembers = fcc_clusters.group[i];\n      nodelist_MSCG.push({\n        id: sourceClusterID,\n        data: {\n          type: \"compound\",\n          size: sourceClusterMembers.length,\n          contents: sourceClusterMembers,\n        },\n      });\n\n      //+get pairwise cluster to cluster\n      for (let j = i + 1; j < fcc_clusters.group.length; j++) {\n        let targetClusterID = \"Group \" + (j + 1);\n        if (sourceClusterID !== targetClusterID) {\n          let targetClusterMembers = fcc_clusters.group[j];\n          let minDist = [];\n          sourceClusterMembers.forEach((sc) => {\n            targetClusterMembers.forEach((tc) => {\n              let dist = mat\n                .get(sc)\n                .filter((d) => (d.target === tc ? true : false));\n              minDist.push(dist[0].value);\n            });\n          });\n          //create edgelist\n          edgelist_MSCG.push({\n            source: sourceClusterID,\n            target: targetClusterID,\n            value: min(minDist),\n          });\n        }\n      }\n\n      //+get pairwise cluster to singletons\n      for (let k = 0; k < singletons.length; k++) {\n        let targetSingleton = singletons[k].sample;\n        let minDistCS = [];\n        sourceClusterMembers.forEach((sc) => {\n          let dist = mat\n            .get(sc)\n            .filter((d) => (d.target === targetSingleton ? true : false));\n          minDistCS.push(dist[0].value);\n        });\n        //create edgelist\n        edgelist_MSCG.push({\n          source: sourceClusterID,\n          target: targetSingleton,\n          value: min(minDistCS),\n        });\n      }\n    }\n  }\n\n  //+create relationship between singleton to singleton\n  if (singletons.length > 0) {\n    for (let l = 0; l < singletons.length; l++) {\n      //add singleton as node\n      let sourceS = singletons[l].sample;\n      nodelist_MSCG.push({\n        id: sourceS,\n        data: {\n          type: \"singleton\",\n          size: null,\n          contents: null,\n        },\n      });\n\n      for (let m = l + 1; m < singletons.length; m++) {\n        let targetS = singletons[m].sample;\n        if (sourceS !== targetS) {\n          //create edgelist between singletons\n          let sourceS_LUT = mat.get(sourceS).filter((s) => {\n            if (s.target === targetS) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n\n          edgelist_MSCG.push({\n            source: sourceS,\n            target: targetS,\n            value: sourceS_LUT[0].value,\n          });\n        }\n      }\n    }\n  }\n\n  //5. Perform MST\n  //+transform edges\n  let kruskalEdges = edgelist_MSCG.map((d) => {\n    return { from: d.source, to: d.target, weight: d.value };\n  });\n  let mstEdges = kruskalMST.kruskal(kruskalEdges);\n\n  //+transfom back\n  let finalEdges = mstEdges.map((d) => {\n    return { source: d.from, target: d.to, value: d.weight };\n  });\n\n  return {\n    nodes: nodelist_MSCG,\n    edges: finalEdges,\n    clusterGroup: fcc_clusters,\n  };\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/img/circle.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_seqtrack_ori.js",["384"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/projectsReducer.js",[],{"ruleId":"385","replacedBy":"386"},{"ruleId":"387","replacedBy":"388"},{"ruleId":"389","severity":1,"message":"390","line":44,"column":3,"nodeType":"391","messageId":"392","endLine":44,"endColumn":26},{"ruleId":"389","severity":1,"message":"393","line":96,"column":9,"nodeType":"391","messageId":"392","endLine":96,"endColumn":29},{"ruleId":"389","severity":1,"message":"394","line":14,"column":10,"nodeType":"391","messageId":"392","endLine":14,"endColumn":30},{"ruleId":"389","severity":1,"message":"395","line":15,"column":10,"nodeType":"391","messageId":"392","endLine":15,"endColumn":23},{"ruleId":"389","severity":1,"message":"396","line":61,"column":9,"nodeType":"391","messageId":"392","endLine":61,"endColumn":29},{"ruleId":"389","severity":1,"message":"397","line":91,"column":9,"nodeType":"391","messageId":"392","endLine":91,"endColumn":22},{"ruleId":"398","severity":1,"message":"399","line":112,"column":6,"nodeType":"400","endLine":112,"endColumn":26,"suggestions":"401"},{"ruleId":"398","severity":1,"message":"402","line":125,"column":6,"nodeType":"400","endLine":125,"endColumn":27,"suggestions":"403"},{"ruleId":"398","severity":1,"message":"404","line":134,"column":6,"nodeType":"400","endLine":134,"endColumn":31,"suggestions":"405"},{"ruleId":"398","severity":1,"message":"404","line":166,"column":6,"nodeType":"400","endLine":166,"endColumn":51,"suggestions":"406"},{"ruleId":"398","severity":1,"message":"407","line":184,"column":6,"nodeType":"400","endLine":184,"endColumn":28,"suggestions":"408"},{"ruleId":"398","severity":1,"message":"409","line":223,"column":6,"nodeType":"400","endLine":223,"endColumn":49,"suggestions":"410"},{"ruleId":"398","severity":1,"message":"409","line":259,"column":6,"nodeType":"400","endLine":259,"endColumn":56,"suggestions":"411"},{"ruleId":"389","severity":1,"message":"412","line":520,"column":15,"nodeType":"391","messageId":"392","endLine":520,"endColumn":34},{"ruleId":"389","severity":1,"message":"413","line":2,"column":33,"nodeType":"391","messageId":"392","endLine":2,"endColumn":39},{"ruleId":"385","replacedBy":"414"},{"ruleId":"387","replacedBy":"415"},{"ruleId":"416","severity":1,"message":"417","line":191,"column":37,"nodeType":"418","messageId":"419","endLine":191,"endColumn":38},{"ruleId":"389","severity":1,"message":"420","line":1,"column":10,"nodeType":"391","messageId":"392","endLine":1,"endColumn":13},{"ruleId":"385","replacedBy":"421"},{"ruleId":"387","replacedBy":"422"},{"ruleId":"389","severity":1,"message":"423","line":33,"column":9,"nodeType":"391","messageId":"392","endLine":33,"endColumn":25},{"ruleId":"389","severity":1,"message":"424","line":51,"column":9,"nodeType":"391","messageId":"392","endLine":51,"endColumn":32},{"ruleId":"389","severity":1,"message":"425","line":2,"column":27,"nodeType":"391","messageId":"392","endLine":2,"endColumn":33},{"ruleId":"389","severity":1,"message":"426","line":3,"column":10,"nodeType":"391","messageId":"392","endLine":3,"endColumn":25},{"ruleId":"389","severity":1,"message":"427","line":17,"column":31,"nodeType":"391","messageId":"392","endLine":17,"endColumn":43},{"ruleId":"389","severity":1,"message":"428","line":21,"column":7,"nodeType":"391","messageId":"392","endLine":21,"endColumn":8},{"ruleId":"398","severity":1,"message":"399","line":73,"column":6,"nodeType":"400","endLine":73,"endColumn":23,"suggestions":"429"},{"ruleId":"398","severity":1,"message":"402","line":83,"column":6,"nodeType":"400","endLine":83,"endColumn":27,"suggestions":"430"},{"ruleId":"398","severity":1,"message":"404","line":112,"column":6,"nodeType":"400","endLine":112,"endColumn":48,"suggestions":"431"},{"ruleId":"389","severity":1,"message":"432","line":115,"column":9,"nodeType":"391","messageId":"392","endLine":115,"endColumn":27},{"ruleId":"389","severity":1,"message":"433","line":9,"column":8,"nodeType":"391","messageId":"392","endLine":9,"endColumn":21},{"ruleId":"389","severity":1,"message":"434","line":15,"column":3,"nodeType":"391","messageId":"392","endLine":15,"endColumn":24},{"ruleId":"389","severity":1,"message":"433","line":5,"column":8,"nodeType":"391","messageId":"392","endLine":5,"endColumn":21},{"ruleId":"389","severity":1,"message":"435","line":10,"column":7,"nodeType":"391","messageId":"392","endLine":10,"endColumn":13},{"ruleId":"389","severity":1,"message":"436","line":2,"column":22,"nodeType":"391","messageId":"392","endLine":2,"endColumn":29},{"ruleId":"389","severity":1,"message":"437","line":6,"column":16,"nodeType":"391","messageId":"392","endLine":6,"endColumn":25},{"ruleId":"389","severity":1,"message":"390","line":24,"column":3,"nodeType":"391","messageId":"392","endLine":24,"endColumn":26},{"ruleId":"389","severity":1,"message":"435","line":11,"column":7,"nodeType":"391","messageId":"392","endLine":11,"endColumn":13},{"ruleId":"398","severity":1,"message":"438","line":74,"column":6,"nodeType":"400","endLine":74,"endColumn":26,"suggestions":"439"},{"ruleId":"389","severity":1,"message":"420","line":2,"column":10,"nodeType":"391","messageId":"392","endLine":2,"endColumn":13},{"ruleId":"389","severity":1,"message":"440","line":2,"column":15,"nodeType":"391","messageId":"392","endLine":2,"endColumn":18},{"ruleId":"389","severity":1,"message":"441","line":3,"column":10,"nodeType":"391","messageId":"392","endLine":3,"endColumn":28},{"ruleId":"389","severity":1,"message":"442","line":5,"column":9,"nodeType":"391","messageId":"392","endLine":5,"endColumn":14},{"ruleId":"389","severity":1,"message":"443","line":4,"column":13,"nodeType":"391","messageId":"392","endLine":4,"endColumn":24},{"ruleId":"389","severity":1,"message":"444","line":5,"column":13,"nodeType":"391","messageId":"392","endLine":5,"endColumn":22},{"ruleId":"385","replacedBy":"445"},{"ruleId":"387","replacedBy":"446"},{"ruleId":"389","severity":1,"message":"447","line":13,"column":7,"nodeType":"391","messageId":"392","endLine":13,"endColumn":17},{"ruleId":"389","severity":1,"message":"433","line":5,"column":8,"nodeType":"391","messageId":"392","endLine":5,"endColumn":21},"no-native-reassign",["448"],"no-negated-in-lhs",["449"],"no-unused-vars","'getPatientMovementInput' is defined but never used.","Identifier","unusedVar","'graph_edge_labelSize' is assigned a value but never used.","'createClusterCSVFile' is defined but never used.","'cricle_svgUrl' is defined but never used.","'graph_typeOfAnalysis' is assigned a value but never used.","'node_size_sel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["450"],"React Hook useEffect has missing dependencies: 'props' and 'redraw'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["451"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["452"],["453"],"React Hook useEffect has missing dependencies: 'graph_layout' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["454"],"React Hook useEffect has a missing dependency: 'props.graphObject'. Either include it or remove the dependency array.",["455"],["456"],"'prev_selected_nodes' is assigned a value but never used.","'Select' is defined but never used.",["448"],["449"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Row' is defined but never used.",["448"],["449"],"'chartOrientation' is assigned a value but never used.","'chartOrientationHandler' is assigned a value but never used.","'Button' is defined but never used.","'LoadingOutlined' is defined but never used.","'filterUnique' is defined but never used.","'_' is assigned a value but never used.",["457"],["458"],["459"],"'reloadChartHandler' is assigned a value but never used.","'GraphEdgeList' is defined but never used.","'filterInverseSymEdges' is defined but never used.","'moment' is assigned a value but never used.","'Divider' is defined but never used.","'Paragraph' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.metadata'. Either include it or remove the dependency array.",["460"],"'Col' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'Panel' is assigned a value but never used.","'d3Selection' is defined but never used.","'d3Fetches' is defined but never used.",["448"],["449"],"'minDistLut' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"463","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"482","text":"483"},"Update the dependencies array to be: [isUserReloadSession, props, redraw]",{"range":"484","text":"485"},"Update the dependencies array to be: [graph_isUserDownloading, props]",{"range":"486","text":"487"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"488","text":"489"},"Update the dependencies array to be: [graph_isUserRelayout, graph_layout, props]",{"range":"490","text":"491"},"Update the dependencies array to be: [graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",{"range":"492","text":"493"},"Update the dependencies array to be: [graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",{"range":"494","text":"495"},"Update the dependencies array to be: [draw, isUserDrawChart, props]",{"range":"496","text":"497"},{"range":"498","text":"485"},"Update the dependencies array to be: [snpDistExportFormat, isUserExportSnpDist, props]",{"range":"499","text":"500"},"Update the dependencies array to be: [props.metadata, props.selectedNode]",{"range":"501","text":"502"},[4606,4626],"[draw, graph_isUserReDraw, props]",[4960,4981],"[isUserReloadSession, props, redraw]",[5264,5289],"[graph_isUserDownloading, props]",[6356,6401],"[graph_clusterMethod, graph_isUserClustering, props]",[6879,6901],"[graph_isUserRelayout, graph_layout, props]",[7894,7937],"[graph_isEdgeScaled, graph_edgeScaleFactor, props.graphObject]",[8883,8933],"[graph_isEdgesHideByCutoff, graph_edgesHideCutoff, props.graphObject]",[2628,2645],"[draw, isUserDrawChart, props]",[2854,2875],[3590,3632],"[snpDistExportFormat, isUserExportSnpDist, props]",[2053,2073],"[props.metadata, props.selectedNode]"]