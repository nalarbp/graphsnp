[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/main_matrix.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/comp_matrixViewer.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js":"34","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js":"35","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js":"36","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js":"37","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js":"38","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js":"39","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js":"40","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/phyloTimeTreeReducer.js":"41","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js":"42","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js":"43","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_phylotimetreeLoader.js":"44","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js":"45"},{"size":663,"mtime":1610195666935,"results":"46","hashOfConfig":"47"},{"size":1034,"mtime":1610950598064,"results":"48","hashOfConfig":"47"},{"size":362,"mtime":1610086392986,"results":"49","hashOfConfig":"47"},{"size":477,"mtime":1610107486220,"results":"50","hashOfConfig":"47"},{"size":717,"mtime":1610950774877,"results":"51","hashOfConfig":"47"},{"size":88,"mtime":1610155012196,"results":"52","hashOfConfig":"47"},{"size":1643,"mtime":1611896068534,"results":"53","hashOfConfig":"47"},{"size":933,"mtime":1611895657890,"results":"54","hashOfConfig":"47"},{"size":6251,"mtime":1611905266762,"results":"55","hashOfConfig":"47"},{"size":8043,"mtime":1611896068534,"results":"56","hashOfConfig":"47"},{"size":2628,"mtime":1610950731083,"results":"57","hashOfConfig":"47"},{"size":493,"mtime":1611897451728,"results":"58","hashOfConfig":"47"},{"size":159,"mtime":1611887099249,"results":"59","hashOfConfig":"47"},{"size":1343,"mtime":1611824451451,"results":"60","hashOfConfig":"47"},{"size":378,"mtime":1610108902860,"results":"61","hashOfConfig":"47"},{"size":584,"mtime":1610154547016,"results":"62","hashOfConfig":"47"},{"size":3111,"mtime":1611821695710,"results":"63","hashOfConfig":"47"},{"size":1709,"mtime":1611908219174,"results":"64","hashOfConfig":"47"},{"size":1250,"mtime":1611887060020,"results":"65","hashOfConfig":"47"},{"size":401,"mtime":1610683140985,"results":"66","hashOfConfig":"47"},{"size":695,"mtime":1611798893993,"results":"67","hashOfConfig":"47"},{"size":1058,"mtime":1611010611871,"results":"68","hashOfConfig":"47"},{"size":2007,"mtime":1611898325868,"results":"69","hashOfConfig":"47"},{"size":747,"mtime":1610950423257,"results":"70","hashOfConfig":"47"},{"size":605,"mtime":1611803437017,"results":"71","hashOfConfig":"47"},{"size":452,"mtime":1611822450355,"results":"72","hashOfConfig":"47"},{"size":383,"mtime":1611039003510,"results":"73","hashOfConfig":"47"},{"size":156,"mtime":1611039074948,"results":"74","hashOfConfig":"47"},{"size":765,"mtime":1611909141000,"results":"75","hashOfConfig":"47"},{"size":1166,"mtime":1611809227067,"results":"76","hashOfConfig":"47"},{"size":390,"mtime":1611802301584,"results":"77","hashOfConfig":"47"},{"size":618,"mtime":1611909159735,"results":"78","hashOfConfig":"47"},{"size":391,"mtime":1611809625614,"results":"79","hashOfConfig":"47"},{"size":1298,"mtime":1611812543583,"results":"80","hashOfConfig":"47"},{"size":1825,"mtime":1611888678927,"results":"81","hashOfConfig":"47"},{"size":387,"mtime":1611820715749,"results":"82","hashOfConfig":"47"},{"size":396,"mtime":1611822589287,"results":"83","hashOfConfig":"47"},{"size":379,"mtime":1611887208678,"results":"84","hashOfConfig":"47"},{"size":220,"mtime":1611889589251,"results":"85","hashOfConfig":"47"},{"size":382,"mtime":1611895924238,"results":"86","hashOfConfig":"47"},{"size":398,"mtime":1611896115200,"results":"87","hashOfConfig":"47"},{"size":5399,"mtime":1611899296701,"results":"88","hashOfConfig":"47"},{"size":3212,"mtime":1611902395976,"results":"89","hashOfConfig":"47"},{"size":5450,"mtime":1611898363643,"results":"90","hashOfConfig":"47"},{"size":3105,"mtime":1611908366563,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"13s4y1q",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["188","189"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["190","191"],"/*\n- Comp init => render => all useEffect\n- loading wont work using states, use indicator on draw button instead\n- All useEffect called when first loaded (eg: from Home to graphSNP page)\n- certain useEffect called when any deppendent useEffect affected\n*/\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { colorLUTtoStore } from \"../action/colorActions\";\nimport { Col, Empty, message } from \"antd\";\nimport { createGraphObject } from \"../utils/create_graphObject\";\nimport { createCytoscapeData } from \"../utils/create_cyData\";\nimport { findClusters } from \"../utils//find_clusters\";\nimport cytoscape from \"cytoscape\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { createColorLUT, getColorByColorIndex } from \"../utils/utils\";\nimport HammingMatrix from \"../model/hammingMatrix_prop\";\nimport {\n  hmmMatrixToStore,\n  graphObjectToStore,\n  graphClusterToStore,\n} from \"../action/graphMatrixActions\";\nimport {\n  changeIsUserReDrawSetting,\n  changeIsUserClusteringSetting,\n} from \"../action/graphSettingsActions\";\n\nconst _ = require(\"lodash\");\n\nconst GraphContainer = (props) => {\n  //state\n  const [graphIsAvailable, setGraphIsAvailable] = useState(false);\n  const [processingGraph, setProcessingGraph] = useState(false);\n\n  //Settings\n  const graph_method = props.graphSettings.method;\n  const graph_layout = props.graphSettings.layout;\n  const graph_isUserReDraw = props.graphSettings.isUserReDraw;\n  const graph_edgeFilterCutoff = props.graphSettings.edgeFilterCutoff;\n  const graph_clusterMethod = props.graphSettings.clusterMethod;\n  const graph_isUserClustering = props.graphSettings.isUserClustering;\n  const graph_colorNodeBy = props.graphSettings.colorNodedBy;\n  //const graph_exportFormat = props.graphSettings.exportFormat;\n  //const graph_isUserDownloading = props.graphSettings.isUserDownloading;\n\n  //Internal setting\n  const cy_layout = { name: graph_layout, animate: false, fit: true };\n  const cytoscapeRef = useRef(null);\n\n  useEffect(() => {\n    if (graph_isUserReDraw) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        draw();\n        setGraphIsAvailable(true);\n        setProcessingGraph(false);\n        props.changeIsUserReDrawSetting(false);\n      }, 100);\n    }\n  }, [graph_isUserReDraw]);\n\n  useEffect(() => {\n    if (graph_isUserClustering && props.graphObject) {\n      setProcessingGraph(true);\n      setTimeout(function () {\n        //call clustering\n        let clusters = findClusters(props.graphObject, graph_clusterMethod);\n        setProcessingGraph(false);\n        message.success(\n          `Found ${clusters.group.length} clusters in the graph`,\n          2\n        );\n        //update colorLUT by new clusters color\n        let colorLUT_byCluster = createColorLUT(clusters.members, \"clusterID\");\n        let newColorLUT = _.cloneDeep(props.colorLUT);\n        if (newColorLUT) {\n          let updated_newColorLUT = {\n            ...newColorLUT,\n            clusterID: colorLUT_byCluster,\n          };\n          newColorLUT = updated_newColorLUT;\n        } else {\n          newColorLUT = { clusterID: colorLUT_byCluster };\n        }\n        props.colorLUTtoStore(newColorLUT);\n\n        props.graphClusterToStore(clusters);\n        props.changeIsUserClusteringSetting(false);\n      }, 100);\n    }\n  }, [graph_clusterMethod, graph_isUserClustering]);\n\n  useEffect(() => {\n    if (graph_layout && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      let layout = { name: graph_layout, animate: false, fit: true };\n      cy.layout(layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_layout]);\n\n  useEffect(() => {\n    if (graph_colorNodeBy && props.colorLUT && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      //console.log(graph_colorNodeBy, props.colorLUT);\n      cy.style()\n        .selector(\"node\")\n        .style({\n          \"background-color\": function (d) {\n            let isolate_name = d.data(\"id\");\n            let col = getColorByColorIndex(\n              isolate_name,\n              graph_colorNodeBy,\n              props.colorLUT\n            );\n            //console.log(props.colorLUT[graph_colorNodeBy]);\n            return col;\n          },\n        })\n        .update();\n\n      cytoscapeRef.current = cy;\n    }\n  }, [graph_colorNodeBy, props.colorLUT]);\n\n  //DRAW\n  function draw() {\n    //check hamming distance ? if not create one, send to store at the end.\n    const hammingMatrix = !props.hammMatrix\n      ? new HammingMatrix(props.sequence).getUpperMatrix()\n      : props.hammMatrix;\n\n    //Look at param (method, seq, ), generate graph object\n    const graphObject = createGraphObject(\n      hammingMatrix,\n      graph_method,\n      graph_edgeFilterCutoff,\n      props.metadata,\n      props.phyloTimeTree\n    );\n\n    //generate cytoscape data\n    const cytoscapeData = createCytoscapeData(graphObject);\n\n    //Load and view cytoscape\n    if (cytoscapeData) {\n      const cy = cytoscape({\n        elements: cytoscapeData,\n        container: document.getElementById(\"graph-cont-cytoscape-canvas\"),\n        pannable: true,\n        selected: true,\n        boxSelectionEnabled: false,\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              label: \"data(id)\",\n              \"border-width\": 3,\n              \"border-style\": \"solid\",\n              \"border-color\": \"black\",\n              \"background-color\": \"lightgray\",\n            },\n          },\n          {\n            selector: \"edge\",\n            style: {\n              label: \"data(weight)\",\n              \"font-size\": \"8px\",\n              \"text-background-color\": \"#F5E372\",\n              color: \"black\",\n              width: 3,\n              \"target-arrow-color\": \"black\",\n              \"target-arrow-shape\": (e) => {\n                return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n              },\n              \"curve-style\": \"bezier\",\n            },\n          },\n          {\n            selector: \":selected\",\n            style: {\n              \"border-width\": \"5\",\n              \"border-color\": \"red\",\n              \"border-style\": \"dashed\",\n              padding: \"8px\",\n            },\n          },\n        ],\n      });\n      cy.layout(cy_layout).run();\n      //save current Ref\n      cytoscapeRef.current = cy;\n\n      //==== SEND TO STORE ====\n      if (props.hammMatrix) {\n        props.hmmMatrixToStore(hammingMatrix);\n      }\n      props.graphObjectToStore(graphObject);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Col span={24} style={{ position: \"relative\" }}>\n        <div\n          id=\"graph-cont-is-empty\"\n          style={{ display: graphIsAvailable ? \"none\" : \"block\" }}\n        >\n          <Empty\n            description={\"No previous graph found: click draw to create one\"}\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          />\n        </div>\n        <div\n          id=\"graph-cont-is-processing\"\n          style={{ display: processingGraph ? \"block\" : \"none\" }}\n        >\n          <p>\n            <span>\n              <LoadingOutlined\n                style={{\n                  fontSize: 18,\n                }}\n                spin\n              />\n            </span>{\" \"}\n            Processing ...\n          </p>\n        </div>\n      </Col>\n      <div id=\"graph-cont-cytoscape-canvas\"></div>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    metadata: state.metadata,\n    phyloTimeTree: state.phyloTimeTree,\n    sequence: state.sequence,\n    graphObject: state.graphObject,\n    hammMatrix: state.hammMatrix,\n    graphSettings: state.graphSettings,\n    colorLUT: state.colorLUT,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      changeIsUserClusteringSetting,\n      changeIsUserReDrawSetting,\n      hmmMatrixToStore,\n      graphObjectToStore,\n      graphClusterToStore,\n      colorLUTtoStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphContainer);\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/main_matrix.js",["192","193","194"],"import React from \"react\";\nimport { Row, Col, Modal, Spin } from \"antd\";\nimport \"./style_matrix.css\";\nimport { connect } from \"react-redux\";\n\n//import MatrixViewer from \"./comp_matrixViewer\";\n\nconst GraphMatrix = (props) => {\n  return (\n    <React.Fragment>\n      <Row></Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    graphMatrix: state.graphMatrix,\n  };\n}\n\nexport default connect(mapStateToProps)(GraphMatrix);\n\n/*\n<Col xs={24}>\n          {props.graphMatrix.data &&\n            props.graphMatrix.data.cells &&\n            props.graphMatrix.data.headers && (\n              <MatrixViewer graphMatrix={props.graphMatrix} />\n            )}\n        </Col>\n\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/comp_matrixViewer.js",[],["195","196"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/model/hammingMatrix_prop.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/hammMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_graphObject.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphObjectReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/construct_mcg.js",["197","198","199"],"//========================================== MCG ================================================\nexport function createMCG(mat, edgeCutoff) {\n  //Assumed the input is true\n  //Take an adjacency matrix of pair-wise SNVs distance and edgecutoff (number > 0)\n  //Return graph with only edge that have minimum value among other pair-wise sibling edges\n  let taxaIDs = mat.matrix_headers;\n  let taxaMatrix = mat.matrix_cells;\n\n  //Filter minimum\n  let graphMinEdges = [];\n  taxaIDs.forEach((taxa) => {\n    let taxa_df = taxaMatrix.filter((t) => {\n      return t.source == taxa || t.target == taxa;\n    });\n    let taxa_min = Math.min(...taxa_df.map((d) => d.value)); //spread operator to extract elem from array\n    let taxa_df_min = taxa_df\n      .filter((e) => {\n        return e.value == taxa_min;\n      })\n      .filter(function (g) {\n        let duplicatedG = graphMinEdges.find(function (h) {\n          return h.source === g.source && h.target === g.target;\n        });\n        return !duplicatedG ? true : false;\n      });\n    graphMinEdges = graphMinEdges.concat(taxa_df_min);\n  });\n\n  //Filter by cut-off\n  if (edgeCutoff && edgeCutoff > 0) {\n    graphMinEdges = graphMinEdges.filter((e) => {\n      return e.value < edgeCutoff;\n    });\n  }\n  return { nodes: taxaIDs, edges: graphMinEdges };\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/algorithm/cluster_fcc.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/find_clusters.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphClustersReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/colorLUTReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/colorActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/metadataReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/phyloTimeTreeReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_snpsLoader.js",["200","201"],"import React from \"react\";\nimport { Upload, Button, message, List } from \"antd\";\nimport { StopOutlined, CheckCircleTwoTone } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  sequenceToStore,\n  metadataToStore,\n  phyloTimeTreeToStore,\n  isinputLoadingToStore,\n} from \"../action/inputActions\";\n\nconst fastaToJson = require(\"bio-parsers\").fastaToJson;\nconst { Dragger } = Upload;\n\nconst InputLoader = (props) => {\n  //console.log(\"Input Loader - init\");\n\n  async function readFastaToJSON(fastaString) {\n    if (props.sequence === null) {\n      //console.log(\"async\");\n      const sequenceJSON = await fastaToJson(fastaString);\n      const snpsSequence = [];\n      if (Array.isArray(sequenceJSON) && sequenceJSON.length > 1) {\n        //console.log(sequenceJSON);\n        //check all error message, alert, and no seq to store\n        let isolateName = {};\n        let seqLen = [];\n        let noErr = true;\n        for (let index = 0; index < sequenceJSON.length; index++) {\n          let messages = sequenceJSON[index].messages;\n          let parsedSequence = sequenceJSON[index].parsedSequence;\n          let success = sequenceJSON[index].success;\n          //tracking size\n          if (seqLen.indexOf(parsedSequence.size) === -1) {\n            seqLen.push(parsedSequence.size);\n          }\n          //check success parsing\n          if (!success) {\n            noErr = false;\n            alert(\"Parsing error:\", parsedSequence.name);\n            break;\n          }\n          //check err messages\n          if (messages.length > 0) {\n            noErr = false;\n            alert(messages[0]);\n            break;\n          }\n          //check sequence length\n          if (seqLen.length > 1) {\n            noErr = false;\n            alert(\"Size error: Alignment required sequence with same length\");\n            break;\n          }\n          //check duplicated isolate\n          if (!isolateName[parsedSequence.name]) {\n            isolateName[parsedSequence.name] = true;\n          } else {\n            noErr = false;\n            alert(\"Sequence error: Duplicated sequence\");\n            break;\n          }\n          //making snpsSequence\n          if (noErr) {\n            snpsSequence.push({\n              id: parsedSequence.name,\n              size: parsedSequence.size,\n              sequence: parsedSequence.sequence.toLowerCase(),\n            });\n          }\n        }\n\n        if (noErr) {\n          //load to store\n          props.sequenceToStore(snpsSequence);\n          //props.isinputLoadingToStore(false);\n          //display success message\n          message.success(\"The sequences have been loaded\", 1);\n        }\n      } else {\n        alert(\"Error: Required at least 2 sequences\");\n      }\n    } else {\n      alert(\"Sequences have been loaded. Refresh to re-load a new one\");\n    }\n  }\n\n  const beforeUploadHandler = (file) => {\n    if (file) {\n      let inputType = \"seq\";\n\n      //check extension\n      //check content\n\n      switch (inputType) {\n        case \"seq\":\n          const reader = new FileReader();\n          reader.readAsText(file);\n          props.isinputLoadingToStore(true);\n          reader.onloadend = function (evt) {\n            const dataText = evt.target.result;\n            readFastaToJSON(dataText);\n            props.isinputLoadingToStore(false);\n          };\n          break;\n\n        default:\n          message.error(\"Invalid input file\", 0.5);\n          break;\n      }\n    }\n    return false; //to avoid upload action (we parse and load it to store instead)\n  };\n\n  const inputList = [\"SNPs sequence\"];\n  const getInputStatus = function (item) {\n    //console.log(\"getInputStatus\");\n    switch (item) {\n      case \"SNPs sequence\":\n        if (props.sequence) {\n          return <CheckCircleTwoTone twoToneColor=\"#52c41a\" />;\n        } else {\n          return <StopOutlined />;\n        }\n      default:\n        break;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Dragger\n        accept={\".fa, .fasta, .fna, .mfa\"}\n        showUploadList={false}\n        style={{\n          height: \"500px\",\n          backgroundColor: \"white\",\n        }}\n        name=\"file\"\n        multiple={false}\n        action=\"dummy-post\"\n        beforeUpload={beforeUploadHandler}\n      >\n        <div id=\"input-loader-snps\">\n          <Button id=\"input-loader-button-snps\" shape={\"round\"} size={\"large\"}>\n            Input SNPs (fasta)\n          </Button>\n        </div>\n        <div id=\"input-status\">\n          <List\n            grid={{ gutter: 0, column: 1 }}\n            size=\"small\"\n            style={{ fontSize: \"10px\", lineHeight: \"10px\" }}\n            dataSource={inputList}\n            renderItem={(item) => (\n              <List.Item style={{ backgroundColor: \"white\", margin: \"0px\" }}>\n                {getInputStatus(item)} {item}\n              </List.Item>\n            )}\n          />\n        </div>\n      </Dragger>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    sequence: state.sequence,\n    phyloTimeTree: state.phyloTimeTree,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      sequenceToStore,\n      isinputLoadingToStore,\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputLoader);\n\n/*\n\n        */\n\n// Changing component state will trigger Component-Init and Component-Render\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_metadataLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_phylotimetreeLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/util_inputLoaders.js",[],{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":61,"column":6,"nodeType":"208","endLine":61,"endColumn":26,"suggestions":"209"},{"ruleId":"206","severity":1,"message":"210","line":92,"column":6,"nodeType":"208","endLine":92,"endColumn":51,"suggestions":"211"},{"ruleId":"212","severity":1,"message":"213","line":2,"column":15,"nodeType":"214","messageId":"215","endLine":2,"endColumn":18},{"ruleId":"212","severity":1,"message":"216","line":2,"column":20,"nodeType":"214","messageId":"215","endLine":2,"endColumn":25},{"ruleId":"212","severity":1,"message":"217","line":2,"column":27,"nodeType":"214","messageId":"215","endLine":2,"endColumn":31},{"ruleId":"202","replacedBy":"218"},{"ruleId":"204","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":13,"column":23,"nodeType":"222","messageId":"223","endLine":13,"endColumn":25},{"ruleId":"220","severity":1,"message":"221","line":13,"column":43,"nodeType":"222","messageId":"223","endLine":13,"endColumn":45},{"ruleId":"220","severity":1,"message":"221","line":18,"column":24,"nodeType":"222","messageId":"223","endLine":18,"endColumn":26},{"ruleId":"212","severity":1,"message":"224","line":8,"column":3,"nodeType":"214","messageId":"215","endLine":8,"endColumn":18},{"ruleId":"212","severity":1,"message":"225","line":9,"column":3,"nodeType":"214","messageId":"215","endLine":9,"endColumn":23},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["228"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["229"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Spin' is defined but never used.",["226"],["227"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'metadataToStore' is defined but never used.","'phyloTimeTreeToStore' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},"Update the dependencies array to be: [draw, graph_isUserReDraw, props]",{"range":"234","text":"235"},"Update the dependencies array to be: [graph_clusterMethod, graph_isUserClustering, props]",{"range":"236","text":"237"},[2326,2346],"[draw, graph_isUserReDraw, props]",[3371,3416],"[graph_clusterMethod, graph_isUserClustering, props]"]