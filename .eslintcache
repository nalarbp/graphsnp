[{"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js":"1","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js":"2","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js":"3","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js":"4","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js":"5","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js":"6","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js":"7","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js":"8","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_inputLoader.js":"9","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js":"10","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js":"11","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js":"12","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js":"13","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js":"14","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js":"15","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js":"16","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js":"17","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js":"18","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/collectionDatesReducer.js":"19","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/exposurePeriodReducer.js":"20","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js":"21","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js":"22","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js":"23","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/algorithms.js":"24","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphMatrixReducer.js":"25","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/main_matrix.js":"26","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/comp_matrixViewer.js":"27","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js":"28","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js":"29","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js":"30","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js":"31","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js":"32","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js":"33","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js":"34"},{"size":663,"mtime":1610195666935,"results":"35","hashOfConfig":"36"},{"size":1034,"mtime":1610950598064,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1610086392986,"results":"38","hashOfConfig":"36"},{"size":477,"mtime":1610107486220,"results":"39","hashOfConfig":"36"},{"size":717,"mtime":1610950774877,"results":"40","hashOfConfig":"36"},{"size":88,"mtime":1610155012196,"results":"41","hashOfConfig":"36"},{"size":1454,"mtime":1611642465183,"results":"42","hashOfConfig":"36"},{"size":958,"mtime":1610683680879,"results":"43","hashOfConfig":"36"},{"size":6017,"mtime":1610951325302,"results":"44","hashOfConfig":"36"},{"size":4829,"mtime":1611644283874,"results":"45","hashOfConfig":"36"},{"size":6931,"mtime":1611646001511,"results":"46","hashOfConfig":"36"},{"size":2628,"mtime":1610950731083,"results":"47","hashOfConfig":"36"},{"size":494,"mtime":1610683225034,"results":"48","hashOfConfig":"36"},{"size":217,"mtime":1610150722555,"results":"49","hashOfConfig":"36"},{"size":1218,"mtime":1611643464985,"results":"50","hashOfConfig":"36"},{"size":378,"mtime":1610108902860,"results":"51","hashOfConfig":"36"},{"size":584,"mtime":1610154547016,"results":"52","hashOfConfig":"36"},{"size":2836,"mtime":1611641352395,"results":"53","hashOfConfig":"36"},{"size":403,"mtime":1610683132643,"results":"54","hashOfConfig":"36"},{"size":401,"mtime":1610683123357,"results":"55","hashOfConfig":"36"},{"size":93,"mtime":1611639547890,"results":"56","hashOfConfig":"36"},{"size":1008,"mtime":1611641105753,"results":"57","hashOfConfig":"36"},{"size":401,"mtime":1610683140985,"results":"58","hashOfConfig":"36"},{"size":5988,"mtime":1611639657083,"results":"59","hashOfConfig":"36"},{"size":390,"mtime":1610949114950,"results":"60","hashOfConfig":"36"},{"size":699,"mtime":1610960407026,"results":"61","hashOfConfig":"36"},{"size":1058,"mtime":1611010611871,"results":"62","hashOfConfig":"36"},{"size":1719,"mtime":1610950407523,"results":"63","hashOfConfig":"36"},{"size":747,"mtime":1610950423257,"results":"64","hashOfConfig":"36"},{"size":3720,"mtime":1611643434028,"results":"65","hashOfConfig":"36"},{"size":159,"mtime":1610949181366,"results":"66","hashOfConfig":"36"},{"size":383,"mtime":1611039003510,"results":"67","hashOfConfig":"36"},{"size":156,"mtime":1611039074948,"results":"68","hashOfConfig":"36"},{"size":3748,"mtime":1611639630509,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"13s4y1q",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/index.js",[],["142","143"],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/App.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reportWebVitals.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/configureStore.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/header.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/history.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/index.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_footer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/comp_inputLoader.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_sider.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/comp_graphContainer.js",["144","145","146","147"],"/*\n- Comp init => render => all useEffect\n- loading wont work using states, use indicator on draw button instead\n- All useEffect called when first loaded (eg: from Home to graphSNP page)\n- certain useEffect called when any deppendent useEffect affected\n*/\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Row, Col, Empty } from \"antd\";\nimport { generateCytoscapeGraph } from \"../utils/create_cyData\";\nimport cytoscape from \"cytoscape\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nconst GraphContainer = (props) => {\n  //state\n  const [graphIsDrawn, setgraphIsDrawn] = useState(false);\n  const [drawingGraph, setdrawingGraph] = useState(false);\n  //Settings\n  const layout = props.graphSettings.layout;\n  const userDrawGraph = props.graphSettings.isUserReDraw;\n  const edgeFilterCutoff = props.graphSettings.edgeFilterCutoff;\n  const userFilterEdges = props.graphSettings.isUserFilterEdges;\n  const clusterMethod = props.graphSettings.clusterMethod;\n  const userDoClustering = props.graphSettings.isUserClustering;\n  const cytoscapeRef = useRef(null);\n  const prevGraph = props.prevGraph;\n\n  useEffect(() => {\n    if (userDrawGraph) {\n      setdrawingGraph(true);\n      setgraphIsDrawn(true);\n      setTimeout(function () {\n        draw();\n        setdrawingGraph(false);\n        props.changeIsUserReDrawSetting(false);\n      }, 100);\n    }\n  }, [userDrawGraph]);\n\n  useEffect(() => {\n    if (layout && cytoscapeRef.current) {\n      let cy = cytoscapeRef.current;\n      let graph_layout = { name: layout, animate: false, fit: true };\n      cy.layout(graph_layout).run();\n      cytoscapeRef.current = cy;\n    }\n  }, [layout]);\n\n  useEffect(() => {\n    let cy = cytoscapeRef.current;\n    if (cy && userFilterEdges) {\n      let cy = cytoscapeRef.current;\n      cy.remove(`edge[weight > ${edgeFilterCutoff}]`);\n      let graph_layout = { name: layout, animate: false, fit: true };\n      cy.layout(graph_layout).run();\n      props.changeIsUserFilterEdgesSetting(false);\n      cytoscapeRef.current = cy;\n    }\n  }, [edgeFilterCutoff, userFilterEdges]);\n\n  useEffect(() => {\n    if (!graphIsDrawn) {\n      if (prevGraph) {\n        setdrawingGraph(true);\n        setgraphIsDrawn(true);\n        setTimeout(function () {\n          reload();\n          setdrawingGraph(false);\n        }, 1);\n      }\n    }\n  }, [graphIsDrawn, prevGraph]);\n\n  useEffect(() => {\n    if (userDoClustering) {\n      //do clustering\n      let cy = cytoscapeRef.current;\n      var clusters = cy.elements().markovCluster({\n        attributes: [\n          function (edge) {\n            return edge.data(\"weight\");\n          },\n        ],\n      });\n      console.log(clusters);\n    }\n  }, [clusterMethod, userDoClustering]);\n\n  //DRAW\n  function reload() {\n    const graph_layout = { name: layout, animate: false, fit: true };\n    if (prevGraph) {\n      let cy = prevGraph;\n      cy.mount(document.getElementById(\"cytoscape-canvas\"));\n      // const cy = cytoscape({\n      //   elements: prevGraph.cytoscape,\n      //   container: document.getElementById(\"cytoscape-canvas\"),\n      //   pannable: true,\n      //   selected: true,\n      //   boxSelectionEnabled: false,\n      //   style: [\n      //     {\n      //       selector: \"node\",\n      //       style: {\n      //         label: \"data(id)\",\n      //         \"border-width\": 3,\n      //         \"border-style\": \"solid\",\n      //         \"border-color\": \"black\",\n      //       },\n      //     },\n      //     {\n      //       selector: \"edge\",\n      //       style: {\n      //         label: \"data(weight)\",\n      //         \"font-size\": \"8px\",\n      //         \"text-background-color\": \"#F5E372\",\n      //         color: \"black\",\n      //         width: 3,\n      //         \"target-arrow-color\": \"black\",\n      //         \"target-arrow-shape\": (e) => {\n      //           return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n      //         },\n      //         \"curve-style\": \"bezier\",\n      //       },\n      //     },\n      //     {\n      //       selector: \":selected\",\n      //       style: {\n      //         \"border-width\": \"5\",\n      //         \"border-color\": \"red\",\n      //         \"border-style\": \"dashed\",\n      //         padding: \"8px\",\n      //       },\n      //     },\n      //   ],\n      // });\n      cy.layout(graph_layout).run();\n      //save current Ref\n      cytoscapeRef.current = cy;\n    }\n  }\n  function draw() {\n    const graphData = generateCytoscapeGraph(\n      props.sequence,\n      props.collectionDates,\n      props.exposurePeriod,\n      props.graphSettings\n    );\n    //clean previous drawing artifacts\n    const graph_layout = { name: layout, animate: false, fit: true };\n    if (graphData && graphData.cytoscape) {\n      const cy = cytoscape({\n        elements: graphData.cytoscape,\n        container: document.getElementById(\"cytoscape-canvas\"),\n        pannable: true,\n        selected: true,\n        boxSelectionEnabled: false,\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              label: \"data(id)\",\n              \"border-width\": 3,\n              \"border-style\": \"solid\",\n              \"border-color\": \"black\",\n            },\n          },\n          {\n            selector: \"edge\",\n            style: {\n              label: \"data(weight)\",\n              \"font-size\": \"8px\",\n              \"text-background-color\": \"#F5E372\",\n              color: \"black\",\n              width: 3,\n              \"target-arrow-color\": \"black\",\n              \"target-arrow-shape\": (e) => {\n                return e.data(\"dir\") === \"forward\" ? \"triangle\" : \"none\";\n              },\n              \"curve-style\": \"bezier\",\n            },\n          },\n          {\n            selector: \":selected\",\n            style: {\n              \"border-width\": \"5\",\n              \"border-color\": \"red\",\n              \"border-style\": \"dashed\",\n              padding: \"8px\",\n            },\n          },\n        ],\n      });\n      cy.layout(graph_layout).run();\n      //save current Ref\n      cytoscapeRef.current = cy;\n      //send to matrix store\n      props.graphMatrixToStore({\n        type: graphData.method,\n        data: graphData.distanceMatrix,\n      });\n      props.prevGraphToStore(cy);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Col span={24}>\n        <div\n          id=\"loading-graph\"\n          style={{ display: drawingGraph ? \"block\" : \" none\" }}\n        >\n          <p>Loading graph ... </p>\n          <LoadingOutlined\n            style={{\n              fontSize: 18,\n            }}\n            spin\n          />\n        </div>\n      </Col>\n\n      <div\n        id=\"graph-empty\"\n        style={{ display: graphIsDrawn ? \"none\" : \" block\" }}\n      >\n        <Empty\n          description={\"No previous graph found: click draw to create one\"}\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n        />\n      </div>\n\n      <div id=\"cytoscape-canvas\"></div>\n    </React.Fragment>\n  );\n};\n\nexport default GraphContainer;\n/*\n\n*/\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/navigation/navigation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/inputActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/navigationActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphSettingsActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/sequenceReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/navSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphSettingsReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/collectionDatesReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/exposurePeriodReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/utils.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/constants.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/isInputLoadingReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/algorithms.js",["148","149","150"],"const hammingDistance = require(\"hamming\");\n//========================================== MEG ================================================\n/*Minimum Edges Graph Algorithm\nThis algoritm construct a list of isolate's (minimum) pairwise hamming distance\nDEFINITION:\n- A node represents isolate\n- An edge represent a pairwise hamming distance (SNP distance) between two nodes\n- A node has single or multiple edges to represent their pairwise distance to all the remainder nodes\n- A minimum edge is an edge that its weight equal to the minimum value of a node's all edges\nINPUT:\n- Alignment of multi fasta SNPs sequence object \n- Sequence object structure is: {id: \"name_of_isolate\";string, sequence:\"valid_dna_sequence\";string, size:length_of_sequence;number}\n- Each sequence must have identical length\nPROCEDURE:\n#Step 1: Construct an asymetric matrix of pairwise hamming distance and search the minimum edge for all nodes (combined step)\n#Step 2: Filter the matrix to keep only edges that equal to the minimum value of the corresponding node's edges\n#If succes return the matrix in form of list of edge object, otherwise return null\nOUTPUT\n- A list of edge list object (edges that equal to the minimum value only) \n- OR NUll\n*/\n\nexport function createMCG(seq) {\n  //Always assume seq is true, correct, and appropriate input (more than 2)\n  //Construct the matrix, find the minimum edges and save it the list of objects\n  let snpDist_df = [];\n  let taxaIDs = [];\n  let disMat = new Map();\n  for (let i = 0; i < seq.length; i++) {\n    taxaIDs.push(seq[i].id);\n    if (i !== seq.length - 1) {\n      //console.log(i, \"===\");\n      const var1 = seq[i];\n      const matrixCells = [];\n      for (let j = i + 1; j < seq.length; j++) {\n        const var2 = seq[j];\n        let snpDist = hammingDistance(var1.sequence, var2.sequence);\n        snpDist_df.push({ var1: var1.id, var2: var2.id, dist: snpDist });\n        matrixCells.push({ col: var2.id, val: snpDist });\n      }\n      disMat.set(var1.id, matrixCells);\n    } else {\n      const var1 = seq[i];\n      const matrixCells = [];\n      disMat.set(var1.id, matrixCells);\n    }\n  }\n  //Filter minimum\n  let final_snpDist = [];\n  taxaIDs.forEach((taxa) => {\n    let taxa_df = snpDist_df.filter((t) => {\n      return t.var1 == taxa || t.var2 == taxa;\n    });\n\n    let taxa_min = Math.min(...taxa_df.map((d) => d.dist)); //spread operator to extract elem from array\n\n    let taxa_df_min = taxa_df\n      .filter((e) => {\n        return e.dist == taxa_min;\n      })\n      .filter(function (g) {\n        let duplicatedG = final_snpDist.find(function (h) {\n          return h.var1 === g.var1 && h.var2 === g.var2;\n        });\n        return !duplicatedG ? true : false;\n        // if duplicatedG not found (undefined) (keep g), if inverseG exist (discard g )\n        // not actually an inverse, since we created asymetric matrix, it\n        // it was just a duplicated pairwise distance,\n        // so h.var1 === g.var1 && h.var2 === g.var2 will works\n      });\n    final_snpDist = final_snpDist.concat(taxa_df_min);\n  });\n  // minDistances.forEach((d) => {\n  //   let minDist = snpDist_df\n  //     .filter((e) => {\n  //       return e.var1 === d.id || e.var2 === d.id;\n  //     })\n  //     .filter((f) => {\n  //       return f.dist === d.dist;\n  //     })\n  //     .filter(function (g) {\n  //       let duplicatedG = final_snpDist.find(function (h) {\n  //         return h.var1 === g.var1 && h.var2 === g.var2;\n  //       });\n  //       return !duplicatedG ? true : false;\n  //       // if duplicatedG not found (undefined) (keep g), if inverseG exist (discard g )\n  //       // not actually an inverse, since we created asymetric matrix, it\n  //       // it was just a duplicated pairwise distance,\n  //       // so h.var1 === g.var1 && h.var2 === g.var2 will works\n  //     });\n  //   //merge\n  //   final_snpDist = final_snpDist.concat(minDist);\n  // });\n\n  return final_snpDist.length > 0\n    ? { snpDistMat: disMat, snpDistDF: final_snpDist }\n    : null;\n}\n//========================================== Single MEG ================================================\n/* Similar with MEG but it only keep one minimum edges, instead of all minimum edges\n */\n// function createSMEG(seq) {\n//   let snpDist_df = [];\n//   let minEdgeTracker = { s: null, t: null, dist: null };\n//   for (let i = 0; i < seq.length - 1; i++) {\n//     const var1 = seq[i];\n//     minEdgeTracker.s = var1.id;\n//     minEdgeTracker.dist = null;\n//     for (let j = i + 1; j < seq.length; j++) {\n//       const var2 = seq[j];\n//       let snpDist = hammingDistance(var1.sequence, var2.sequence);\n//       if (minEdgeTracker.dist === null) {\n//         minEdgeTracker.t = var2.id;\n//         minEdgeTracker.dist = snpDist;\n//       } else {\n//         if (snpDist < minEdgeTracker.dist) {\n//           minEdgeTracker.t = var2.id;\n//           minEdgeTracker.dist = snpDist;\n//         }\n//       }\n//     }\n//     snpDist_df.push(minEdgeTracker);\n//   }\n//   return snpDist_df.length > 0 ? snpDist_df : null;\n// }\n\n//========================================== SEQTRACK ================================================\n\nexport function createCATHAI(seq) {\n  //Always assume seq is true, correct, and appropriate input (more than 2)\n  //Construct the matrix\n  let snpDist_df = [];\n  let disMat = new Map();\n  for (let i = 0; i < seq.length; i++) {\n    if (i !== seq.length - 1) {\n      const var1 = seq[i];\n      const matrixCells = [];\n      for (let j = i + 1; j < seq.length; j++) {\n        const var2 = seq[j];\n        let snpDist = hammingDistance(var1.sequence, var2.sequence);\n        snpDist_df.push({ var1: var1.id, var2: var2.id, dist: snpDist });\n        matrixCells.push({ col: var2.id, val: snpDist });\n      }\n      disMat.set(var1.id, matrixCells);\n    } else {\n      const var1 = seq[i];\n      const matrixCells = [];\n      disMat.set(var1.id, matrixCells);\n    }\n  }\n  return snpDist_df.length > 0\n    ? { snpDistMat: disMat, snpDistDF: snpDist_df }\n    : null;\n}\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/graphMatrixReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/main_matrix.js",["151","152"],"import React from \"react\";\nimport { Row, Col, Modal, Spin } from \"antd\";\nimport \"./style_matrix.css\";\nimport { connect } from \"react-redux\";\n\nimport MatrixViewer from \"./comp_matrixViewer\";\n\nconst GraphMatrix = (props) => {\n  return (\n    <React.Fragment>\n      <Row>\n        <Col xs={24}>\n          {props.graphMatrix.data &&\n            props.graphMatrix.data.cells &&\n            props.graphMatrix.data.headers && (\n              <MatrixViewer graphMatrix={props.graphMatrix} />\n            )}\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    graphMatrix: state.graphMatrix,\n  };\n}\n\nexport default connect(mapStateToProps)(GraphMatrix);\n","/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_matrix/comp_matrixViewer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_home/main_home.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_documentation/main_documentation.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/page_graphsnp/main_graphsnp.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/graphMatrixActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/reducers/prevGraphReducer.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/action/prevGraphActions.js",[],"/Volumes/BUDI/PhD/0_THESIS/chapter_graphSNP/APP/graph-snp/src/utils/create_cyData.js",[],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":8,"column":10,"nodeType":"159","messageId":"160","endLine":8,"endColumn":13},{"ruleId":"161","severity":1,"message":"162","line":37,"column":6,"nodeType":"163","endLine":37,"endColumn":21,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":58,"column":6,"nodeType":"163","endLine":58,"endColumn":41,"suggestions":"166"},{"ruleId":"161","severity":1,"message":"167","line":71,"column":6,"nodeType":"163","endLine":71,"endColumn":31,"suggestions":"168"},{"ruleId":"169","severity":1,"message":"170","line":52,"column":21,"nodeType":"171","messageId":"172","endLine":52,"endColumn":23},{"ruleId":"169","severity":1,"message":"170","line":52,"column":39,"nodeType":"171","messageId":"172","endLine":52,"endColumn":41},{"ruleId":"169","severity":1,"message":"170","line":59,"column":23,"nodeType":"171","messageId":"172","endLine":59,"endColumn":25},{"ruleId":"157","severity":1,"message":"173","line":2,"column":20,"nodeType":"159","messageId":"160","endLine":2,"endColumn":25},{"ruleId":"157","severity":1,"message":"174","line":2,"column":27,"nodeType":"159","messageId":"160","endLine":2,"endColumn":31},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["177"],"React Hook useEffect has missing dependencies: 'layout' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["178"],"React Hook useEffect has a missing dependency: 'reload'. Either include it or remove the dependency array.",["179"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Modal' is defined but never used.","'Spin' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [draw, props, userDrawGraph]",{"range":"186","text":"187"},"Update the dependencies array to be: [edgeFilterCutoff, layout, props, userFilterEdges]",{"range":"188","text":"189"},"Update the dependencies array to be: [graphIsDrawn, prevGraph, reload]",{"range":"190","text":"191"},[1375,1390],"[draw, props, userDrawGraph]",[2038,2073],"[edgeFilterCutoff, layout, props, userFilterEdges]",[2328,2353],"[graphIsDrawn, prevGraph, reload]"]